{
    "sourceFile": "components/OrdersProductsCategoriesInfo.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1704779784563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1704779784563,
            "name": "Commit-0",
            "content": "// Import the necessary modules\r\nimport React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport { Card, ListItem, Divider } from '@rneui/themed';\r\nimport { useTheme } from '@rneui/themed';\r\nimport usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n\r\n// Define the component for rendering the UI of calling the custom hook\r\nconst OrdersProductsCategoriesInfo = () => {\r\n    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n    // Use the useTheme hook to get the theme object from RNEUI\r\n    const { theme } = useTheme();\r\n    // Return a JSX element that renders the UI based on the query state and data\r\n    return (\r\n        <View style={styles.container}>\r\n            {/* Show a loading text while the data is being fetched */}\r\n            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n            {/* Show an error text if there is an error */}\r\n            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n            {/* Show a card with the data if the data is available */}\r\n            {data && (\r\n                <Card>\r\n                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n                    <Card.Divider />\r\n                    <View style={styles.dataContainer}>\r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                        {data.orderItemGrouping.map(item => (\r\n                            <ListItem key={item.itemCategory3} bottomDivider>\r\n                                <ListItem.Content>\r\n                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                    </ListItem.Subtitle>\r\n                                </ListItem.Content>\r\n                            </ListItem>\r\n                        ))}\r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n                            <ListItem key={key} bottomDivider>\r\n                                <ListItem.Content>\r\n                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                    </ListItem.Subtitle>\r\n                                </ListItem.Content>\r\n                            </ListItem>\r\n                        ))}\r\n                    </View>\r\n                </Card>\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\n// Define the styles for the component using StyleSheet\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    loading: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    dataContainer: {\r\n        margin: 10,\r\n    },\r\n    dataTitle: {\r\n        fontSize: 18,\r\n        fontWeight: \"bold\",\r\n        marginVertical: 5,\r\n    },\r\n    dataDivider: {\r\n        marginVertical: 5,\r\n    },\r\n});\r\n\r\n// Export the component\r\nexport default OrdersProductsCategoriesInfo;\r\n"
        }
    ]
}