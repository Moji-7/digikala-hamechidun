{
    "sourceFile": "components/forms/PipelinesStatusSummeryComponent.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1711357847573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711357876150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,13 +87,13 @@\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n                 </Text>\r\n             </TouchableOpacity>\r\n-            {expanded && pipelineStatusSummery.map((pipelineStatus) => (\r\n+            {expanded && pipelineStatusSummery.map((pipelineStatusSummery:any) => (\r\n                 \r\n-                <PipelinesButton key={pipelineStatus.id}\r\n-                    pipelineStatus={pipelineStatus}\r\n-                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n+                <PipelinesButton key={pipelineStatusSummery.id}\r\n+                    pipelineStatus={pipelineStatusSummery}\r\n+                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n                     loadingStates={loadingStates}\r\n                     getButtonColor={getButtonColor}\r\n                 />\r\n                \r\n"
                },
                {
                    "date": 1711359135729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,13 @@\n \r\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n-    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery);;\r\n+    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n+\r\n     // const processedData = useWebSocket('http://localhost:3222');\r\n     //get\r\n \r\n     // const { data } = useGetAllQuery();\r\n"
                },
                {
                    "date": 1711366289034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,15 @@\n \r\n \r\n \r\n \r\n+    const toggleExpansion = () => {\r\n+        setExpanded(!expanded);\r\n+        if (!expanded) {\r\n+            // Trigger the API call only when expanding the component\r\n+            dispatch(apiPipeline.endpoints.getPipelineStatusSummery.initiate(eyeProductId));\r\n+        }\r\n+    };\r\n     const getButtonColor = (pipelineId: number) => {\r\n         //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n         return 'green';  // Green for successful pipeline\r\n         // } else if (loadingStates.includes(pipelineId)) {\r\n@@ -100,9 +107,8 @@\n                \r\n \r\n             ))}\r\n \r\n-\r\n             {isError && <Text color=\"red\">{error}</Text>}\r\n         </View>\r\n \r\n     );\r\n"
                },
                {
                    "date": 1711366462090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,15 @@\n     const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n+    const toggleExpansion = () => {\r\n+        setExpanded(!expanded);\r\n+        if (!expanded) {\r\n+            // Trigger the API call only when expanding the component\r\n+            dispatch(apiPipeline.endpoints.getPipelineStatusSummery.initiate(eyeProductId));\r\n+        }\r\n+    };\r\n \r\n     // const processedData = useWebSocket('http://localhost:3222');\r\n     //get\r\n \r\n@@ -69,15 +76,8 @@\n \r\n \r\n \r\n \r\n-    const toggleExpansion = () => {\r\n-        setExpanded(!expanded);\r\n-        if (!expanded) {\r\n-            // Trigger the API call only when expanding the component\r\n-            dispatch(apiPipeline.endpoints.getPipelineStatusSummery.initiate(eyeProductId));\r\n-        }\r\n-    };\r\n     const getButtonColor = (pipelineId: number) => {\r\n         //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n         return 'green';  // Green for successful pipeline\r\n         // } else if (loadingStates.includes(pipelineId)) {\r\n"
                },
                {
                    "date": 1711366503136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { useGetAllQuery, useGetPipelineStatusSummeryQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\n import { useTheme } from '@rneui/themed';\r\n import PipelinesButton from './PipelinesButton';\r\n import PipelinesSummery from './PipelinesSummery';\r\n-import { useSelector } from 'react-redux';\r\n+import { useDispatch, useSelector } from 'react-redux';\r\n import useSocket from '../hooks/useCustomSocket';\r\n \r\n //import useWebSocket from '../hooks/useWebSocket';\r\n \r\n@@ -18,8 +18,10 @@\n }\r\n \r\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n+    const dispatch = useDispatch();\r\n+\r\n     const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n     const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n@@ -42,12 +44,9 @@\n     const expandedText = 'Details'\r\n     const [expanded, setExpanded] = useState(false);\r\n \r\n \r\n-    const toggleExpansion = () => {\r\n-        setExpanded(!expanded);\r\n-    };\r\n-\r\n+ \r\n     const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n     const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n \r\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n"
                },
                {
                    "date": 1711366542656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useEffect, useState } from 'react';\r\n import { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\r\n import { Button, ActivityIndicator } from 'react-native'; // Import the necessary components\r\n \r\n-import { useGetAllQuery, useGetPipelineStatusSummeryQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\n+import { apiPipeline, useGetAllQuery, useGetPipelineStatusSummeryQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\n import { useTheme } from '@rneui/themed';\r\n import PipelinesButton from './PipelinesButton';\r\n import PipelinesSummery from './PipelinesSummery';\r\n import { useDispatch, useSelector } from 'react-redux';\r\n@@ -20,10 +20,10 @@\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n-    const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n-    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n+    // const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n+    // const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n     const toggleExpansion = () => {\r\n"
                },
                {
                    "date": 1711366681750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n     // const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n-    // const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n+    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n     const toggleExpansion = () => {\r\n"
                },
                {
                    "date": 1711367116118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n-    // const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n+     const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n     const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n@@ -83,8 +83,14 @@\n         //     return '#ddd'; // Grey for loading state\r\n         //   }\r\n         // return 'red'; // Default color for other states\r\n     };\r\n+\r\n+     // Render a loading indicator or null if the data is not yet available\r\n+     if (!pipelineStatusSummery) {\r\n+        return expanded ? <div>Loading...</div> : null;\r\n+    }\r\n+\r\n     return (\r\n         <View style={styles.container}>\r\n             <Text style={styles.textStyle}>\r\n                 {expanded ? expandedText : initialText}\r\n"
                },
                {
                    "date": 1711367163731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n-     const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n-    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n+    //  const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n+    // const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n     const toggleExpansion = () => {\r\n"
                },
                {
                    "date": 1711369818815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n     //  const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n-    // const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n+     const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n     const toggleExpansion = () => {\r\n"
                },
                {
                    "date": 1711369968554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n-    //  const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n+     const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n      const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1711370308601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n-     const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n-     const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n+    const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n+    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n     const toggleExpansion = () => {\r\n@@ -44,16 +44,16 @@\n     const expandedText = 'Details'\r\n     const [expanded, setExpanded] = useState(false);\r\n \r\n \r\n- \r\n+\r\n     const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n     const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n \r\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n \r\n \r\n-    const handleRunPipeLineStatusProccess = async (event:any, pipeLineStatus: any) => {\r\n+    const handleRunPipeLineStatusProccess = async (event: any, pipeLineStatus: any) => {\r\n         event.preventDefault();\r\n \r\n         try {\r\n             // Set loading state for the specific button being clicked\r\n@@ -84,10 +84,10 @@\n         //   }\r\n         // return 'red'; // Default color for other states\r\n     };\r\n \r\n-     // Render a loading indicator or null if the data is not yet available\r\n-     if (!pipelineStatusSummery) {\r\n+    // Render a loading indicator or null if the data is not yet available\r\n+    if (!pipelineStatusSummery) {\r\n         return expanded ? <div>Loading...</div> : null;\r\n     }\r\n \r\n     return (\r\n@@ -100,21 +100,24 @@\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n                 </Text>\r\n             </TouchableOpacity>\r\n-            {expanded && pipelineStatusSummery.map((pipelineStatusSummery:any) => (\r\n+            {expanded && pipelineStatusSummery ? (\r\n                 \r\n-                <PipelinesButton key={pipelineStatusSummery.id}\r\n-                    pipelineStatus={pipelineStatusSummery}\r\n-                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n-                    loadingStates={loadingStates}\r\n-                    getButtonColor={getButtonColor}\r\n-                />\r\n-               \r\n+                  pipelineStatusSummery.map((pipelineStatusSummery:any) => (\r\n+                    <PipelinesButton key={pipelineStatusSummery.id}\r\n+                        pipelineStatus={pipelineStatusSummery}\r\n+                        handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n+                        loadingStates={loadingStates}\r\n+                        getButtonColor={getButtonColor}\r\n+                    />\r\n+                    // {isError && <Text color=\"red\">{error}</Text>}\r\n+        \r\n+            ))\r\n \r\n-            ))}\r\n-\r\n-            {isError && <Text color=\"red\">{error}</Text>}\r\n+            ) : expanded ? (\r\n+            <Text>Loading...</Text> // Show loading text only when expanded\r\n+            ) : null}\r\n         </View>\r\n \r\n     );\r\n };\r\n"
                },
                {
                    "date": 1711370341776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const dispatch = useDispatch();\r\n \r\n-    const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n+    //const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n     const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery[eyeProductId]);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1711370525008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,11 @@\n     const toggleExpansion = () => {\r\n         setExpanded(!expanded);\r\n         if (!expanded) {\r\n             // Trigger the API call only when expanding the component\r\n-            dispatch(apiPipeline.endpoints.getPipelineStatusSummery.initiate(eyeProductId));\r\n+            dispatch(apiPipeline.endpoints.getPipelineStatusSummery.initiate(eyeProductId))\r\n+            .unwrap()\r\n+            .catch((err) => setError(err)); \r\n         }\r\n     };\r\n \r\n     // const processedData = useWebSocket('http://localhost:3222');\r\n@@ -42,11 +44,10 @@\n     //get\r\n     const initialText = 'Summery';\r\n     const expandedText = 'Details'\r\n     const [expanded, setExpanded] = useState(false);\r\n+    const [error, setError] = useState(null);\r\n \r\n-\r\n-\r\n     const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n     const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n \r\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n@@ -100,8 +101,10 @@\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n                 </Text>\r\n             </TouchableOpacity>\r\n+            {expanded && error && <Text style={{ color: 'red' }}>{error.message}</Text>}\r\n+\r\n             {expanded && pipelineStatusSummery ? (\r\n                 \r\n                   pipelineStatusSummery.map((pipelineStatusSummery:any) => (\r\n                     <PipelinesButton key={pipelineStatusSummery.id}\r\n"
                },
                {
                    "date": 1711370536273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,12 +72,8 @@\n     };\r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n     const getButtonColor = (pipelineId: number) => {\r\n         //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n         return 'green';  // Green for successful pipeline\r\n         // } else if (loadingStates.includes(pipelineId)) {\r\n@@ -112,9 +108,8 @@\n                         handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n                         loadingStates={loadingStates}\r\n                         getButtonColor={getButtonColor}\r\n                     />\r\n-                    // {isError && <Text color=\"red\">{error}</Text>}\r\n         \r\n             ))\r\n \r\n             ) : expanded ? (\r\n"
                },
                {
                    "date": 1711370645555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,13 +47,11 @@\n     const [expanded, setExpanded] = useState(false);\r\n     const [error, setError] = useState(null);\r\n \r\n     const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n-    const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n-\r\n+    const [loadingStates, setLoadingStates] = useState<number[]>([]); \r\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n \r\n-\r\n     const handleRunPipeLineStatusProccess = async (event: any, pipeLineStatus: any) => {\r\n         event.preventDefault();\r\n \r\n         try {\r\n@@ -81,15 +79,12 @@\n         //   }\r\n         // return 'red'; // Default color for other states\r\n     };\r\n \r\n-    // Render a loading indicator or null if the data is not yet available\r\n-    if (!pipelineStatusSummery) {\r\n-        return expanded ? <div>Loading...</div> : null;\r\n-    }\r\n+ \r\n \r\n     return (\r\n-        <View style={styles.container}>\r\n+        <View style={styles.container}>ali\r\n             <Text style={styles.textStyle}>\r\n                 {expanded ? expandedText : initialText}\r\n             </Text>\r\n \r\n"
                },
                {
                    "date": 1711370737004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n         setExpanded(!expanded);\r\n         if (!expanded) {\r\n             // Trigger the API call only when expanding the component\r\n             dispatch(apiPipeline.endpoints.getPipelineStatusSummery.initiate(eyeProductId))\r\n-            .unwrap()\r\n-            .catch((err) => setError(err)); \r\n+                .unwrap()\r\n+                .catch((err) => setError(err));\r\n         }\r\n     };\r\n \r\n     // const processedData = useWebSocket('http://localhost:3222');\r\n@@ -47,9 +47,9 @@\n     const [expanded, setExpanded] = useState(false);\r\n     const [error, setError] = useState(null);\r\n \r\n     const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n-    const [loadingStates, setLoadingStates] = useState<number[]>([]); \r\n+    const [loadingStates, setLoadingStates] = useState<number[]>([]);\r\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n \r\n     const handleRunPipeLineStatusProccess = async (event: any, pipeLineStatus: any) => {\r\n         event.preventDefault();\r\n@@ -79,12 +79,12 @@\n         //   }\r\n         // return 'red'; // Default color for other states\r\n     };\r\n \r\n- \r\n \r\n+\r\n     return (\r\n-        <View style={styles.container}>ali\r\n+        <View style={styles.container}>\r\n             <Text style={styles.textStyle}>\r\n                 {expanded ? expandedText : initialText}\r\n             </Text>\r\n \r\n@@ -95,21 +95,20 @@\n             </TouchableOpacity>\r\n             {expanded && error && <Text style={{ color: 'red' }}>{error.message}</Text>}\r\n \r\n             {expanded && pipelineStatusSummery ? (\r\n-                \r\n-                  pipelineStatusSummery.map((pipelineStatusSummery:any) => (\r\n+\r\n+                pipelineStatusSummery.map((pipelineStatusSummery: any) => (\r\n                     <PipelinesButton key={pipelineStatusSummery.id}\r\n                         pipelineStatus={pipelineStatusSummery}\r\n                         handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n                         loadingStates={loadingStates}\r\n                         getButtonColor={getButtonColor}\r\n                     />\r\n-        \r\n-            ))\r\n+                ))\r\n \r\n             ) : expanded ? (\r\n-            <Text>Loading...</Text> // Show loading text only when expanded\r\n+                <Text>Loading...</Text> // Show loading text only when expanded\r\n             ) : null}\r\n         </View>\r\n \r\n     );\r\n"
                },
                {
                    "date": 1711372927268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n             {expanded && pipelineStatusSummery ? (\r\n \r\n                 pipelineStatusSummery.map((pipelineStatusSummery: any) => (\r\n                     <PipelinesButton key={pipelineStatusSummery.id}\r\n-                        pipelineStatus={pipelineStatusSummery}\r\n+                    pipelineStatusSummery={pipelineStatusSummery}\r\n                         handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n                         loadingStates={loadingStates}\r\n                         getButtonColor={getButtonColor}\r\n                     />\r\n"
                },
                {
                    "date": 1711375297079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,10 @@\n     };\r\n \r\n \r\n \r\n-    const getButtonColor = (pipelineId: number) => {\r\n-        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n+    const getButtonColor = (pipelineStatusSummeryId: number) => {\r\n+          if (submitProccessIsSuccess && pipelineStatusSummery?.id === pipelineStatusSummeryId) { // Use data?.id for success state\r\n         return 'green';  // Green for successful pipeline\r\n         // } else if (loadingStates.includes(pipelineId)) {\r\n         //     return '#ddd'; // Grey for loading state\r\n         //   }\r\n"
                },
                {
                    "date": 1711376434752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n \r\n \r\n \r\n     const getButtonColor = (pipelineStatusSummeryId: number) => {\r\n+        debugger;\r\n           if (submitProccessIsSuccess && pipelineStatusSummery?.id === pipelineStatusSummeryId) { // Use data?.id for success state\r\n         return 'green';  // Green for successful pipeline\r\n         // } else if (loadingStates.includes(pipelineId)) {\r\n         //     return '#ddd'; // Grey for loading state\r\n"
                },
                {
                    "date": 1711376503009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,13 +73,13 @@\n \r\n     const getButtonColor = (pipelineStatusSummeryId: number) => {\r\n         debugger;\r\n           if (submitProccessIsSuccess && pipelineStatusSummery?.id === pipelineStatusSummeryId) { // Use data?.id for success state\r\n-        return 'green';  // Green for successful pipeline\r\n+        return 'green';}  // Green for successful pipeline\r\n         // } else if (loadingStates.includes(pipelineId)) {\r\n         //     return '#ddd'; // Grey for loading state\r\n         //   }\r\n-        // return 'red'; // Default color for other states\r\n+      return 'red'; // Default color for other states\r\n     };\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1711377006219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,17 +70,29 @@\n     };\r\n \r\n \r\n \r\n-    const getButtonColor = (pipelineStatusSummeryId: number) => {\r\n-        debugger;\r\n-          if (submitProccessIsSuccess && pipelineStatusSummery?.id === pipelineStatusSummeryId) { // Use data?.id for success state\r\n-        return 'green';}  // Green for successful pipeline\r\n-        // } else if (loadingStates.includes(pipelineId)) {\r\n-        //     return '#ddd'; // Grey for loading state\r\n-        //   }\r\n-      return 'red'; // Default color for other states\r\n-    };\r\n+    // const getButtonColor = (pipelineStatusSummery: any) => {\r\n+    //     debugger;\r\n+    //       if (submitProccessIsSuccess && pipelineStatusSummery?.id === pipelineStatusSummeryId) { // Use data?.id for success state\r\n+    //     return 'green';}  // Green for successful pipeline\r\n+    //     // } else if (loadingStates.includes(pipelineId)) {\r\n+    //     //     return '#ddd'; // Grey for loading state\r\n+    //     //   }\r\n+    //   return 'red'; // Default color for other states\r\n+    // };\r\n+    const getButtonColor = (pipelineStatusSummery: any) => {\r\n+        switch (pipelineStatusSummery.lastRunnedStatus) {\r\n+          case 'Active':\r\n+            return 'green';\r\n+          case 'Disabled':\r\n+            return 'gray';\r\n+          case 'Pending':\r\n+            return 'yellow';\r\n+          default:\r\n+            return 'black'; // Default color if status doesn't match\r\n+        }\r\n+      };\r\n \r\n \r\n \r\n     return (\r\n"
                },
                {
                    "date": 1711377015461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n             return 'gray';\r\n           case 'Pending':\r\n             return 'yellow';\r\n           default:\r\n-            return 'black'; // Default color if status doesn't match\r\n+            return 'white'; // Default color if status doesn't match\r\n         }\r\n       };\r\n \r\n \r\n"
                },
                {
                    "date": 1711380102205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n \r\n     const handleRunPipeLineStatusProccess = async (event: any, pipeLineStatus: any) => {\r\n         event.preventDefault();\r\n-\r\n         try {\r\n             // Set loading state for the specific button being clicked\r\n             setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipeLineStatus.pipelineId]);\r\n             await submitProccessApi(pipeLineStatus).unwrap();\r\n"
                }
            ],
            "date": 1711357847573,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\r\nimport { Button, ActivityIndicator } from 'react-native'; // Import the necessary components\r\n\r\nimport { useGetAllQuery, useGetPipelineStatusSummeryQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\nimport { useTheme } from '@rneui/themed';\r\nimport PipelinesButton from './PipelinesButton';\r\nimport PipelinesSummery from './PipelinesSummery';\r\nimport { useSelector } from 'react-redux';\r\nimport useSocket from '../hooks/useCustomSocket';\r\n\r\n//import useWebSocket from '../hooks/useWebSocket';\r\n\r\n\r\n\r\ninterface Props {\r\n    eyeProductId: number;\r\n}\r\n\r\nconst PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n    const { theme } = useTheme();\r\n    const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery(eyeProductId);\r\n    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery);;\r\n\r\n\r\n\r\n    // const processedData = useWebSocket('http://localhost:3222');\r\n    //get\r\n\r\n    // const { data } = useGetAllQuery();\r\n    // const pipelinesDetails = useSelector((state) => state.pipeline.details);\r\n    //get\r\n    const initialText = 'Summery';\r\n    const expandedText = 'Details'\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n\r\n    const toggleExpansion = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n    const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n\r\n    const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n\r\n\r\n    const handleRunPipeLineStatusProccess = async (event:any, pipeLineStatus: any) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            // Set loading state for the specific button being clicked\r\n            setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipeLineStatus.pipelineId]);\r\n            await submitProccessApi(pipeLineStatus).unwrap();\r\n            // refetch();\r\n        } catch (err) {\r\n            console.error('Delete failed', error);\r\n        } finally {\r\n            // Remove loading state for the specific button\r\n            setLoadingStates((prevLoadingStates) =>\r\n                prevLoadingStates.filter((id) => id !== pipeLineStatus.pipelineId)\r\n            );\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const getButtonColor = (pipelineId: number) => {\r\n        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n        return 'green';  // Green for successful pipeline\r\n        // } else if (loadingStates.includes(pipelineId)) {\r\n        //     return '#ddd'; // Grey for loading state\r\n        //   }\r\n        // return 'red'; // Default color for other states\r\n    };\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.textStyle}>\r\n                {expanded ? expandedText : initialText}\r\n            </Text>\r\n\r\n            <TouchableOpacity onPress={toggleExpansion}>\r\n                <Text style={styles.textStyle}>\r\n                    {expanded ? 'Read less' : 'Read more'}\r\n                </Text>\r\n            </TouchableOpacity>\r\n            {expanded && pipelineStatusSummery.map((pipelineStatus) => (\r\n                \r\n                <PipelinesButton key={pipelineStatus.id}\r\n                    pipelineStatus={pipelineStatus}\r\n                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n                    loadingStates={loadingStates}\r\n                    getButtonColor={getButtonColor}\r\n                />\r\n               \r\n\r\n            ))}\r\n\r\n\r\n            {isError && <Text color=\"red\">{error}</Text>}\r\n        </View>\r\n\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 6,\r\n    },\r\n    buttonItem: {\r\n        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n        padding: 2,\r\n        marginBottom: 2,\r\n        borderRadius: 5,\r\n        borderWidth: 1,\r\n        borderColor: '#ddd',\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    textStyle: {\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n    },\r\n    toggleButton: {\r\n        color: \"red\",\r\n\r\n    },\r\n});\r\n\r\nexport default PipelinesStatusSummeryComponent;\r\n\r\n\r\n"
        }
    ]
}