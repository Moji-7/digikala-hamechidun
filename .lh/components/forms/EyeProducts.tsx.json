{
    "sourceFile": "components/forms/EyeProducts.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1708342967462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708343341300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,20 +12,19 @@\n \r\n \r\n \r\n \r\n-// interface Props {\r\n-//     eyeProductParam: EyeProductParams;\r\n-// }\r\n+interface Props {\r\n+    eyeProductParam: EyeProductParams;\r\n+}\r\n \r\n-const EyeProducts: React.FC = () => {\r\n+const EyeProducts: React.FC<Props> = ({eyeProductParam}) => {\r\n     const { theme } = useTheme();\r\n     const queryClient = useQueryClient();\r\n \r\n     const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n \r\n \r\n-    const [page, setPage] = useState(1);\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             const result = await deleteMutation.mutateAsync(productId);\r\n@@ -45,25 +44,25 @@\n         </View>\r\n     );\r\n \r\n \r\n-return (\r\n-    <View style={styles.container}>\r\n-        {data && (\r\n-            <View style={styles.gridContainer}>\r\n-                {data.eyeProducts.map((eyeProduct, index) => (\r\n-                    <View key={index} style={styles.gridRow}>\r\n-                        {renderGridItem(eyeProduct, index)}\r\n-                    </View>\r\n-                ))}\r\n-            </View>\r\n-        )}\r\n-    </View>\r\n-);\r\n+    return (\r\n+        <View style={styles.container}>\r\n+            {data && (\r\n+                <View style={styles.gridContainer}>\r\n+                    {data.eyeProducts.map((eyeProduct, index) => (\r\n+                        <View key={index} style={styles.gridRow}>\r\n+                            {renderGridItem(eyeProduct, index)}\r\n+                        </View>\r\n+                    ))}\r\n+                </View>\r\n+            )}\r\n+        </View>\r\n+    );\r\n \r\n-      }        \r\n-                       \r\n+}\r\n \r\n+\r\n const styles = StyleSheet.create({\r\n     container: {\r\n         flex: 1,\r\n         padding: 6,\r\n"
                },
                {
                    "date": 1708343511707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import { Pagination } from 'react-native-pagination';\r\n import { Alert } from 'react-native';\r\n import AlertComponenti from '../uicomponents/AlertComponent';\r\n import EyeProductAddComponent from './EyeProductAdd';\r\n+import { useSelector } from 'react-redux';\r\n \r\n \r\n \r\n \r\n@@ -22,9 +23,9 @@\n     const queryClient = useQueryClient();\r\n \r\n     const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n \r\n-\r\n+    useSelector((state) => state.eyeProducts)\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             const result = await deleteMutation.mutateAsync(productId);\r\n@@ -46,8 +47,9 @@\n \r\n \r\n     return (\r\n         <View style={styles.container}>\r\n+             {JSON.stringify(useSelector((state) => state.eyeProducts), null, 2)}\r\n             {data && (\r\n                 <View style={styles.gridContainer}>\r\n                     {data.eyeProducts.map((eyeProduct, index) => (\r\n                         <View key={index} style={styles.gridRow}>\r\n"
                },
                {
                    "date": 1708344147391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,15 +17,15 @@\n interface Props {\r\n     eyeProductParam: EyeProductParams;\r\n }\r\n \r\n-const EyeProducts: React.FC<Props> = ({eyeProductParam}) => {\r\n+const EyeProducts: React.FC<Props> = ({ eyeProductParam }) => {\r\n     const { theme } = useTheme();\r\n     const queryClient = useQueryClient();\r\n \r\n     const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n \r\n-    useSelector((state) => state.eyeProducts)\r\n+    const eyeProductsItems = useSelector((state) => state.eyeProducts))\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             const result = await deleteMutation.mutateAsync(productId);\r\n@@ -47,21 +47,49 @@\n \r\n \r\n     return (\r\n         <View style={styles.container}>\r\n-             {JSON.stringify(useSelector((state) => state.eyeProducts), null, 2)}\r\n-            {data && (\r\n-                <View style={styles.gridContainer}>\r\n-                    {data.eyeProducts.map((eyeProduct, index) => (\r\n-                        <View key={index} style={styles.gridRow}>\r\n-                            {renderGridItem(eyeProduct, index)}\r\n-                        </View>\r\n+\r\n+\r\n+            {eyeProductsItems.length > 0 && ( // Render when products exist\r\n+                <>\r\n+                    <Text>ü§ëüêæ Selected Products: ü§ëüêæ  </Text>\r\n+                    {/* <EyeProductAddButton /> */}\r\n+                    {eyeProductsItems.map((eyeProduct, index) => (\r\n+\r\n+                        <ListItem key={eyeProduct.id}>\r\n+                            <ListItem.Content>\r\n+                                <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n+                                <ListItem.Subtitle>{eyeProduct.pipelinesIds} |\r\n+                                    {/* {product.default_variant.price.selling_price} |\r\n+                  {product.default_variant.price.rrp_price} |\r\n+                  {product.default_variant.price.discount_percent}% */}\r\n+                                </ListItem.Subtitle>\r\n+                                <ListItem.Subtitle>\r\n+                                    <Button onPress={() => handleDelete(eyeProduct.id)} title='remove' />\r\n+                                </ListItem.Subtitle>\r\n+                            </ListItem.Content>\r\n+                        </ListItem>\r\n+\r\n                     ))}\r\n-                </View>\r\n+                </>\r\n             )}\r\n+\r\n+\r\n         </View>\r\n-    );\r\n \r\n+        //     {data && (\r\n+        //         <View style={styles.gridContainer}>\r\n+        //             {data.eyeProducts.map((eyeProduct, index) => (\r\n+        //                 <View key={index} style={styles.gridRow}>\r\n+        //                     {renderGridItem(eyeProduct, index)}\r\n+        //                 </View>\r\n+        //             ))}\r\n+        //         </View>\r\n+        //     )}\r\n+        // </View>\r\n+  \r\n+\r\n }\r\n \r\n \r\n const styles = StyleSheet.create({\r\n"
                },
                {
                    "date": 1708344192731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,8 @@\n                         <ListItem key={eyeProduct.id}>\r\n                             <ListItem.Content>\r\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n                                 <ListItem.Subtitle>{eyeProduct.pipelinesIds} |\r\n-                                    {/* {product.default_variant.price.selling_price} |\r\n-                  {product.default_variant.price.rrp_price} |\r\n-                  {product.default_variant.price.discount_percent}% */}\r\n                                 </ListItem.Subtitle>\r\n                                 <ListItem.Subtitle>\r\n                                     <Button onPress={() => handleDelete(eyeProduct.id)} title='remove' />\r\n                                 </ListItem.Subtitle>\r\n@@ -87,9 +84,9 @@\n         //         </View>\r\n         //     )}\r\n         // </View>\r\n   \r\n-\r\n+    )\r\n }\r\n \r\n \r\n const styles = StyleSheet.create({\r\n"
                },
                {
                    "date": 1708344511533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n                                 <ListItem.Subtitle>{eyeProduct.pipelinesIds} |\r\n                                 </ListItem.Subtitle>\r\n                                 <ListItem.Subtitle>\r\n-                                    <Button onPress={() => handleDelete(eyeProduct.id)} title='remove' />\r\n+                                    <Button onPress={(e) => handleDelete(e,eyeProduct.id)} title='remove' />\r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n \r\n"
                },
                {
                    "date": 1708344526999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,30 +49,10 @@\n     return (\r\n         <View style={styles.container}>\r\n \r\n \r\n-            {eyeProductsItems.length > 0 && ( // Render when products exist\r\n-                <>\r\n-                    <Text>ü§ëüêæ Selected Products: ü§ëüêæ  </Text>\r\n-                    {/* <EyeProductAddButton /> */}\r\n-                    {eyeProductsItems.map((eyeProduct, index) => (\r\n+ \r\n \r\n-                        <ListItem key={eyeProduct.id}>\r\n-                            <ListItem.Content>\r\n-                                <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n-                                <ListItem.Subtitle>{eyeProduct.pipelinesIds} |\r\n-                                </ListItem.Subtitle>\r\n-                                <ListItem.Subtitle>\r\n-                                    <Button onPress={(e) => handleDelete(e,eyeProduct.id)} title='remove' />\r\n-                                </ListItem.Subtitle>\r\n-                            </ListItem.Content>\r\n-                        </ListItem>\r\n-\r\n-                    ))}\r\n-                </>\r\n-            )}\r\n-\r\n-\r\n         </View>\r\n \r\n         //     {data && (\r\n         //         <View style={styles.gridContainer}>\r\n"
                },
                {
                    "date": 1708344563133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     const queryClient = useQueryClient();\r\n \r\n     const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n \r\n-    const eyeProductsItems = useSelector((state) => state.eyeProducts))\r\n+    const eyeProductsItems = useSelector((state) => state.eyeProducts)\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             const result = await deleteMutation.mutateAsync(productId);\r\n@@ -49,10 +49,30 @@\n     return (\r\n         <View style={styles.container}>\r\n \r\n \r\n- \r\n+            {eyeProductsItems.length > 0 && ( // Render when products exist\r\n+                <>\r\n+                    <Text>ü§ëüêæ Selected Products: ü§ëüêæ  </Text>\r\n+                    {/* <EyeProductAddButton /> */}\r\n+                    {eyeProductsItems.map((eyeProduct, index) => (\r\n \r\n+                        <ListItem key={eyeProduct.id}>\r\n+                            <ListItem.Content>\r\n+                                <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n+                                <ListItem.Subtitle>{eyeProduct.pipelinesIds} |\r\n+                                </ListItem.Subtitle>\r\n+                                <ListItem.Subtitle>\r\n+                                    <Button onPress={(e) => handleDelete(e,eyeProduct.id)} title='remove' />\r\n+                                </ListItem.Subtitle>\r\n+                            </ListItem.Content>\r\n+                        </ListItem>\r\n+\r\n+                    ))}\r\n+                </>\r\n+            )}\r\n+\r\n+\r\n         </View>\r\n \r\n         //     {data && (\r\n         //         <View style={styles.gridContainer}>\r\n"
                },
                {
                    "date": 1708344622288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,10 @@\n \r\n \r\n     return (\r\n         <View style={styles.container}>\r\n+   {JSON.stringify(useSelector((state) => state.eyeProducts), null, 2)}\r\n \r\n-\r\n             {eyeProductsItems.length > 0 && ( // Render when products exist\r\n                 <>\r\n                     <Text>ü§ëüêæ Selected Products: ü§ëüêæ  </Text>\r\n                     {/* <EyeProductAddButton /> */}\r\n"
                },
                {
                    "date": 1708345269440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             {eyeProductsItems.length > 0 && ( // Render when products exist\r\n                 <>\r\n                     <Text>ü§ëüêæ Selected Products: ü§ëüêæ  </Text>\r\n                     {/* <EyeProductAddButton /> */}\r\n-                    {eyeProductsItems.map((eyeProduct, index) => (\r\n+                    {eyeProductsItems[0].map((eyeProduct, index) => (\r\n \r\n                         <ListItem key={eyeProduct.id}>\r\n                             <ListItem.Content>\r\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n"
                },
                {
                    "date": 1708345304956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     const queryClient = useQueryClient();\r\n \r\n     const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n \r\n-    const eyeProductsItems = useSelector((state) => state.eyeProducts)\r\n+    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts)\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             const result = await deleteMutation.mutateAsync(productId);\r\n"
                },
                {
                    "date": 1708345327134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     const queryClient = useQueryClient();\r\n \r\n     const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n \r\n-    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts)\r\n+    const eyeProductsItems = useSelector((state) => state.eyeProducts)\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             const result = await deleteMutation.mutateAsync(productId);\r\n"
                },
                {
                    "date": 1708345364596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     const queryClient = useQueryClient();\r\n \r\n     const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n \r\n-    const eyeProductsItems = useSelector((state) => state.eyeProducts)\r\n+    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts)\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             const result = await deleteMutation.mutateAsync(productId);\r\n"
                },
                {
                    "date": 1708345376879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             {eyeProductsItems.length > 0 && ( // Render when products exist\r\n                 <>\r\n                     <Text>ü§ëüêæ Selected Products: ü§ëüêæ  </Text>\r\n                     {/* <EyeProductAddButton /> */}\r\n-                    {eyeProductsItems[0].map((eyeProduct, index) => (\r\n+                    {eyeProductsItems.map((eyeProduct, index) => (\r\n \r\n                         <ListItem key={eyeProduct.id}>\r\n                             <ListItem.Content>\r\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n"
                },
                {
                    "date": 1708347461838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { Alert } from 'react-native';\r\n import AlertComponenti from '../uicomponents/AlertComponent';\r\n import EyeProductAddComponent from './EyeProductAdd';\r\n import { useSelector } from 'react-redux';\r\n+import { useDeleteItemMutation } from '../reduxApi/api';\r\n \r\n \r\n \r\n \r\n@@ -21,17 +22,18 @@\n const EyeProducts: React.FC<Props> = ({ eyeProductParam }) => {\r\n     const { theme } = useTheme();\r\n     const queryClient = useQueryClient();\r\n \r\n-    const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n+    const [deleteItem, { isLoading, isError, error }] = useDeleteItemMutation();\r\n \r\n     const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts)\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n-            const result = await deleteMutation.mutateAsync(productId);\r\n-            console.log('Delete successful', result);\r\n-        } catch (error) {\r\n+            await deleteItem(productId);\r\n+            // Handle success (e.g., show a notification)\r\n+        } catch (err) {\r\n+            // Handle error (e.g., show an error message)\r\n             console.error('Delete failed', error);\r\n         }\r\n     };\r\n \r\n"
                },
                {
                    "date": 1708347472208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n     const queryClient = useQueryClient();\r\n \r\n     const [deleteItem, { isLoading, isError, error }] = useDeleteItemMutation();\r\n \r\n-    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts)\r\n+    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts\r\n+    //delete\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             await deleteItem(productId);\r\n"
                },
                {
                    "date": 1708347513162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n     const queryClient = useQueryClient();\r\n \r\n     const [deleteItem, { isLoading, isError, error }] = useDeleteItemMutation();\r\n \r\n-    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts\r\n+    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts)\r\n+    \r\n     //delete\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n@@ -35,8 +36,9 @@\n         } catch (err) {\r\n             // Handle error (e.g., show an error message)\r\n             console.error('Delete failed', error);\r\n         }\r\n+    \r\n     };\r\n \r\n     const renderGridItem = (eyeProduct: EyeProduct, index: number) => (\r\n         <View style={styles.gridItem} key={index}>\r\n"
                },
                {
                    "date": 1708348004408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,19 +39,8 @@\n         }\r\n     \r\n     };\r\n \r\n-    const renderGridItem = (eyeProduct: EyeProduct, index: number) => (\r\n-        <View style={styles.gridItem} key={index}>\r\n-            <Text style={styles.gridItemTitle}>{eyeProduct.productTitle}</Text>\r\n-            <Text style={styles.gridItemInfo}>{eyeProduct.info}</Text>\r\n-            <Button onPress={(e) => handleDelete(e, eyeProduct.productId)} key={eyeProduct.productId} title={'Delete'}\r\n-                color={theme.myColors.danger}\r\n-            />\r\n-        </View>\r\n-    );\r\n-\r\n-\r\n     return (\r\n         <View style={styles.container}>\r\n    {JSON.stringify(useSelector((state) => state.eyeProducts), null, 2)}\r\n \r\n@@ -75,9 +64,8 @@\n                     ))}\r\n                 </>\r\n             )}\r\n \r\n-\r\n         </View>\r\n \r\n         //     {data && (\r\n         //         <View style={styles.gridContainer}>\r\n"
                },
                {
                    "date": 1711268293561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,122 @@\n-import React, { useState } from 'react';\r\n-import { View, Text, StyleSheet, Linking, FlatList } from 'react-native';\r\n+import React, { useEffect, useState } from 'react';\r\n+import { View, Text, StyleSheet, Linking, FlatList, Animated } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n import { useEyeProduct } from '../hooks/useEyeOnProduct';\r\n import { EyeProduct, EyeProductParams } from '../entity/Eye.dto';\r\n-import { useQueryClient } from '@tanstack/react-query';\r\n \r\n import { Pagination } from 'react-native-pagination';\r\n import { Alert } from 'react-native';\r\n import AlertComponenti from '../uicomponents/AlertComponent';\r\n import EyeProductAddComponent from './EyeProductAdd';\r\n-import { useSelector } from 'react-redux';\r\n-import { useDeleteItemMutation } from '../reduxApi/api';\r\n \r\n+import { useDispatch, useSelector } from 'react-redux';\r\n+import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n+import PipelinesComponent from './PipelinesComponent';\r\n+import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\r\n+import useSocket from '../hooks/useCustomSocket';\r\n \r\n \r\n+// import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n \r\n+\r\n+\r\n interface Props {\r\n     eyeProductParam: EyeProductParams;\r\n }\r\n \r\n const EyeProducts: React.FC<Props> = ({ eyeProductParam }) => {\r\n     const { theme } = useTheme();\r\n-    const queryClient = useQueryClient();\r\n \r\n-    const [deleteItem, { isLoading, isError, error }] = useDeleteItemMutation();\r\n \r\n-    const eyeProductsItems = useSelector((state) => state.eyeProducts.eyeProducts)\r\n-    \r\n-    //delete\r\n+    // const { socket,connected, error: socketError } = useSocket();\r\n+    //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n+    const { data, error } = useGetEyeQuery();\r\n+    const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n+    //1- const { data, error,refetch } = useGetEyeQuery();\r\n+    //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n+    //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n+    // });\r\n+\r\n+\r\n+    // Event handler for sending a message\r\n+\r\n+    // Event listener for receiving messages\r\n+    // socket.on('pong', (data) => {\r\n+    //     console.log('Received:', data);\r\n+    // });\r\n+    const [deleteItem, { isLoading, isError }] = useDeleteItemMutation();\r\n+\r\n     const handleDelete = async (event, productId: number) => {\r\n         event.preventDefault()\r\n         try {\r\n             await deleteItem(productId);\r\n-            // Handle success (e.g., show a notification)\r\n+            //refetch()\r\n+            //const handleSendMessage = (message) => {\r\n+            //sendMessage('results.processed', 'message'); \r\n+\r\n+            // socket.emit('ping', 'Hello from React!');\r\n+            // Replace 'event-name' with your event\r\n+            // };\r\n         } catch (err) {\r\n-            // Handle error (e.g., show an error message)\r\n             console.error('Delete failed', error);\r\n         }\r\n-    \r\n+\r\n     };\r\n \r\n+\r\n+    const socket = useSocket('http://localhost:3222');\r\n+    useEffect(() => {\r\n+        if (socket) {\r\n+\r\n+            socket.on('notify_clinet_for_processed', (data) => {\r\n+                console.log('notify_clinet_for_processed:', data);\r\n+                // Handle the updated data as needed\r\n+            });\r\n+\r\n+            socket.on('pong', (data) => {\r\n+                console.log('Pong received:', data);\r\n+            });\r\n+\r\n+        }\r\n+    }, [socket]);\r\n+\r\n+\r\n+    // const pingPong = () => {\r\n+    //     socket.emit('ping', 'Hello world!');\r\n+    // }\r\n+\r\n     return (\r\n-        <View style={styles.container}>\r\n-   {JSON.stringify(useSelector((state) => state.eyeProducts), null, 2)}\r\n \r\n-            {eyeProductsItems.length > 0 && ( // Render when products exist\r\n-                <>\r\n-                    <Text>ü§ëüêæ Selected Products: ü§ëüêæ  </Text>\r\n+\r\n+        <Card style={styles.container}>\r\n+\r\n+            {eyeProducts && ( // Render when products exist\r\n+                <View style={styles.gridContainer}>\r\n+                    <Text>ü§ëüêæ My Eys: ü§ëüêæ</Text>\r\n+\r\n+                        {/* errro: {lastMessage} */}\r\n+                    {/* </Text>\r\n+                    <Button onPress={(e) => pingPong(e)} title={`Run Pid`} /> */}\r\n                     {/* <EyeProductAddButton /> */}\r\n-                    {eyeProductsItems.map((eyeProduct, index) => (\r\n+                    {eyeProducts.map((eyeProduct, index) => (\r\n \r\n-                        <ListItem key={eyeProduct.id}>\r\n+                        <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n                             <ListItem.Content>\r\n-                                <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n-                                <ListItem.Subtitle>{eyeProduct.pipelinesIds} |\r\n+                                {/* <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title> */}\r\n+                                <ListItem.Subtitle style={styles.gridItem}>\r\n+                                    <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n+                                    <Divider style={{ width: '100%' }} />\r\n+                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n+                                    <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} />\r\n                                 </ListItem.Subtitle>\r\n-                                <ListItem.Subtitle>\r\n-                                    <Button onPress={(e) => handleDelete(e,eyeProduct.id)} title='remove' />\r\n-                                </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n-\r\n                     ))}\r\n-                </>\r\n+                </View>\r\n             )}\r\n+        </Card>\r\n \r\n-        </View>\r\n-\r\n-        //     {data && (\r\n-        //         <View style={styles.gridContainer}>\r\n-        //             {data.eyeProducts.map((eyeProduct, index) => (\r\n-        //                 <View key={index} style={styles.gridRow}>\r\n-        //                     {renderGridItem(eyeProduct, index)}\r\n-        //                 </View>\r\n-        //             ))}\r\n-        //         </View>\r\n-        //     )}\r\n-        // </View>\r\n-  \r\n     )\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1711270405289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n                     {eyeProducts.map((eyeProduct, index) => (\r\n \r\n                         <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n                             <ListItem.Content>\r\n-                                {/* <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title> */}\r\n+                                <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n"
                },
                {
                    "date": 1711270913188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,18 +92,14 @@\n \r\n             {eyeProducts && ( // Render when products exist\r\n                 <View style={styles.gridContainer}>\r\n                     <Text>ü§ëüêæ My Eys: ü§ëüêæ</Text>\r\n-\r\n-                        {/* errro: {lastMessage} */}\r\n-                    {/* </Text>\r\n-                    <Button onPress={(e) => pingPong(e)} title={`Run Pid`} /> */}\r\n-                    {/* <EyeProductAddButton /> */}\r\n                     {eyeProducts.map((eyeProduct, index) => (\r\n-\r\n                         <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n                             <ListItem.Content>\r\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n+                                <ListItem.Title>{eyeProduct.created_at}</ListItem.Title>\r\n+\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n"
                },
                {
                    "date": 1711271022238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n import PipelinesComponent from './PipelinesComponent';\r\n import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\r\n import useSocket from '../hooks/useCustomSocket';\r\n+import { convertDateToShamsi } from '../../utils/dateUtils';\r\n \r\n \r\n // import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n \r\n@@ -85,21 +86,17 @@\n     //     socket.emit('ping', 'Hello world!');\r\n     // }\r\n \r\n     return (\r\n-\r\n-\r\n         <Card style={styles.container}>\r\n-\r\n             {eyeProducts && ( // Render when products exist\r\n                 <View style={styles.gridContainer}>\r\n                     <Text>ü§ëüêæ My Eys: ü§ëüêæ</Text>\r\n                     {eyeProducts.map((eyeProduct, index) => (\r\n                         <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n                             <ListItem.Content>\r\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n-                                <ListItem.Title>{eyeProduct.created_at}</ListItem.Title>\r\n-\r\n+                                <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n"
                },
                {
                    "date": 1711271374302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n import { useEyeProduct } from '../hooks/useEyeOnProduct';\r\n import { EyeProduct, EyeProductParams } from '../entity/Eye.dto';\r\n \r\n-import { Pagination } from 'react-native-pagination';\r\n+\r\n import { Alert } from 'react-native';\r\n import AlertComponenti from '../uicomponents/AlertComponent';\r\n import EyeProductAddComponent from './EyeProductAdd';\r\n \r\n"
                },
                {
                    "date": 1711271597879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,10 @@\n     // const { socket,connected, error: socketError } = useSocket();\r\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n     const { data, error } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n+const { data, error } = getPipelineStatusLast();\r\n+    const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n     // });\r\n"
                },
                {
                    "date": 1711271686311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,18 @@\n import AlertComponenti from '../uicomponents/AlertComponent';\r\n import EyeProductAddComponent from './EyeProductAdd';\r\n \r\n import { useDispatch, useSelector } from 'react-redux';\r\n-import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n+\r\n import PipelinesComponent from './PipelinesComponent';\r\n import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\r\n import useSocket from '../hooks/useCustomSocket';\r\n import { convertDateToShamsi } from '../../utils/dateUtils';\r\n \r\n+import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n+import { useGetPipelineStatusLastQuery } from '../reduxApi/pipelineApi';\r\n \r\n+\r\n // import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n \r\n \r\n \r\n@@ -32,9 +35,9 @@\n     // const { socket,connected, error: socketError } = useSocket();\r\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n     const { data, error } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n-const { data, error } = getPipelineStatusLast();\r\n+const { data2:data, error } = useGetPipelineStatusLastQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n"
                },
                {
                    "date": 1711271788319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n     const { data, error } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n const { data2:data, error } = useGetPipelineStatusLastQuery();\r\n-    const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n+    const pipelineStatusLasts = useSelector((state) => state.pipeline.pipelineStatusLasts);\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n     // });\r\n"
                },
                {
                    "date": 1711272010968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,12 +33,13 @@\n \r\n \r\n     // const { socket,connected, error: socketError } = useSocket();\r\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n-    const { data, error } = useGetEyeQuery();\r\n+    const { data: data1, error: error1 } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n-const { data2:data, error } = useGetPipelineStatusLastQuery();\r\n-    const pipelineStatusLasts = useSelector((state) => state.pipeline.pipelineStatusLasts);\r\n+    \r\n+    const { data: data2, error: error2 } = useGetPipelineStatusLastQuery();\r\n+    const pipelineStatusLasts = useSelector((state) => state.pipeline.pipelineStatusLasts);;\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n     // });\r\n@@ -104,9 +105,9 @@\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n-                                    <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} />\r\n+                                    {/* <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} /> */}\r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711272076793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,9 @@\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n                                     {/* <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} /> */}\r\n+                                    \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711272089802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n     const { data: data1, error: error1 } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n     \r\n-    const { data: data2, error: error2 } = useGetPipelineStatusLastQuery();\r\n+    const { data: data2, error: error2 } = useGetPipelineStatusLastQueryuseGetPipelineStatusLastQuery();\r\n     const pipelineStatusLasts = useSelector((state) => state.pipeline.pipelineStatusLasts);;\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n@@ -106,9 +106,9 @@\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n                                     {/* <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} /> */}\r\n-                                    \r\n+\r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711272157592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n     const { data: data1, error: error1 } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n     \r\n-    const { data: data2, error: error2 } = useGetPipelineStatusLastQueryuseGetPipelineStatusLastQuery();\r\n+    const { data: data2, error: error2 } = useGetPipelineStatusLastQuery();\r\n     const pipelineStatusLasts = useSelector((state) => state.pipeline.pipelineStatusLasts);;\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n@@ -106,9 +106,9 @@\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n                                     {/* <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} /> */}\r\n-\r\n+                                    \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711272205728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,31 +92,9 @@\n     //     socket.emit('ping', 'Hello world!');\r\n     // }\r\n \r\n     return (\r\n-        <Card style={styles.container}>\r\n-            {eyeProducts && ( // Render when products exist\r\n-                <View style={styles.gridContainer}>\r\n-                    <Text>ü§ëüêæ My Eys: ü§ëüêæ</Text>\r\n-                    {eyeProducts.map((eyeProduct, index) => (\r\n-                        <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n-                            <ListItem.Content>\r\n-                                <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n-                                <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n-                                <ListItem.Subtitle style={styles.gridItem}>\r\n-                                    <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n-                                    <Divider style={{ width: '100%' }} />\r\n-                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n-                                    {/* <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} /> */}\r\n-                                    \r\n-                                </ListItem.Subtitle>\r\n-                            </ListItem.Content>\r\n-                        </ListItem>\r\n-                    ))}\r\n-                </View>\r\n-            )}\r\n-        </Card>\r\n-\r\n+        <></>\r\n     )\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1711272225129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,31 @@\n     //     socket.emit('ping', 'Hello world!');\r\n     // }\r\n \r\n     return (\r\n-        <></>\r\n+        <Card style={styles.container}>\r\n+            {eyeProducts && ( // Render when products exist\r\n+                <View style={styles.gridContainer}>\r\n+                    <Text>ü§ëüêæ My Eys: ü§ëüêæ</Text>\r\n+                    {eyeProducts.map((eyeProduct, index) => (\r\n+                        <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n+                            <ListItem.Content>\r\n+                                <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n+                                <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n+                                <ListItem.Subtitle style={styles.gridItem}>\r\n+                                    <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n+                                    <Divider style={{ width: '100%' }} />\r\n+                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n+                                    {/* <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} /> */}\r\n+                                    \r\n+                                </ListItem.Subtitle>\r\n+                            </ListItem.Content>\r\n+                        </ListItem>\r\n+                    ))}\r\n+                </View>\r\n+            )}\r\n+        </Card>\r\n+\r\n     )\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1711274842372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n-                                    {/* <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} /> */}\r\n+                                    <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} />\r\n                                     \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n"
                },
                {
                    "date": 1711274875435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,10 @@\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n-                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n-                                    <PipelinesComponent integers={'1,2,3'.split(\",\").map(Number)} />\r\n+                                    <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n+                                    <PipelinesStatusComponent integers={'1,2,3'.split(\",\").map(Number)} />\r\n                                     \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n"
                },
                {
                    "date": 1711274900245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,17 @@\n import EyeProductAddComponent from './EyeProductAdd';\r\n \r\n import { useDispatch, useSelector } from 'react-redux';\r\n \r\n-import PipelinesComponent from './PipelinesComponent';\r\n+\r\n import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\r\n import useSocket from '../hooks/useCustomSocket';\r\n import { convertDateToShamsi } from '../../utils/dateUtils';\r\n \r\n import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n import { useGetPipelineStatusLastQuery } from '../reduxApi/pipelineApi';\r\n \r\n+import PipelinesStatusComponent from './PipelinesComponent';\r\n \r\n // import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n \r\n \r\n@@ -104,9 +105,9 @@\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n-                                    <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */}\r\n+                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */} */}\r\n                                     <PipelinesStatusComponent integers={'1,2,3'.split(\",\").map(Number)} />\r\n                                     \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n"
                },
                {
                    "date": 1711275116808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */} */}\r\n-                                    <PipelinesStatusComponent integers={'1,2,3'.split(\",\").map(Number)} />\r\n+                                    <PipelinesStatusComponent pipelineStatusLasts={pipelineStatusLasts}  />\r\n                                     \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n"
                },
                {
                    "date": 1711275996425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n import { useGetPipelineStatusLastQuery } from '../reduxApi/pipelineApi';\r\n \r\n-import PipelinesStatusComponent from './PipelinesComponent';\r\n+import PipelinesStatusComponent from './PipelinesStatusComponent';\r\n \r\n // import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n \r\n \r\n@@ -106,10 +106,9 @@\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */} */}\r\n-                                    <PipelinesStatusComponent pipelineStatusLasts={pipelineStatusLasts}  />\r\n-                                    \r\n+                                    <PipelinesStatusComponent pipelineStatusLasts={pipelineStatusLasts}  />        \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711278268943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     const socket = useSocket('http://localhost:3222');\r\n     useEffect(() => {\r\n         if (socket) {\r\n \r\n-            socket.on('notify_clinet_for_processed', (data) => {\r\n+            socket.on('update', (data) => {\r\n                 console.log('notify_clinet_for_processed:', data);\r\n                 // Handle the updated data as needed\r\n             });\r\n \r\n"
                },
                {
                    "date": 1711278373758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     const socket = useSocket('http://localhost:3222');\r\n     useEffect(() => {\r\n         if (socket) {\r\n \r\n-            socket.on('update', (data) => {\r\n+            socket.on('alo_proccess_pipelineStatus', (data) => {\r\n                 console.log('notify_clinet_for_processed:', data);\r\n                 // Handle the updated data as needed\r\n             });\r\n \r\n"
                },
                {
                    "date": 1711278977790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     const socket = useSocket('http://localhost:3222');\r\n     useEffect(() => {\r\n         if (socket) {\r\n \r\n-            socket.on('alo_proccess_pipelineStatus', (data) => {\r\n+            socket.on('published_from_SocketToClient_pipelineStatu', (data) => {\r\n                 console.log('notify_clinet_for_processed:', data);\r\n                 // Handle the updated data as needed\r\n             });\r\n \r\n"
                },
                {
                    "date": 1711281463100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,23 +71,23 @@\n \r\n     };\r\n \r\n \r\n-    const socket = useSocket('http://localhost:3222');\r\n-    useEffect(() => {\r\n-        if (socket) {\r\n+    // const socket = useSocket('http://localhost:3222');\r\n+    // useEffect(() => {\r\n+    //     if (socket) {\r\n \r\n-            socket.on('published_from_SocketToClient_pipelineStatu', (data) => {\r\n-                console.log('notify_clinet_for_processed:', data);\r\n-                // Handle the updated data as needed\r\n-            });\r\n+    //         socket.on('published_from_SocketToClient_pipelineStatus', (data) => {\r\n+    //             console.log('notify_clinet_for_processed:', data);\r\n+    //             // Handle the updated data as needed\r\n+    //         });\r\n \r\n-            socket.on('pong', (data) => {\r\n-                console.log('Pong received:', data);\r\n-            });\r\n+    //         socket.on('pong', (data) => {\r\n+    //             console.log('Pong received:', data);\r\n+    //         });\r\n \r\n-        }\r\n-    }, [socket]);\r\n+    //     }\r\n+    // }, [socket]);\r\n \r\n \r\n     // const pingPong = () => {\r\n     //     socket.emit('ping', 'Hello world!');\r\n"
                },
                {
                    "date": 1711356123608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n-                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */} */}\r\n+                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */} \r\n                                     <PipelinesStatusComponent pipelineStatusLasts={pipelineStatusLasts}  />        \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n"
                },
                {
                    "date": 1711357341249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n import useSocket from '../hooks/useCustomSocket';\r\n import { convertDateToShamsi } from '../../utils/dateUtils';\r\n \r\n import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n-import { useGetPipelineStatusLastQuery } from '../reduxApi/pipelineApi';\r\n+import { useGetPipelineStatusSummeryQuery } from '../reduxApi/pipelineApi';\r\n \r\n import PipelinesStatusComponent from './PipelinesStatusComponent';\r\n \r\n // import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n@@ -37,10 +37,10 @@\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n     const { data: data1, error: error1 } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n     \r\n-    const { data: data2, error: error2 } = useGetPipelineStatusLastQuery();\r\n-    const pipelineStatusLasts = useSelector((state) => state.pipeline.pipelineStatusLasts);;\r\n+    const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery();\r\n+    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery);;\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n     // });\r\n@@ -105,10 +105,9 @@\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n-                                    {/* <PipelinesComponent integers={eyeProduct.pipelinesIds.split(\",\").map(Number)} /> */} \r\n-                                    <PipelinesStatusComponent pipelineStatusLasts={pipelineStatusLasts}  />        \r\n+                                    <PipelinesStatusComponent pipelineStatusSummery={pipelineStatusSummery}  />        \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711357612485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n-                                    <PipelinesStatusComponent pipelineStatusSummery={pipelineStatusSummery}  />        \r\n+                                    <PipelinesStatusComponent eyeProductId={eyeProduct.id}  />        \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711357636279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,9 @@\n     //const { lastMessage, sendMessage } = useSocketEvent(socket, 'message');\r\n     const { data: data1, error: error1 } = useGetEyeQuery();\r\n     const eyeProducts = useSelector((state) => state.eye.eyeProducts);\r\n     \r\n-    const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery();\r\n-    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery);;\r\n+\r\n     //1- const { data, error,refetch } = useGetEyeQuery();\r\n     //2- const {  eyeProducts } = useGetEyeQuery(undefined, {\r\n     //     selectFromResult: ({ data }) => ({ eyeProducts: data })\r\n     // });\r\n"
                },
                {
                    "date": 1711357668702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n import useSocket from '../hooks/useCustomSocket';\r\n import { convertDateToShamsi } from '../../utils/dateUtils';\r\n \r\n import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n-import { useGetPipelineStatusSummeryQuery } from '../reduxApi/pipelineApi';\r\n \r\n+\r\n import PipelinesStatusComponent from './PipelinesStatusComponent';\r\n \r\n // import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n \r\n"
                },
                {
                    "date": 1711357788820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n import { useGetEyeQuery, useDeleteItemMutation } from '../reduxApi/api';\r\n \r\n \r\n-import PipelinesStatusComponent from './PipelinesStatusComponent';\r\n+import PipelinesStatusSummeryComponent from './PipelinesStatusSummeryComponent';\r\n \r\n // import { useSocket, useSocketEvent } from 'socket.io-react-hook';\r\n \r\n \r\n@@ -104,9 +104,9 @@\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n-                                    <PipelinesStatusComponent eyeProductId={eyeProduct.id}  />        \r\n+                                    <PipelinesStatusSummeryComponent eyeProductId={eyeProduct.id}  />        \r\n                                 </ListItem.Subtitle>\r\n                             </ListItem.Content>\r\n                         </ListItem>\r\n                     ))}\r\n"
                },
                {
                    "date": 1711358418888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n                         <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n                             <ListItem.Content>\r\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n+                                <ListItem.Title>{eyeProduct.id}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     <PipelinesStatusSummeryComponent eyeProductId={eyeProduct.id}  />        \r\n"
                },
                {
                    "date": 1711358732398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,8 @@\n                         <ListItem key={eyeProduct.id} style={styles.gridRow}>\r\n                             <ListItem.Content>\r\n                                 <ListItem.Title>{eyeProduct.titleFa}</ListItem.Title>\r\n                                 <ListItem.Title>{convertDateToShamsi(eyeProduct.created_at)}</ListItem.Title>\r\n-                                <ListItem.Title>{eyeProduct.id}</ListItem.Title>\r\n                                 <ListItem.Subtitle style={styles.gridItem}>\r\n                                     <Button onPress={(e) => handleDelete(e, eyeProduct.id)} title='remove' color={theme.myColors.danger} />\r\n                                     <Divider style={{ width: '100%' }} />\r\n                                     <PipelinesStatusSummeryComponent eyeProductId={eyeProduct.id}  />        \r\n"
                }
            ],
            "date": 1708342967462,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, Linking, FlatList } from 'react-native';\r\nimport { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\nimport { useEyeProduct } from '../hooks/useEyeOnProduct';\r\nimport { EyeProduct, EyeProductParams } from '../entity/Eye.dto';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\nimport { Pagination } from 'react-native-pagination';\r\nimport { Alert } from 'react-native';\r\nimport AlertComponenti from '../uicomponents/AlertComponent';\r\nimport EyeProductAddComponent from './EyeProductAdd';\r\n\r\n\r\n\r\n\r\n// interface Props {\r\n//     eyeProductParam: EyeProductParams;\r\n// }\r\n\r\nconst EyeProducts: React.FC = () => {\r\n    const { theme } = useTheme();\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data, error, isLoading, isError, deleteMutation, addMutation } = useEyeProduct(eyeProductParam, queryClient);\r\n\r\n\r\n    const [page, setPage] = useState(1);\r\n    const handleDelete = async (event, productId: number) => {\r\n        event.preventDefault()\r\n        try {\r\n            const result = await deleteMutation.mutateAsync(productId);\r\n            console.log('Delete successful', result);\r\n        } catch (error) {\r\n            console.error('Delete failed', error);\r\n        }\r\n    };\r\n\r\n    const renderGridItem = (eyeProduct: EyeProduct, index: number) => (\r\n        <View style={styles.gridItem} key={index}>\r\n            <Text style={styles.gridItemTitle}>{eyeProduct.productTitle}</Text>\r\n            <Text style={styles.gridItemInfo}>{eyeProduct.info}</Text>\r\n            <Button onPress={(e) => handleDelete(e, eyeProduct.productId)} key={eyeProduct.productId} title={'Delete'}\r\n                color={theme.myColors.danger}\r\n            />\r\n        </View>\r\n    );\r\n\r\n\r\nreturn (\r\n    <View style={styles.container}>\r\n        {data && (\r\n            <View style={styles.gridContainer}>\r\n                {data.eyeProducts.map((eyeProduct, index) => (\r\n                    <View key={index} style={styles.gridRow}>\r\n                        {renderGridItem(eyeProduct, index)}\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        )}\r\n    </View>\r\n);\r\n\r\n      }        \r\n                       \r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 6,\r\n    },\r\n    gridContainer: {\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n    },\r\n    gridRow: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        marginBottom: 6,\r\n    },\r\n    gridItem: {\r\n        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n        padding: 8,\r\n        marginRight: 2,\r\n        borderRadius: 5,\r\n        borderWidth: 1,\r\n        borderColor: '#ddd',\r\n    },\r\n    gridItemTitle: {\r\n        fontWeight: 'bold',\r\n        fontSize: 18,\r\n        marginBottom: 4,\r\n    },\r\n    gridItemInfo: {\r\n        fontSize: 16,\r\n        marginBottom: 8,\r\n    },\r\n    gridItemCreatedAt: {\r\n        fontSize: 14,\r\n        color: '#888',\r\n    },\r\n    loading: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n});\r\n\r\nexport default EyeProducts;"
        }
    ]
}