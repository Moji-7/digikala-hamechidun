{
    "sourceFile": "components/forms/PipelinesStatusComponent.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1711276012020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711276136983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,21 +98,23 @@\n                 <TouchableOpacity onPress={toggleExpansion}>\r\n                     <Text style={styles.toggleButton}>Read more</Text>\r\n                 </TouchableOpacity>\r\n             )}\r\n+              <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n              <Text style={styles.textStyle}>\r\n                         {expanded ? 'Read less' : 'Read more'}     \r\n                     </Text>\r\n+                        </TouchableOpacity>\r\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n-                <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n-                    ({pipelineStatus.lastRunnedStatus})\r\n+              \r\n+                \r\n                     <PipelinesButton\r\n                         pipelineStatus={pipelineStatus}\r\n                         handleCallPipeLine={handleCallPipeLine}\r\n                         loadingStates={loadingStates}\r\n                         getButtonColor={getButtonColor}\r\n                     />\r\n-                </TouchableOpacity>\r\n+            \r\n             ))}\r\n \r\n \r\n             {isError && <Text color=\"red\">{error}</Text>}\r\n"
                },
                {
                    "date": 1711276162008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,23 +98,24 @@\n                 <TouchableOpacity onPress={toggleExpansion}>\r\n                     <Text style={styles.toggleButton}>Read more</Text>\r\n                 </TouchableOpacity>\r\n             )}\r\n-              <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n-             <Text style={styles.textStyle}>\r\n-                        {expanded ? 'Read less' : 'Read more'}     \r\n-                    </Text>\r\n-                        </TouchableOpacity>\r\n+            <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n+                <Text style={styles.textStyle}>\r\n+                    {expanded ? 'Read less' : 'Read more'}\r\n+                </Text>\r\n+            </TouchableOpacity>\r\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n-              \r\n-                \r\n-                    <PipelinesButton\r\n-                        pipelineStatus={pipelineStatus}\r\n-                        handleCallPipeLine={handleCallPipeLine}\r\n-                        loadingStates={loadingStates}\r\n-                        getButtonColor={getButtonColor}\r\n-                    />\r\n-            \r\n+                <>\r\n+                    ({pipelineStatus.lastRunnedStatus})\r\n+                <PipelinesButton\r\n+                    pipelineStatus={pipelineStatus}\r\n+                    handleCallPipeLine={handleCallPipeLine}\r\n+                    loadingStates={loadingStates}\r\n+                    getButtonColor={getButtonColor}\r\n+                />\r\n+                </>\r\n+\r\n             ))}\r\n \r\n \r\n             {isError && <Text color=\"red\">{error}</Text>}\r\n"
                },
                {
                    "date": 1711276210343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,13 +94,13 @@\n                 )} */}\r\n             </Text>\r\n             {/* {pipelinesDetails.length > 0 && <PipelinesSummery data={pipelinesDetails} />} */}\r\n             {!expanded && (\r\n-                <TouchableOpacity onPress={toggleExpansion}>\r\n-                    <Text style={styles.toggleButton}>Read more</Text>\r\n-                </TouchableOpacity>\r\n+                // <TouchableOpacity onPress={toggleExpansion}>\r\n+                //     <Text style={styles.toggleButton}>Read more</Text>\r\n+                // </TouchableOpacity>\r\n             )}\r\n-            <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n+            <TouchableOpacity onPress={toggleExpansion}>\r\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n                 </Text>\r\n             </TouchableOpacity>\r\n"
                },
                {
                    "date": 1711276252723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,13 @@\n                     <div>Waiting for data...</div>\r\n                 )} */}\r\n             </Text>\r\n             {/* {pipelinesDetails.length > 0 && <PipelinesSummery data={pipelinesDetails} />} */}\r\n-            {!expanded && (\r\n-                // <TouchableOpacity onPress={toggleExpansion}>\r\n-                //     <Text style={styles.toggleButton}>Read more</Text>\r\n-                // </TouchableOpacity>\r\n-            )}\r\n+            {/* {!expanded && (\r\n+                <TouchableOpacity onPress={toggleExpansion}>\r\n+                    <Text style={styles.toggleButton}>Read more</Text>\r\n+                </TouchableOpacity>\r\n+            )} */}\r\n             <TouchableOpacity onPress={toggleExpansion}>\r\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n                 </Text>\r\n"
                },
                {
                    "date": 1711276284091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,20 +86,10 @@\n     return (\r\n         <View style={styles.container}>\r\n             <Text style={styles.textStyle}>\r\n                 {expanded ? expandedText : initialText}\r\n-                {/* {processedData ? (\r\n-                    <div>Processed Data: {JSON.stringify(processedData)}</div>\r\n-                ) : (\r\n-                    <div>Waiting for data...</div>\r\n-                )} */}\r\n             </Text>\r\n-            {/* {pipelinesDetails.length > 0 && <PipelinesSummery data={pipelinesDetails} />} */}\r\n-            {/* {!expanded && (\r\n-                <TouchableOpacity onPress={toggleExpansion}>\r\n-                    <Text style={styles.toggleButton}>Read more</Text>\r\n-                </TouchableOpacity>\r\n-            )} */}\r\n+\r\n             <TouchableOpacity onPress={toggleExpansion}>\r\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n                 </Text>\r\n"
                },
                {
                    "date": 1711276640315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,8 @@\n                 </Text>\r\n             </TouchableOpacity>\r\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <>\r\n-                    ({pipelineStatus.lastRunnedStatus})\r\n                 <PipelinesButton\r\n                     pipelineStatus={pipelineStatus}\r\n                     handleCallPipeLine={handleCallPipeLine}\r\n                     loadingStates={loadingStates}\r\n"
                },
                {
                    "date": 1711277102211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n \r\n \r\n-    const handleCallPipeLine = async (event, pipelineId: number) => {\r\n+    const handleRunPipeLineStatus = async (event:any, pipeLineStatus: any) => {\r\n         event.preventDefault();\r\n \r\n         try {\r\n             // Set loading state for the specific button being clicked\r\n@@ -97,9 +97,9 @@\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <>\r\n                 <PipelinesButton\r\n                     pipelineStatus={pipelineStatus}\r\n-                    handleCallPipeLine={handleCallPipeLine}\r\n+                    handleRunPipeLineStatus={() => handleRunPipeLineStatus({ e, pipelineStatus })}\r\n                     loadingStates={loadingStates}\r\n                     getButtonColor={getButtonColor}\r\n                 />\r\n                 </>\r\n"
                },
                {
                    "date": 1711277132235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <>\r\n                 <PipelinesButton\r\n                     pipelineStatus={pipelineStatus}\r\n-                    handleRunPipeLineStatus={() => handleRunPipeLineStatus({ e, pipelineStatus })}\r\n+                    handleRunPipeLineStatus={() => handleRunPipeLineStatus(e, pipelineStatus)}\r\n                     loadingStates={loadingStates}\r\n                     getButtonColor={getButtonColor}\r\n                 />\r\n                 </>\r\n"
                },
                {
                    "date": 1711277151114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <>\r\n                 <PipelinesButton\r\n                     pipelineStatus={pipelineStatus}\r\n-                    handleRunPipeLineStatus={() => handleRunPipeLineStatus(e, pipelineStatus)}\r\n+                    handleRunPipeLineStatus={(e) => handleRunPipeLineStatus(e, pipelineStatus)}\r\n                     loadingStates={loadingStates}\r\n                     getButtonColor={getButtonColor}\r\n                 />\r\n                 </>\r\n"
                },
                {
                    "date": 1711277179464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,15 +49,10 @@\n         try {\r\n             // Set loading state for the specific button being clicked\r\n             setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipelineId]);\r\n \r\n-            let pipelineStatusDto = {\r\n-                \"id\": 1,\r\n-                \"eyeProductId\": 123847,\r\n-                \"pipelineId\": 456\r\n-            }\r\n \r\n-            await submitProccessApi(pipelineStatusDto).unwrap();\r\n+            await submitProccessApi(pipeLineStatus).unwrap();\r\n \r\n             // refetch();\r\n         } catch (err) {\r\n             console.error('Delete failed', error);\r\n"
                },
                {
                    "date": 1711277236587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n     const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n \r\n \r\n-    const handleRunPipeLineStatus = async (event:any, pipeLineStatus: any) => {\r\n+    const handleRunPipeLineStatusProccess = async (event:any, pipeLineStatus: any) => {\r\n         event.preventDefault();\r\n \r\n         try {\r\n             // Set loading state for the specific button being clicked\r\n"
                },
                {
                    "date": 1711277242279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <>\r\n                 <PipelinesButton\r\n                     pipelineStatus={pipelineStatus}\r\n-                    handleRunPipeLineStatus={(e) => handleRunPipeLineStatus(e, pipelineStatus)}\r\n+                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n                     loadingStates={loadingStates}\r\n                     getButtonColor={getButtonColor}\r\n                 />\r\n                 </>\r\n"
                },
                {
                    "date": 1711277529988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         event.preventDefault();\r\n \r\n         try {\r\n             // Set loading state for the specific button being clicked\r\n-            setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipelineId]);\r\n+            setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipeLineStatus.pipelineId]);\r\n \r\n \r\n             await submitProccessApi(pipeLineStatus).unwrap();\r\n \r\n"
                },
                {
                    "date": 1711277539103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,12 +48,9 @@\n \r\n         try {\r\n             // Set loading state for the specific button being clicked\r\n             setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipeLineStatus.pipelineId]);\r\n-\r\n-\r\n             await submitProccessApi(pipeLineStatus).unwrap();\r\n-\r\n             // refetch();\r\n         } catch (err) {\r\n             console.error('Delete failed', error);\r\n         } finally {\r\n"
                },
                {
                    "date": 1711277587762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             console.error('Delete failed', error);\r\n         } finally {\r\n             // Remove loading state for the specific button\r\n             setLoadingStates((prevLoadingStates) =>\r\n-                prevLoadingStates.filter((id) => id !== pipelineId)\r\n+                prevLoadingStates.filter((id) => id !== pipeLineStatus.pipelineId)\r\n             );\r\n         }\r\n     };\r\n \r\n"
                },
                {
                    "date": 1711280436325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import React, { useEffect, useState } from 'react';\r\n+import { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\r\n+import { Button, ActivityIndicator } from 'react-native'; // Import the necessary components\r\n+\r\n+import { useGetAllQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\n+import { useTheme } from '@rneui/themed';\r\n+import PipelinesButton from './PipelinesButton';\r\n+import PipelinesSummery from './PipelinesSummery';\r\n+import { useSelector } from 'react-redux';\r\n+import useSocket from '../hooks/useCustomSocket';\r\n+\r\n+//import useWebSocket from '../hooks/useWebSocket';\r\n+\r\n+\r\n+interface Props {\r\n+    pipelineStatusLasts: any[];\r\n+}\r\n+\r\n+const PipelinesStatusComponent: React.FC<Props> = ({ pipelineStatusLasts }) => {\r\n+    const { theme } = useTheme();\r\n+\r\n+\r\n+\r\n+\r\n+    // const processedData = useWebSocket('http://localhost:3222');\r\n+    //get\r\n+\r\n+    // const { data } = useGetAllQuery();\r\n+    // const pipelinesDetails = useSelector((state) => state.pipeline.details);\r\n+    //get\r\n+    const initialText = 'Summery';\r\n+    const expandedText = 'Details'\r\n+    const [expanded, setExpanded] = useState(false);\r\n+\r\n+\r\n+    const toggleExpansion = () => {\r\n+        setExpanded(!expanded);\r\n+    };\r\n+\r\n+    const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n+    const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n+\r\n+    const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n+\r\n+\r\n+    const handleRunPipeLineStatusProccess = async (event:any, pipeLineStatus: any) => {\r\n+        event.preventDefault();\r\n+\r\n+        try {\r\n+            // Set loading state for the specific button being clicked\r\n+            setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipeLineStatus.pipelineId]);\r\n+            await submitProccessApi(pipeLineStatus).unwrap();\r\n+            // refetch();\r\n+        } catch (err) {\r\n+            console.error('Delete failed', error);\r\n+        } finally {\r\n+            // Remove loading state for the specific button\r\n+            setLoadingStates((prevLoadingStates) =>\r\n+                prevLoadingStates.filter((id) => id !== pipeLineStatus.pipelineId)\r\n+            );\r\n+        }\r\n+    };\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    const getButtonColor = (pipelineId: number) => {\r\n+        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n+        return 'green';  // Green for successful pipeline\r\n+        // } else if (loadingStates.includes(pipelineId)) {\r\n+        //     return '#ddd'; // Grey for loading state\r\n+        //   }\r\n+        // return 'red'; // Default color for other states\r\n+    };\r\n+    return (\r\n+        <View style={styles.container}>\r\n+            <Text style={styles.textStyle}>\r\n+                {expanded ? expandedText : initialText}\r\n+            </Text>\r\n+\r\n+            <TouchableOpacity onPress={toggleExpansion}>\r\n+                <Text style={styles.textStyle}>\r\n+                    {expanded ? 'Read less' : 'Read more'}\r\n+                </Text>\r\n+            </TouchableOpacity>\r\n+            {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n+                \r\n+                <PipelinesButton key={pipelineStatus.id}\r\n+                    pipelineStatus={pipelineStatus}\r\n+                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n+                    loadingStates={loadingStates}\r\n+                    getButtonColor={getButtonColor}\r\n+                />\r\n+               \r\n+\r\n+            ))}\r\n+\r\n+\r\n+            {isError && <Text color=\"red\">{error}</Text>}\r\n+        </View>\r\n+\r\n+    );\r\n+};\r\n+\r\n+const styles = StyleSheet.create({\r\n+    container: {\r\n+        flex: 1,\r\n+        padding: 6,\r\n+    },\r\n+    buttonItem: {\r\n+        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n+        padding: 2,\r\n+        marginBottom: 2,\r\n+        borderRadius: 5,\r\n+        borderWidth: 1,\r\n+        borderColor: '#ddd',\r\n+    },\r\n+    error: {\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n+    },\r\n+    textStyle: {\r\n+        fontSize: 12,\r\n+        fontWeight: \"bold\",\r\n+    },\r\n+    toggleButton: {\r\n+        color: \"red\",\r\n+\r\n+    },\r\n+});\r\n+\r\n+export default PipelinesStatusComponent;\r\n+\r\n+\r\n"
                },
                {
                    "date": 1711355962295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,9 @@\n         // return 'red'; // Default color for other states\r\n     };\r\n     return (\r\n         <View style={styles.container}>\r\n-            <Text style={styles.textStyle}>\r\n-                {expanded ? expandedText : initialText}\r\n-            </Text>\r\n+       \r\n \r\n             <TouchableOpacity onPress={toggleExpansion}>\r\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n@@ -134,141 +132,4 @@\n \r\n export default PipelinesStatusComponent;\r\n \r\n \r\n-import React, { useEffect, useState } from 'react';\r\n-import { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\r\n-import { Button, ActivityIndicator } from 'react-native'; // Import the necessary components\r\n-\r\n-import { useGetAllQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\n-import { useTheme } from '@rneui/themed';\r\n-import PipelinesButton from './PipelinesButton';\r\n-import PipelinesSummery from './PipelinesSummery';\r\n-import { useSelector } from 'react-redux';\r\n-import useSocket from '../hooks/useCustomSocket';\r\n-\r\n-//import useWebSocket from '../hooks/useWebSocket';\r\n-\r\n-\r\n-interface Props {\r\n-    pipelineStatusLasts: any[];\r\n-}\r\n-\r\n-const PipelinesStatusComponent: React.FC<Props> = ({ pipelineStatusLasts }) => {\r\n-    const { theme } = useTheme();\r\n-\r\n-\r\n-\r\n-\r\n-    // const processedData = useWebSocket('http://localhost:3222');\r\n-    //get\r\n-\r\n-    // const { data } = useGetAllQuery();\r\n-    // const pipelinesDetails = useSelector((state) => state.pipeline.details);\r\n-    //get\r\n-    const initialText = 'Summery';\r\n-    const expandedText = 'Details'\r\n-    const [expanded, setExpanded] = useState(false);\r\n-\r\n-\r\n-    const toggleExpansion = () => {\r\n-        setExpanded(!expanded);\r\n-    };\r\n-\r\n-    const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n-    const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n-\r\n-    const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n-\r\n-\r\n-    const handleRunPipeLineStatusProccess = async (event:any, pipeLineStatus: any) => {\r\n-        event.preventDefault();\r\n-\r\n-        try {\r\n-            // Set loading state for the specific button being clicked\r\n-            setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipeLineStatus.pipelineId]);\r\n-            await submitProccessApi(pipeLineStatus).unwrap();\r\n-            // refetch();\r\n-        } catch (err) {\r\n-            console.error('Delete failed', error);\r\n-        } finally {\r\n-            // Remove loading state for the specific button\r\n-            setLoadingStates((prevLoadingStates) =>\r\n-                prevLoadingStates.filter((id) => id !== pipeLineStatus.pipelineId)\r\n-            );\r\n-        }\r\n-    };\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-    const getButtonColor = (pipelineId: number) => {\r\n-        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n-        return 'green';  // Green for successful pipeline\r\n-        // } else if (loadingStates.includes(pipelineId)) {\r\n-        //     return '#ddd'; // Grey for loading state\r\n-        //   }\r\n-        // return 'red'; // Default color for other states\r\n-    };\r\n-    return (\r\n-        <View style={styles.container}>\r\n-            <Text style={styles.textStyle}>\r\n-                {expanded ? expandedText : initialText}\r\n-            </Text>\r\n-\r\n-            <TouchableOpacity onPress={toggleExpansion}>\r\n-                <Text style={styles.textStyle}>\r\n-                    {expanded ? 'Read less' : 'Read more'}\r\n-                </Text>\r\n-            </TouchableOpacity>\r\n-            {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n-                <>\r\n-                <PipelinesButton\r\n-                    pipelineStatus={pipelineStatus}\r\n-                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n-                    loadingStates={loadingStates}\r\n-                    getButtonColor={getButtonColor}\r\n-                />\r\n-                </>\r\n-\r\n-            ))}\r\n-\r\n-\r\n-            {isError && <Text color=\"red\">{error}</Text>}\r\n-        </View>\r\n-\r\n-    );\r\n-};\r\n-\r\n-const styles = StyleSheet.create({\r\n-    container: {\r\n-        flex: 1,\r\n-        padding: 6,\r\n-    },\r\n-    buttonItem: {\r\n-        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n-        padding: 2,\r\n-        marginBottom: 2,\r\n-        borderRadius: 5,\r\n-        borderWidth: 1,\r\n-        borderColor: '#ddd',\r\n-    },\r\n-    error: {\r\n-        fontSize: 20,\r\n-        fontWeight: \"bold\",\r\n-    },\r\n-    textStyle: {\r\n-        fontSize: 12,\r\n-        fontWeight: \"bold\",\r\n-    },\r\n-    toggleButton: {\r\n-        color: \"red\",\r\n-\r\n-    },\r\n-});\r\n-\r\n-export default PipelinesStatusComponent;\r\n-\r\n-\r\n"
                },
                {
                    "date": 1711356009836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,19 +66,14 @@\n \r\n \r\n \r\n \r\n-    const getButtonColor = (pipelineId: number) => {\r\n-        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n-        return 'green';  // Green for successful pipeline\r\n-        // } else if (loadingStates.includes(pipelineId)) {\r\n-        //     return '#ddd'; // Grey for loading state\r\n-        //   }\r\n-        // return 'red'; // Default color for other states\r\n-    };\r\n+    const getButtonColor = (pipelineId: number) => { return 'green';}\r\n     return (\r\n         <View style={styles.container}>\r\n-       \r\n+            <Text style={styles.textStyle}>\r\n+                {expanded ? expandedText : initialText}\r\n+            </Text>\r\n \r\n             <TouchableOpacity onPress={toggleExpansion}>\r\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n"
                },
                {
                    "date": 1711356042798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,17 +69,9 @@\n \r\n     const getButtonColor = (pipelineId: number) => { return 'green';}\r\n     return (\r\n         <View style={styles.container}>\r\n-            <Text style={styles.textStyle}>\r\n-                {expanded ? expandedText : initialText}\r\n-            </Text>\r\n-\r\n-            <TouchableOpacity onPress={toggleExpansion}>\r\n-                <Text style={styles.textStyle}>\r\n-                    {expanded ? 'Read less' : 'Read more'}\r\n-                </Text>\r\n-            </TouchableOpacity>\r\n+       \r\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 \r\n                 <PipelinesButton key={pipelineStatus.id}\r\n                     pipelineStatus={pipelineStatus}\r\n"
                },
                {
                    "date": 1711356098431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,26 +66,19 @@\n \r\n \r\n \r\n \r\n-    const getButtonColor = (pipelineId: number) => { return 'green';}\r\n+    const getButtonColor = (pipelineId: number) => {\r\n+        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n+        return 'green';  // Green for successful pipeline\r\n+        // } else if (loadingStates.includes(pipelineId)) {\r\n+        //     return '#ddd'; // Grey for loading state\r\n+        //   }\r\n+        // return 'red'; // Default color for other states\r\n+    };\r\n     return (\r\n         <View style={styles.container}>\r\n        \r\n-            {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n-                \r\n-                <PipelinesButton key={pipelineStatus.id}\r\n-                    pipelineStatus={pipelineStatus}\r\n-                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n-                    loadingStates={loadingStates}\r\n-                    getButtonColor={getButtonColor}\r\n-                />\r\n-               \r\n-\r\n-            ))}\r\n-\r\n-\r\n-            {isError && <Text color=\"red\">{error}</Text>}\r\n         </View>\r\n \r\n     );\r\n };\r\n"
                },
                {
                    "date": 1711356111838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,31 @@\n         // return 'red'; // Default color for other states\r\n     };\r\n     return (\r\n         <View style={styles.container}>\r\n-       \r\n+            <Text style={styles.textStyle}>\r\n+                {expanded ? expandedText : initialText}\r\n+            </Text>\r\n+\r\n+            <TouchableOpacity onPress={toggleExpansion}>\r\n+                <Text style={styles.textStyle}>\r\n+                    {expanded ? 'Read less' : 'Read more'}\r\n+                </Text>\r\n+            </TouchableOpacity>\r\n+            {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n+                \r\n+                <PipelinesButton key={pipelineStatus.id}\r\n+                    pipelineStatus={pipelineStatus}\r\n+                    handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n+                    loadingStates={loadingStates}\r\n+                    getButtonColor={getButtonColor}\r\n+                />\r\n+               \r\n+\r\n+            ))}\r\n+\r\n+\r\n+            {isError && <Text color=\"red\">{error}</Text>}\r\n         </View>\r\n \r\n     );\r\n };\r\n"
                },
                {
                    "date": 1711357548265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,12 @@\n //import useWebSocket from '../hooks/useWebSocket';\r\n \r\n \r\n interface Props {\r\n-    pipelineStatusLasts: any[];\r\n+    pipelineStatusSummery: any[];\r\n }\r\n \r\n-const PipelinesStatusComponent: React.FC<Props> = ({ pipelineStatusLasts }) => {\r\n+const PipelinesStatusComponent: React.FC<Props> = ({ pipelineStatusSummery }) => {\r\n     const { theme } = useTheme();\r\n \r\n \r\n \r\n@@ -85,9 +85,9 @@\n                 <Text style={styles.textStyle}>\r\n                     {expanded ? 'Read less' : 'Read more'}\r\n                 </Text>\r\n             </TouchableOpacity>\r\n-            {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n+            {expanded && pipelineStatusSummery.map((pipelineStatus) => (\r\n                 \r\n                 <PipelinesButton key={pipelineStatus.id}\r\n                     pipelineStatus={pipelineStatus}\r\n                     handleRunPipeLineStatusProccess={(e) => handleRunPipeLineStatusProccess(e, pipelineStatus)}\r\n"
                },
                {
                    "date": 1711357612415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n \r\n //import useWebSocket from '../hooks/useWebSocket';\r\n \r\n \r\n+pipelineStatusSummery={pipelineStatusSummery} \r\n interface Props {\r\n     pipelineStatusSummery: any[];\r\n }\r\n \r\n"
                },
                {
                    "date": 1711357636282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n \r\n //import useWebSocket from '../hooks/useWebSocket';\r\n \r\n \r\n-pipelineStatusSummery={pipelineStatusSummery} \r\n+\r\n interface Props {\r\n-    pipelineStatusSummery: any[];\r\n+    eyeProductId: number;\r\n }\r\n \r\n-const PipelinesStatusComponent: React.FC<Props> = ({ pipelineStatusSummery }) => {\r\n+const PipelinesStatusComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1711357658805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useEffect, useState } from 'react';\r\n import { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\r\n import { Button, ActivityIndicator } from 'react-native'; // Import the necessary components\r\n \r\n-import { useGetAllQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\n+import { useGetAllQuery, useGetPipelineStatusSummeryQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\n import { useTheme } from '@rneui/themed';\r\n import PipelinesButton from './PipelinesButton';\r\n import PipelinesSummery from './PipelinesSummery';\r\n import { useSelector } from 'react-redux';\r\n@@ -18,12 +18,13 @@\n }\r\n \r\n const PipelinesStatusComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n+    const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery();\r\n+    const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery);;\r\n \r\n \r\n \r\n-\r\n     // const processedData = useWebSocket('http://localhost:3222');\r\n     //get\r\n \r\n     // const { data } = useGetAllQuery();\r\n"
                },
                {
                    "date": 1711357773096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n interface Props {\r\n     eyeProductId: number;\r\n }\r\n \r\n-const PipelinesStatusComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n+const PipelinesStatusSummeryComponent: React.FC<Props> = ({ eyeProductId }) => {\r\n     const { theme } = useTheme();\r\n     const { data: data2, error: error2 } = useGetPipelineStatusSummeryQuery();\r\n     const pipelineStatusSummery = useSelector((state) => state.pipeline.pipelineStatusSummery);;\r\n \r\n@@ -133,7 +133,7 @@\n \r\n     },\r\n });\r\n \r\n-export default PipelinesStatusComponent;\r\n+export default PipelinesStatusSummeryComponent;\r\n \r\n \r\n"
                }
            ],
            "date": 1711276012020,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\r\nimport { Button, ActivityIndicator } from 'react-native'; // Import the necessary components\r\n\r\nimport { useGetAllQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\nimport { useTheme } from '@rneui/themed';\r\nimport PipelinesButton from './PipelinesButton';\r\nimport PipelinesSummery from './PipelinesSummery';\r\nimport { useSelector } from 'react-redux';\r\nimport useSocket from '../hooks/useCustomSocket';\r\n\r\n//import useWebSocket from '../hooks/useWebSocket';\r\n\r\n\r\ninterface Props {\r\n    pipelineStatusLasts: any[];\r\n}\r\n\r\nconst PipelinesStatusComponent: React.FC<Props> = ({ pipelineStatusLasts }) => {\r\n    const { theme } = useTheme();\r\n\r\n\r\n\r\n\r\n    // const processedData = useWebSocket('http://localhost:3222');\r\n    //get\r\n\r\n    // const { data } = useGetAllQuery();\r\n    // const pipelinesDetails = useSelector((state) => state.pipeline.details);\r\n    //get\r\n    const initialText = 'Summery';\r\n    const expandedText = 'Details'\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n\r\n    const toggleExpansion = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n    const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n\r\n    const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n\r\n\r\n    const handleCallPipeLine = async (event, pipelineId: number) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            // Set loading state for the specific button being clicked\r\n            setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipelineId]);\r\n\r\n            let pipelineStatusDto = {\r\n                \"id\": 1,\r\n                \"eyeProductId\": 123847,\r\n                \"pipelineId\": 456\r\n            }\r\n\r\n            await submitProccessApi(pipelineStatusDto).unwrap();\r\n\r\n            // refetch();\r\n        } catch (err) {\r\n            console.error('Delete failed', error);\r\n        } finally {\r\n            // Remove loading state for the specific button\r\n            setLoadingStates((prevLoadingStates) =>\r\n                prevLoadingStates.filter((id) => id !== pipelineId)\r\n            );\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const getButtonColor = (pipelineId: number) => {\r\n        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n        return 'green';  // Green for successful pipeline\r\n        // } else if (loadingStates.includes(pipelineId)) {\r\n        //     return '#ddd'; // Grey for loading state\r\n        //   }\r\n        // return 'red'; // Default color for other states\r\n    };\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.textStyle}>\r\n                {expanded ? expandedText : initialText}\r\n                {/* {processedData ? (\r\n                    <div>Processed Data: {JSON.stringify(processedData)}</div>\r\n                ) : (\r\n                    <div>Waiting for data...</div>\r\n                )} */}\r\n            </Text>\r\n            {/* {pipelinesDetails.length > 0 && <PipelinesSummery data={pipelinesDetails} />} */}\r\n            {!expanded && (\r\n                <TouchableOpacity onPress={toggleExpansion}>\r\n                    <Text style={styles.toggleButton}>Read more</Text>\r\n                </TouchableOpacity>\r\n            )}\r\n             <Text style={styles.textStyle}>\r\n                        {expanded ? 'Read less' : 'Read more'}     \r\n                    </Text>\r\n            {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n                    ({pipelineStatus.lastRunnedStatus})\r\n                    <PipelinesButton\r\n                        pipelineStatus={pipelineStatus}\r\n                        handleCallPipeLine={handleCallPipeLine}\r\n                        loadingStates={loadingStates}\r\n                        getButtonColor={getButtonColor}\r\n                    />\r\n                </TouchableOpacity>\r\n            ))}\r\n\r\n\r\n            {isError && <Text color=\"red\">{error}</Text>}\r\n        </View>\r\n\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 6,\r\n    },\r\n    buttonItem: {\r\n        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n        padding: 2,\r\n        marginBottom: 2,\r\n        borderRadius: 5,\r\n        borderWidth: 1,\r\n        borderColor: '#ddd',\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    textStyle: {\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n    },\r\n    toggleButton: {\r\n        color: \"red\",\r\n\r\n    },\r\n});\r\n\r\nexport default PipelinesStatusComponent;\r\n\r\n\r\n"
        }
    ]
}