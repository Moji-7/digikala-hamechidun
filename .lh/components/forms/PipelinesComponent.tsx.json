{
    "sourceFile": "components/forms/PipelinesComponent.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1711274875482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711275116730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,22 +12,22 @@\n //import useWebSocket from '../hooks/useWebSocket';\r\n \r\n \r\n interface Props {\r\n-    integers: number[];\r\n+    pipelineStatusLasts: any[];\r\n }\r\n \r\n-const PipelinesStatusComponent: React.FC<Props> = ({ integers }) => {\r\n+const PipelinesStatusComponent: React.FC<Props> = ({ pipelineStatusLasts }) => {\r\n     const { theme } = useTheme();\r\n \r\n \r\n \r\n \r\n     // const processedData = useWebSocket('http://localhost:3222');\r\n     //get\r\n \r\n-    const { data } = useGetAllQuery();\r\n-    const pipelinesDetails = useSelector((state) => state.pipeline.details);\r\n+    // const { data } = useGetAllQuery();\r\n+    // const pipelinesDetails = useSelector((state) => state.pipeline.details);\r\n     //get\r\n     const initialText = 'Summery';\r\n     const expandedText = 'Details'\r\n     const [expanded, setExpanded] = useState(false);\r\n@@ -92,18 +92,20 @@\n                 ) : (\r\n                     <div>Waiting for data...</div>\r\n                 )} */}\r\n             </Text>\r\n-            {pipelinesDetails.length > 0 && <PipelinesSummery data={pipelinesDetails} />}\r\n+            {/* {pipelinesDetails.length > 0 && <PipelinesSummery data={pipelinesDetails} />} */}\r\n             {!expanded && (\r\n                 <TouchableOpacity onPress={toggleExpansion}>\r\n                     <Text style={styles.toggleButton}>Read more</Text>\r\n                 </TouchableOpacity>\r\n             )}\r\n-            {expanded && pipelinesDetails.map((cur) => (\r\n+            {expanded && pipelineStatusLasts.map((cur) => (\r\n                 <TouchableOpacity key={cur.id} onPress={toggleExpansion}>\r\n+\r\n                     <Text style={styles.textStyle}>\r\n                         {expanded ? 'Read less' : 'Read more'}\r\n+                        {cur.lastRunnedStatus}\r\n                     </Text>\r\n \r\n                     <PipelinesButton\r\n                         pipelineDetail={cur}\r\n"
                },
                {
                    "date": 1711275210848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,13 +75,13 @@\n \r\n \r\n \r\n     const getButtonColor = (pipelineId: number) => {\r\n-        if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n+      //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n             return 'green';  // Green for successful pipeline\r\n-        } else if (loadingStates.includes(pipelineId)) {\r\n-            return '#ddd'; // Grey for loading state\r\n-        }\r\n+       // } else if (loadingStates.includes(pipelineId)) {\r\n+       //     return '#ddd'; // Grey for loading state\r\n+     //   }\r\n         // return 'red'; // Default color for other states\r\n     };\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1711275537875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,18 +98,18 @@\n                 <TouchableOpacity onPress={toggleExpansion}>\r\n                     <Text style={styles.toggleButton}>Read more</Text>\r\n                 </TouchableOpacity>\r\n             )}\r\n-            {expanded && pipelineStatusLasts.map((cur) => (\r\n-                <TouchableOpacity key={cur.id} onPress={toggleExpansion}>\r\n+            {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n+                <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n \r\n                     <Text style={styles.textStyle}>\r\n                         {expanded ? 'Read less' : 'Read more'}\r\n-                        {cur.lastRunnedStatus}\r\n+                        {pipelineStatus.lastRunnedStatus}\r\n                     </Text>\r\n \r\n                     <PipelinesButton\r\n-                        pipelineDetail={cur}\r\n+                        pipelineStatus={pipelineStatus}\r\n                         handleCallPipeLine={handleCallPipeLine}\r\n                         loadingStates={loadingStates}\r\n                         getButtonColor={getButtonColor}\r\n                     />\r\n"
                },
                {
                    "date": 1711275830371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,12 +102,11 @@\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n \r\n                     <Text style={styles.textStyle}>\r\n-                        {expanded ? 'Read less' : 'Read more'}\r\n-                        {pipelineStatus.lastRunnedStatus}\r\n+                        {expanded ? 'Read less' : 'Read more'}     \r\n                     </Text>\r\n-\r\n+({pipelineStatus.lastRunnedStatus})\r\n                     <PipelinesButton\r\n                         pipelineStatus={pipelineStatus}\r\n                         handleCallPipeLine={handleCallPipeLine}\r\n                         loadingStates={loadingStates}\r\n"
                },
                {
                    "date": 1711275848419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,11 +101,9 @@\n             )}\r\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n \r\n-                    <Text style={styles.textStyle}>\r\n-                        {expanded ? 'Read less' : 'Read more'}     \r\n-                    </Text>\r\n+                   \r\n ({pipelineStatus.lastRunnedStatus})\r\n                     <PipelinesButton\r\n                         pipelineStatus={pipelineStatus}\r\n                         handleCallPipeLine={handleCallPipeLine}\r\n"
                },
                {
                    "date": 1711275942603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,13 +75,13 @@\n \r\n \r\n \r\n     const getButtonColor = (pipelineId: number) => {\r\n-      //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n-            return 'green';  // Green for successful pipeline\r\n-       // } else if (loadingStates.includes(pipelineId)) {\r\n-       //     return '#ddd'; // Grey for loading state\r\n-     //   }\r\n+        //  if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n+        return 'green';  // Green for successful pipeline\r\n+        // } else if (loadingStates.includes(pipelineId)) {\r\n+        //     return '#ddd'; // Grey for loading state\r\n+        //   }\r\n         // return 'red'; // Default color for other states\r\n     };\r\n     return (\r\n         <View style={styles.container}>\r\n@@ -100,11 +100,9 @@\n                 </TouchableOpacity>\r\n             )}\r\n             {expanded && pipelineStatusLasts.map((pipelineStatus) => (\r\n                 <TouchableOpacity key={pipelineStatus.id} onPress={toggleExpansion}>\r\n-\r\n-                   \r\n-({pipelineStatus.lastRunnedStatus})\r\n+                    ({pipelineStatus.lastRunnedStatus})\r\n                     <PipelinesButton\r\n                         pipelineStatus={pipelineStatus}\r\n                         handleCallPipeLine={handleCallPipeLine}\r\n                         loadingStates={loadingStates}\r\n"
                }
            ],
            "date": 1711274875482,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\r\nimport { Button, ActivityIndicator } from 'react-native'; // Import the necessary components\r\n\r\nimport { useGetAllQuery, useSubmitMutation, useSubmitProccessMutation } from '../reduxApi/pipelineApi';\r\nimport { useTheme } from '@rneui/themed';\r\nimport PipelinesButton from './PipelinesButton';\r\nimport PipelinesSummery from './PipelinesSummery';\r\nimport { useSelector } from 'react-redux';\r\nimport useSocket from '../hooks/useCustomSocket';\r\n\r\n//import useWebSocket from '../hooks/useWebSocket';\r\n\r\n\r\ninterface Props {\r\n    integers: number[];\r\n}\r\n\r\nconst PipelinesStatusComponent: React.FC<Props> = ({ integers }) => {\r\n    const { theme } = useTheme();\r\n\r\n\r\n\r\n\r\n    // const processedData = useWebSocket('http://localhost:3222');\r\n    //get\r\n\r\n    const { data } = useGetAllQuery();\r\n    const pipelinesDetails = useSelector((state) => state.pipeline.details);\r\n    //get\r\n    const initialText = 'Summery';\r\n    const expandedText = 'Details'\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n\r\n    const toggleExpansion = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const [submitApi, isSuccess, isError] = useSubmitMutation();\r\n    const [loadingStates, setLoadingStates] = useState<number[]>([]); // State to track loading for each button\r\n\r\n    const [submitProccessApi, { isLoading: submitProccessIsLoading, isSuccess: submitProccessIsSuccess, isError: submitProccessIsError }] = useSubmitProccessMutation();\r\n\r\n\r\n    const handleCallPipeLine = async (event, pipelineId: number) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            // Set loading state for the specific button being clicked\r\n            setLoadingStates((prevLoadingStates) => [...prevLoadingStates, pipelineId]);\r\n\r\n            let pipelineStatusDto = {\r\n                \"id\": 1,\r\n                \"eyeProductId\": 123847,\r\n                \"pipelineId\": 456\r\n            }\r\n\r\n            await submitProccessApi(pipelineStatusDto).unwrap();\r\n\r\n            // refetch();\r\n        } catch (err) {\r\n            console.error('Delete failed', error);\r\n        } finally {\r\n            // Remove loading state for the specific button\r\n            setLoadingStates((prevLoadingStates) =>\r\n                prevLoadingStates.filter((id) => id !== pipelineId)\r\n            );\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const getButtonColor = (pipelineId: number) => {\r\n        if (isSuccess && data?.id === pipelineId) { // Use data?.id for success state\r\n            return 'green';  // Green for successful pipeline\r\n        } else if (loadingStates.includes(pipelineId)) {\r\n            return '#ddd'; // Grey for loading state\r\n        }\r\n        // return 'red'; // Default color for other states\r\n    };\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.textStyle}>\r\n                {expanded ? expandedText : initialText}\r\n                {/* {processedData ? (\r\n                    <div>Processed Data: {JSON.stringify(processedData)}</div>\r\n                ) : (\r\n                    <div>Waiting for data...</div>\r\n                )} */}\r\n            </Text>\r\n            {pipelinesDetails.length > 0 && <PipelinesSummery data={pipelinesDetails} />}\r\n            {!expanded && (\r\n                <TouchableOpacity onPress={toggleExpansion}>\r\n                    <Text style={styles.toggleButton}>Read more</Text>\r\n                </TouchableOpacity>\r\n            )}\r\n            {expanded && pipelinesDetails.map((cur) => (\r\n                <TouchableOpacity key={cur.id} onPress={toggleExpansion}>\r\n                    <Text style={styles.textStyle}>\r\n                        {expanded ? 'Read less' : 'Read more'}\r\n                    </Text>\r\n\r\n                    <PipelinesButton\r\n                        pipelineDetail={cur}\r\n                        handleCallPipeLine={handleCallPipeLine}\r\n                        loadingStates={loadingStates}\r\n                        getButtonColor={getButtonColor}\r\n                    />\r\n                </TouchableOpacity>\r\n            ))}\r\n\r\n\r\n            {isError && <Text color=\"red\">{error}</Text>}\r\n        </View>\r\n\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 6,\r\n    },\r\n    buttonItem: {\r\n        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n        padding: 2,\r\n        marginBottom: 2,\r\n        borderRadius: 5,\r\n        borderWidth: 1,\r\n        borderColor: '#ddd',\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    textStyle: {\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n    },\r\n    toggleButton: {\r\n        color: \"red\",\r\n\r\n    },\r\n});\r\n\r\nexport default PipelinesStatusComponent;\r\n\r\n\r\n"
        }
    ]
}