{
    "sourceFile": "components/forms/SimpleComponent.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 65,
            "patches": [
                {
                    "date": 1708316356242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708316540508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React from 'react';\r\n import { useDispatch } from 'react-redux';\r\n-import { useAddItemMutation } from './api2';\r\n-import { addItem } from './sliceB';\r\n+\r\n+import { useAddItemMutation } from '../reduxApi/api2';\r\n+import { addItem } from '../reduxApi/sliceB';\r\n import { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n   const [addItemApi, { isLoading }] = useAddItemMutation();\r\n"
                },
                {
                    "date": 1708323132701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import React from 'react';\r\n+import { useDispatch } from 'react-redux';\r\n+\r\n+import { useAddItemMutation } from '../reduxApi/api2';\r\n+import { addItem } from '../reduxApi/sliceB';\r\n+import { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\n+const SimpleComponent = () => {\r\n+\r\n+  const dispatch = useDispatch();\r\n+  const [addItemApi, { isLoading }] = useAddItemMutation();\r\n+\r\n+  const handleClick = async () => {\r\n+    const newItem = { /* your new item data here */ };\r\n+    try {\r\n+      const result = await addItemApi(newItem).unwrap();\r\n+      dispatch(addItem(result));\r\n+    } catch (error) {\r\n+      console.error('Failed to add item: ', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    {JSON.stringify(useSelector( useSelector((state) => state.eyeProducts)), null, 2)}\r\n+        <Icon\r\n+            name=\"add-shopping-cart\"\r\n+            type=\"ionicon\"\r\n+            onPress={() => handleClick()}\r\n+        />\r\n+    </>\r\n+);\r\n+\r\n+};\r\n+\r\n+export default SimpleComponent;\r\n"
                },
                {
                    "date": 1708323162535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-    {JSON.stringify(useSelector( useSelector((state) => state.eyeProducts)), null, 2)}\r\n+    {JSON.stringify(useSelector((state) => state.eyeProducts), null, 2)}\r\n         <Icon\r\n             name=\"add-shopping-cart\"\r\n             type=\"ionicon\"\r\n             onPress={() => handleClick()}\r\n@@ -32,37 +32,4 @@\n \r\n };\r\n \r\n export default SimpleComponent;\r\n-import React from 'react';\r\n-import { useDispatch } from 'react-redux';\r\n-\r\n-import { useAddItemMutation } from '../reduxApi/api2';\r\n-import { addItem } from '../reduxApi/sliceB';\r\n-import { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\n-const SimpleComponent = () => {\r\n-  const dispatch = useDispatch();\r\n-  const [addItemApi, { isLoading }] = useAddItemMutation();\r\n-\r\n-  const handleClick = async () => {\r\n-    const newItem = { /* your new item data here */ };\r\n-    try {\r\n-      const result = await addItemApi(newItem).unwrap();\r\n-      dispatch(addItem(result));\r\n-    } catch (error) {\r\n-      console.error('Failed to add item: ', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-        <Icon\r\n-            name=\"add-shopping-cart\"\r\n-            type=\"ionicon\"\r\n-            onPress={() => handleClick()}\r\n-        />\r\n-    </>\r\n-);\r\n-\r\n-};\r\n-\r\n-export default SimpleComponent;\r\n"
                },
                {
                    "date": 1708323212624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React from 'react';\r\n-import { useDispatch } from 'react-redux';\r\n+import { useDispatch,useSelector } from 'react-redux';\r\n \r\n import { useAddItemMutation } from '../reduxApi/api2';\r\n import { addItem } from '../reduxApi/sliceB';\r\n import { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\n"
                },
                {
                    "date": 1708323424295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,16 @@\n import React from 'react';\r\n import { useDispatch,useSelector } from 'react-redux';\r\n \r\n-import { useAddItemMutation } from '../reduxApi/api2';\r\n-import { addItem } from '../reduxApi/sliceB';\r\n+\r\n import { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\n const SimpleComponent = () => {\r\n \r\n-  const dispatch = useDispatch();\r\n-  const [addItemApi, { isLoading }] = useAddItemMutation();\r\n \r\n   const handleClick = async () => {\r\n     const newItem = { /* your new item data here */ };\r\n     try {\r\n-      const result = await addItemApi(newItem).unwrap();\r\n-      dispatch(addItem(result));\r\n+\r\n     } catch (error) {\r\n       console.error('Failed to add item: ', error);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1708323474109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n \r\n import { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\n const SimpleComponent = () => {\r\n \r\n-\r\n   const handleClick = async () => {\r\n     const newItem = { /* your new item data here */ };\r\n     try {\r\n \r\n@@ -26,6 +25,5 @@\n     </>\r\n );\r\n \r\n };\r\n-\r\n-export default SimpleComponent;\r\n+export default SimpleComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708355821782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,59 @@\n import React from 'react';\r\n-import { useDispatch,useSelector } from 'react-redux';\r\n+import { useSelector, useDispatch } from 'react-redux';\r\n+import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { Button, Icon } from '@rneui/themed';\r\n+import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n-\r\n-import { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\n const SimpleComponent = () => {\r\n \r\n-  const handleClick = async () => {\r\n-    const newItem = { /* your new item data here */ };\r\n-    try {\r\n-\r\n-    } catch (error) {\r\n-      console.error('Failed to add item: ', error);\r\n-    }\r\n+    const { data, isLoading, error } = useGetQuery(null, { skip: true }); // Initial empty query\r\n+  \r\n+    const handlePipelineSelection = async (pipelineId) => {\r\n+      // Fetch pipeline data using getQuery with pipelineId\r\n+      const { data: pipelineData, error: fetchError } = await useGetQuery(\r\n+        pipelineId, // Pass the pipeline ID as the query argument\r\n+        { skip: !data || !data.includes(pipelineId) } // Skip if already fetched or not needed\r\n+      );\r\n+  \r\n+      if (fetchError) {\r\n+        console.error('Failed to fetch pipeline data:', fetchError);\r\n\\ No newline at end of file\n+        // Handle error appropriately (e.g., display a message)\r\n+        return;\r\n+      }\r\n+  \r\n+      // Perform actions or display information based on the fetched pipeline data (pipelineData)\r\n+    };\r\n+  \r\n+    const renderButtons = () => {\r\n+      return Object.entries(PipelineIds).map(([pipelineId, pipelineName]) => (\r\n+        <Button\r\n+          key={pipelineId}\r\n+          title={pipelineName}\r\n+          onPress={() => handlePipelineSelection(pipelineId)}\r\n+          style={styles.buttonStyle}\r\n+        />\r\n+      ));\r\n+    };\r\n+  \r\n+    return (\r\n+      <View style={styles.container}>\r\n+        {isLoading && <Text>Loading pipelines...</Text>}\r\n+        {error && <Text>Error: {error.message}</Text>}\r\n+        {data && renderButtons()}\r\n+      </View>\r\n+    );\r\n   };\r\n-\r\n-  return (\r\n-    <>\r\n-    {JSON.stringify(useSelector((state) => state.eyeProducts), null, 2)}\r\n-        <Icon\r\n-            name=\"add-shopping-cart\"\r\n-            type=\"ionicon\"\r\n-            onPress={() => handleClick()}\r\n-        />\r\n-    </>\r\n-);\r\n-\r\n-};\r\n-export default SimpleComponent;\n+  \r\n+  const styles = StyleSheet.create({\r\n+    container: {\r\n+      flex: 1,\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      padding: 20,\r\n+    },\r\n+    buttonStyle: {\r\n+      margin: 10,\r\n+    },\r\n+  });\r\n+  \r\n+  export default SimpleComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708356220624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n import React from 'react';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n-import { Button, Icon } from '@rneui/themed';\r\n+import { Button, Icon,useTheme } from '@rneui/themed';\r\n+\r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n \r\n+  const { theme } = useTheme();\r\n     const { data, isLoading, error } = useGetQuery(null, { skip: true }); // Initial empty query\r\n   \r\n     const handlePipelineSelection = async (pipelineId) => {\r\n       // Fetch pipeline data using getQuery with pipelineId\r\n"
                },
                {
                    "date": 1708356446818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n           style={styles.buttonStyle}\r\n         />\r\n       ));\r\n     };\r\n-  \r\n+    const { theme } = useTheme();\r\n     return (\r\n       <View style={styles.container}>\r\n         {isLoading && <Text>Loading pipelines...</Text>}\r\n         {error && <Text>Error: {error.message}</Text>}\r\n"
                },
                {
                    "date": 1708356453446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n \r\n-  const { theme } = useTheme();\r\n+\r\n     const { data, isLoading, error } = useGetQuery(null, { skip: true }); // Initial empty query\r\n   \r\n     const handlePipelineSelection = async (pipelineId) => {\r\n       // Fetch pipeline data using getQuery with pipelineId\r\n"
                },
                {
                    "date": 1708356484738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React from 'react';\r\n+import { View, Text, StyleSheet, Linking, FlatList } from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon,useTheme } from '@rneui/themed';\r\n \r\n"
                },
                {
                    "date": 1708356493123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n+    const { theme } = useTheme();\r\n \r\n-\r\n     const { data, isLoading, error } = useGetQuery(null, { skip: true }); // Initial empty query\r\n   \r\n     const handlePipelineSelection = async (pipelineId) => {\r\n       // Fetch pipeline data using getQuery with pipelineId\r\n@@ -36,9 +36,9 @@\n           style={styles.buttonStyle}\r\n         />\r\n       ));\r\n     };\r\n-    const { theme } = useTheme();\r\n+\r\n     return (\r\n       <View style={styles.container}>\r\n         {isLoading && <Text>Loading pipelines...</Text>}\r\n         {error && <Text>Error: {error.message}</Text>}\r\n"
                },
                {
                    "date": 1708356511196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n       ));\r\n     };\r\n \r\n     return (\r\n-      <View style={styles.container}>\r\n+      <View style={styles.container}>سشمشئ\r\n         {isLoading && <Text>Loading pipelines...</Text>}\r\n         {error && <Text>Error: {error.message}</Text>}\r\n         {data && renderButtons()}\r\n       </View>\r\n"
                },
                {
                    "date": 1708356552708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     return (\r\n       <View style={styles.container}>سشمشئ\r\n         {isLoading && <Text>Loading pipelines...</Text>}\r\n         {error && <Text>Error: {error.message}</Text>}\r\n-        {data && renderButtons()}\r\n+        {renderButtons()}\r\n       </View>\r\n     );\r\n   };\r\n   \r\n"
                },
                {
                    "date": 1708402679991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,57 +6,27 @@\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n-    const { theme } = useTheme();\r\n+  const dispatch = useDispatch();\r\n \r\n-    const { data, isLoading, error } = useGetQuery(null, { skip: true }); // Initial empty query\r\n-  \r\n-    const handlePipelineSelection = async (pipelineId) => {\r\n-      // Fetch pipeline data using getQuery with pipelineId\r\n-      const { data: pipelineData, error: fetchError } = await useGetQuery(\r\n-        pipelineId, // Pass the pipeline ID as the query argument\r\n-        { skip: !data || !data.includes(pipelineId) } // Skip if already fetched or not needed\r\n-      );\r\n-  \r\n-      if (fetchError) {\r\n-        console.error('Failed to fetch pipeline data:', fetchError);\r\n-        // Handle error appropriately (e.g., display a message)\r\n-        return;\r\n-      }\r\n-  \r\n-      // Perform actions or display information based on the fetched pipeline data (pipelineData)\r\n-    };\r\n-  \r\n-    const renderButtons = () => {\r\n-      return Object.entries(PipelineIds).map(([pipelineId, pipelineName]) => (\r\n-        <Button\r\n-          key={pipelineId}\r\n-          title={pipelineName}\r\n-          onPress={() => handlePipelineSelection(pipelineId)}\r\n-          style={styles.buttonStyle}\r\n-        />\r\n-      ));\r\n-    };\r\n+  const handleClick = async (pipelineId) => {\r\n+    try {\r\n+      await dispatch(useGetQuery(pipelineId));\r\n+    } catch (error) {\r\n+      console.error('Failed to fetch pipeline: ', error);\r\n+    }\r\n+  };\r\n \r\n-    return (\r\n-      <View style={styles.container}>سشمشئ\r\n-        {isLoading && <Text>Loading pipelines...</Text>}\r\n-        {error && <Text>Error: {error.message}</Text>}\r\n-        {renderButtons()}\r\n-      </View>\r\n-    );\r\n-  };\r\n+  return (\r\n+    <>\r\n+      {Object.entries(PipelineIds).map(([key, value]) => (\r\n+        <Button key={key} onPress={() => handleClick(value)}>\r\n+          {key}\r\n+        </Button>\r\n+      ))}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n   \r\n-  const styles = StyleSheet.create({\r\n-    container: {\r\n-      flex: 1,\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      padding: 20,\r\n-    },\r\n-    buttonStyle: {\r\n-      margin: 10,\r\n-    },\r\n-  });\r\n-  \r\n   export default SimpleComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708403387001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,14 @@\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n+  const [getApi, { isError, error, isSuccess, data }] = useGetQuery();\r\n \r\n+\r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n-      await dispatch(useGetQuery(pipelineId));\r\n+      await getApi(pipelineId)\r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1708404709497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n-  const [getApi, { isError, error, isSuccess, data }] = useGetQuery();\r\n+  const pipelineId = 1; // Replace with the actual pipelineId\r\n+  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n \r\n-\r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       await getApi(pipelineId)\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1708404729370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n   const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n-      await getApi(pipelineId)\r\n+      //await getApi(pipelineId)\r\n+      await refetch();\r\n+\r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1708404934571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       //await getApi(pipelineId)\r\n-      await refetch();\r\n+      await refetch(pipelineId);\r\n \r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n"
                },
                {
                    "date": 1708406337473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,17 @@\n import React from 'react';\r\n import { View, Text, StyleSheet, Linking, FlatList } from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n-import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { useGetQuery ,useGetLazyQuery} from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon,useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n   const pipelineId = 1; // Replace with the actual pipelineId\r\n-  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+  //const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+  const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery(pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       //await getApi(pipelineId)\r\n"
                },
                {
                    "date": 1708406345389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       //await getApi(pipelineId)\r\n-      await refetch(pipelineId);\r\n+      await getPipeline(pipelineId);\r\n \r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n"
                },
                {
                    "date": 1708406399245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n   const pipelineId = 1; // Replace with the actual pipelineId\r\n   //const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n-  const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery(pipelineId);\r\n+  const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery (pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       //await getApi(pipelineId)\r\n"
                },
                {
                    "date": 1708406561046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,22 @@\n import React from 'react';\r\n import { View, Text, StyleSheet, Linking, FlatList } from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n-import { useGetQuery ,useGetLazyQuery} from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon,useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n   const pipelineId = 1; // Replace with the actual pipelineId\r\n-  //const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n-  const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery (pipelineId);\r\n+  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+ // const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery (pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n-      //await getApi(pipelineId)\r\n-      await getPipeline(pipelineId);\r\n+      await getApi(pipelineId)\r\n+      //await getPipeline(pipelineId);\r\n \r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n"
                },
                {
                    "date": 1708406635010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,15 +7,18 @@\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n-  const pipelineId = 1; // Replace with the actual pipelineId\r\n+  const [pipelineId, setPipelineId] = useState(null);\r\n+\r\n+ \r\n   const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n  // const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery (pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n-      await getApi(pipelineId)\r\n+      setPipelineId(id);\r\n+     // await getApi(pipelineId)\r\n       //await getPipeline(pipelineId);\r\n \r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n"
                },
                {
                    "date": 1708406665077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\r\n+import React, { useState } from 'react';\r\n import { View, Text, StyleSheet, Linking, FlatList } from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon,useTheme } from '@rneui/themed';\r\n"
                },
                {
                    "date": 1708406705628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n  // const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery (pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n-      setPipelineId(id);\r\n+      setPipelineId(pipelineId);\r\n      // await getApi(pipelineId)\r\n       //await getPipeline(pipelineId);\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1708406767276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,20 +6,17 @@\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n-  const dispatch = useDispatch();\r\n+\r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n  \r\n   const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n- // const [getPipeline,{ data, error, isError, isSuccess}]  = useGetLazyQuery (pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n-     // await getApi(pipelineId)\r\n-      //await getPipeline(pipelineId);\r\n \r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n"
                },
                {
                    "date": 1708406892129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,10 @@\n   };\r\n \r\n   return (\r\n     <>\r\n+      if (isLoading) return <Text>Loading...</Text>;\r\n+    if (isError) return <Text>Error: {error.toString()}</Text>;\r\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n"
                },
                {
                    "date": 1708406971884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,14 @@\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n   };\r\n \r\n+\r\n+  const PrettyPrint = ({ json }: { json: any }) => (\r\n+    <div style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\r\n+      {JSON.stringify(json, null, 2)}\r\n+    </div>\r\n+  )\r\n   return (\r\n     <>\r\n       if (isLoading) return <Text>Loading...</Text>;\r\n     if (isError) return <Text>Error: {error.toString()}</Text>;\r\n"
                },
                {
                    "date": 1708406997037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   )\r\n   return (\r\n     <>\r\n       if (isLoading) return <Text>Loading...</Text>;\r\n-    if (isError) return <Text>Error: {error.toString()}</Text>;\r\n+    if (isError) return <Text>Error: {error?.toString()}</Text>;\r\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n"
                },
                {
                    "date": 1708407103767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,37 +7,47 @@\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n \r\n-  const [pipelineId, setPipelineId] = useState(null);\r\n+  // const [pipelineId, setPipelineId] = useState(null);\r\n \r\n- \r\n-  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+  // const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n \r\n-  const handleClick = async (pipelineId) => {\r\n-    try {\r\n-      setPipelineId(pipelineId);\r\n+  // const handleClick = async (pipelineId) => {\r\n+  //   try {\r\n+  //     setPipelineId(pipelineId);\r\n \r\n-    } catch (error) {\r\n-      console.error('Failed to fetch pipeline: ', error);\r\n-    }\r\n-  };\r\n+  //   } catch (error) {\r\n+  //     console.error('Failed to fetch pipeline: ', error);\r\n+  //   }\r\n+  // };\r\n \r\n+  const fetchPipelineData = (pipelineId: number) => {\r\n+    const { data, isLoading, isError, error } = useGetQuery(`pipelines/${pipelineId}`);\r\n \r\n+    if (isLoading) return <Text>Loading...</Text>;\r\n+    if (isError) return <Text>Error: {error.toString()}</Text>;\r\n+\r\n+    return (\r\n+      <Card>\r\n+        {/* Show data or navigate somewhere with this data */}\r\n+        <PrettyPrint json={data} />\r\n+      </Card>\r\n+    );\r\n+  };\r\n   const PrettyPrint = ({ json }: { json: any }) => (\r\n     <div style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\r\n       {JSON.stringify(json, null, 2)}\r\n     </div>\r\n   )\r\n   return (\r\n     <>\r\n-      if (isLoading) return <Text>Loading...</Text>;\r\n-    if (isError) return <Text>Error: {error?.toString()}</Text>;\r\n-      {Object.entries(PipelineIds).map(([key, value]) => (\r\n+\r\n+      {/* {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n-      ))}\r\n+      ))} */}\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1708411018600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,16 @@\n     </div>\r\n   )\r\n   return (\r\n     <>\r\n-\r\n+ {Object.values(PipelineIds).map((pipelineEnumId) => (\r\n+        <Button\r\n+          key={pipelineEnumId}\r\n+          icon={<Icon name=\"arrow-forward-circle\" type=\"ionicon\" color={theme.colors.primary} />}\r\n+          title={`Fetch Pipeline Data (${pipelineEnumId})`}\r\n+          onPress={() => fetchPipelineData(pipelineEnumId)}\r\n+        />\r\n+      ))}\r\n       {/* {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n"
                },
                {
                    "date": 1708411052403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     <>\r\n  {Object.values(PipelineIds).map((pipelineEnumId) => (\r\n         <Button\r\n           key={pipelineEnumId}\r\n-          icon={<Icon name=\"arrow-forward-circle\" type=\"ionicon\" color={theme.colors.primary} />}\r\n+          icon={<Icon name=\"arrow-forward-circle\" type=\"ionicon\"  />}\r\n           title={`Fetch Pipeline Data (${pipelineEnumId})`}\r\n           onPress={() => fetchPipelineData(pipelineEnumId)}\r\n         />\r\n       ))}\r\n"
                },
                {
                    "date": 1708411076713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   //   }\r\n   // };\r\n \r\n   const fetchPipelineData = (pipelineId: number) => {\r\n-    const { data, isLoading, isError, error } = useGetQuery(`pipelines/${pipelineId}`);\r\n+    const { data, isLoading, isError, error } = useGetQuery(`${pipelineId}`);\r\n \r\n     if (isLoading) return <Text>Loading...</Text>;\r\n     if (isError) return <Text>Error: {error.toString()}</Text>;\r\n \r\n"
                },
                {
                    "date": 1708411099659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,54 +7,36 @@\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n \r\n-  // const [pipelineId, setPipelineId] = useState(null);\r\n+  const [pipelineId, setPipelineId] = useState(null);\r\n \r\n-  // const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+ \r\n+  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n \r\n-  // const handleClick = async (pipelineId) => {\r\n-  //   try {\r\n-  //     setPipelineId(pipelineId);\r\n+  const handleClick = async (pipelineId) => {\r\n+    try {\r\n+      setPipelineId(pipelineId);\r\n \r\n-  //   } catch (error) {\r\n-  //     console.error('Failed to fetch pipeline: ', error);\r\n-  //   }\r\n-  // };\r\n+    } catch (error) {\r\n+      console.error('Failed to fetch pipeline: ', error);\r\n+    }\r\n+  };\r\n \r\n-  const fetchPipelineData = (pipelineId: number) => {\r\n-    const { data, isLoading, isError, error } = useGetQuery(`${pipelineId}`);\r\n \r\n-    if (isLoading) return <Text>Loading...</Text>;\r\n-    if (isError) return <Text>Error: {error.toString()}</Text>;\r\n-\r\n-    return (\r\n-      <Card>\r\n-        {/* Show data or navigate somewhere with this data */}\r\n-        <PrettyPrint json={data} />\r\n-      </Card>\r\n-    );\r\n-  };\r\n   const PrettyPrint = ({ json }: { json: any }) => (\r\n     <div style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\r\n       {JSON.stringify(json, null, 2)}\r\n     </div>\r\n   )\r\n   return (\r\n     <>\r\n- {Object.values(PipelineIds).map((pipelineEnumId) => (\r\n-        <Button\r\n-          key={pipelineEnumId}\r\n-          icon={<Icon name=\"arrow-forward-circle\" type=\"ionicon\"  />}\r\n-          title={`Fetch Pipeline Data (${pipelineEnumId})`}\r\n-          onPress={() => fetchPipelineData(pipelineEnumId)}\r\n-        />\r\n-      ))}\r\n-      {/* {Object.entries(PipelineIds).map(([key, value]) => (\r\n+\r\n+      {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n-      ))} */}\r\n+      ))}\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1708412466105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,10 @@\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n+            {isSuccess && <PrettyPrint json={data} />}\r\n+\r\n       ))}\r\n     </>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1708412479718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,12 @@\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n-            {isSuccess && <PrettyPrint json={data} />}\r\n+        \r\n+      ))}\r\n+          {isSuccess && <PrettyPrint json={data} />}\r\n \r\n-      ))}\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1708412588396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n           {key}\r\n         </Button>\r\n         \r\n       ))}\r\n-          {isSuccess && <PrettyPrint json={data} />}\r\n+          {isSuccess && salam}\r\n \r\n     </>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1708412670545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState } from 'react';\r\n-import { View, Text, StyleSheet, Linking, FlatList } from 'react-native';\r\n+import { View, Text, StyleSheet, Linking, FlatList ,ActivityIndicator} from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon,useTheme } from '@rneui/themed';\r\n \r\n@@ -36,8 +36,10 @@\n           {key}\r\n         </Button>\r\n         \r\n       ))}\r\n+            {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n+\r\n           {isSuccess && salam}\r\n \r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1708412718821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,12 @@\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n  \r\n-  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+  //const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+  const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n \r\n+\r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n \r\n"
                },
                {
                    "date": 1708412775171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,16 @@\n import React, { useState } from 'react';\r\n-import { View, Text, StyleSheet, Linking, FlatList ,ActivityIndicator} from 'react-native';\r\n+import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n-import { Button, Icon,useTheme } from '@rneui/themed';\r\n+import { Button, Icon, useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n- \r\n-  //const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n \r\n \r\n   const handleClick = async (pipelineId) => {\r\n@@ -36,16 +34,16 @@\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n-        \r\n+\r\n       ))}\r\n-            {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n+      {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n \r\n-          {isSuccess && salam}\r\n+      {isSuccess && salam}\r\n \r\n     </>\r\n   );\r\n };\r\n\\ No newline at end of file\n \r\n-  \r\n-  export default SimpleComponent;\n+\r\n+export default SimpleComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708413217702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n+  const [getApi, { isError, error, isSuccess, data }] = useGetQuery();\r\n \r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n"
                },
                {
                    "date": 1708414258707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,36 @@\n-import React, { useState } from 'react';\r\n-import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n+import React, { useEffect } from 'react';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n-import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { fetchPipeline, selectPipeline } from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon, useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n+  const dispatch = useDispatch();\r\n+  const { data, error, isLoading } = useSelector(selectPipeline);\r\n \r\n-  const [pipelineId, setPipelineId] = useState(null);\r\n-\r\n-  const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n-  const [getApi, { isError, error, isSuccess, data }] = useGetQuery();\r\n-\r\n-\r\n-  const handleClick = async (pipelineId) => {\r\n-    try {\r\n-      setPipelineId(pipelineId);\r\n-\r\n-    } catch (error) {\r\n-      console.error('Failed to fetch pipeline: ', error);\r\n-    }\r\n+  const handleClick = (pipelineId) => {\r\n+    dispatch(fetchPipeline(pipelineId));\r\n   };\r\n \r\n-\r\n-  const PrettyPrint = ({ json }: { json: any }) => (\r\n+  const PrettyPrint = ({ json }) => (\r\n     <div style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\r\n       {JSON.stringify(json, null, 2)}\r\n     </div>\r\n-  )\r\n+  );\r\n+\r\n   return (\r\n     <>\r\n-\r\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n-\r\n       ))}\r\n       {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n\\ No newline at end of file\n-\r\n-      {isSuccess && salam}\r\n-\r\n+      {data && <PrettyPrint json={data} />}\r\n+      {error && <Text>Error: {error.message}</Text>}\r\n     </>\r\n   );\r\n };\r\n \r\n-\r\n-export default SimpleComponent;\n+export default SimpleComponent;\r\n"
                },
                {
                    "date": 1708414315930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,12 @@\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n-  const { data, error, isLoading } = useSelector(selectPipeline);\r\n \r\n+  const { data, error, isLoading } = useGetPipelineQuery(pipelineId);\r\n+\r\n+\r\n   const handleClick = (pipelineId) => {\r\n     dispatch(fetchPipeline(pipelineId));\r\n   };\r\n \r\n@@ -32,5 +34,5 @@\n     </>\r\n   );\r\n };\r\n \r\n-export default SimpleComponent;\n\\ No newline at end of file\n+export default SimpleComponent;\r\n"
                },
                {
                    "date": 1708414367525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import React, { useEffect } from 'react';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n-import { fetchPipeline, selectPipeline } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { useGetPipelineQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon, useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n \r\n-  const { data, error, isLoading } = useGetPipelineQuery(pipelineId);\r\n+  const { data, error, isLoading } = useGetPipelineQuery(0);\r\n \r\n \r\n   const handleClick = (pipelineId) => {\r\n     dispatch(fetchPipeline(pipelineId));\r\n"
                },
                {
                    "date": 1708414408300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useEffect } from 'react';\r\n+import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n import { useGetPipelineQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n import { Button, Icon, useTheme } from '@rneui/themed';\r\n \r\n"
                },
                {
                    "date": 1708414450193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n \r\n-  const { data, error, isLoading } = useGetPipelineQuery(0);\r\n+  const [fetchPipeline,{ data, error, isLoading ] = useGetPipelineQuery(0);\r\n \r\n \r\n   const handleClick = (pipelineId) => {\r\n     dispatch(fetchPipeline(pipelineId));\r\n"
                },
                {
                    "date": 1708414482833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n const SimpleComponent = () => {\r\n   const dispatch = useDispatch();\r\n \r\n-  const [fetchPipeline,{ data, error, isLoading ] = useGetPipelineQuery(0);\r\n+  const [fetchPipeline,{ data, error, isLoading} ] = useGetPipelineQuery(0);\r\n \r\n \r\n   const handleClick = (pipelineId) => {\r\n     dispatch(fetchPipeline(pipelineId));\r\n"
                },
                {
                    "date": 1708414511521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n       ))}\r\n-      {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n+      {/* {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n       {data && <PrettyPrint json={data} />}\r\n-      {error && <Text>Error: {error.message}</Text>}\r\n+      {error && <Text>Error: {error.message}</Text>} */}\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1708414623661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,49 @@\n-import React, { useEffect } from 'react';\r\n-import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n+import React, { useState } from 'react';\r\n+import { View, Text, StyleSheet, Linking, FlatList ,ActivityIndicator} from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n-import { useGetPipelineQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n-import { Button, Icon, useTheme } from '@rneui/themed';\r\n+import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { Button, Icon,useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n-  const dispatch = useDispatch();\r\n \r\n-  const [fetchPipeline,{ data, error, isLoading} ] = useGetPipelineQuery(0);\r\n+  const [pipelineId, setPipelineId] = useState(null);\r\n \r\n+ \r\n+  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n \r\n-  const handleClick = (pipelineId) => {\r\n-    dispatch(fetchPipeline(pipelineId));\r\n+  const handleClick = async (pipelineId) => {\r\n+    try {\r\n+      setPipelineId(pipelineId);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Failed to fetch pipeline: ', error);\r\n+    }\r\n   };\r\n \r\n-  const PrettyPrint = ({ json }) => (\r\n+\r\n+  const PrettyPrint = ({ json }: { json: any }) => (\r\n     <div style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\r\n       {JSON.stringify(json, null, 2)}\r\n     </div>\r\n-  );\r\n-\r\n+  )\r\n   return (\r\n     <>\r\n+\r\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n+        \r\n       ))}\r\n-      {/* {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n-      {data && <PrettyPrint json={data} />}\r\n-      {error && <Text>Error: {error.message}</Text>} */}\r\n+            {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n+\r\n+          {isSuccess && salam}\r\n+\r\n     </>\r\n   );\r\n };\r\n \r\n-export default SimpleComponent;\r\n+  \r\n+  export default SimpleComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708414646572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,11 @@\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n  \r\n-  const { data, error, isError, isSuccess, refetch } = useGetQuery(pipelineId);\r\n+    const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n \r\n+\r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n \r\n"
                },
                {
                    "date": 1708416064425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,26 @@\n import React, { useState } from 'react';\r\n-import { View, Text, StyleSheet, Linking, FlatList ,ActivityIndicator} from 'react-native';\r\n+import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n-import { useGetQuery } from '../reduxApi/apiPipeline'; // Adjust import path\r\n-import { Button, Icon,useTheme } from '@rneui/themed';\r\n+import { useGetQuery,apiPipeline } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { Button, Icon, useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n \r\n const SimpleComponent = () => {\r\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n- \r\n-    const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n+  // const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n+  const {\r\n+    data,\r\n+    error,\r\n+    isLoading,\r\n+    isError,\r\n+    isSuccess,\r\n+    refetch,\r\n+  }  = apiPipeline.endpoints.getPipeline.useQuery(pipelineId);\r\n \r\n-\r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n \r\n@@ -22,29 +28,22 @@\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n   };\r\n \r\n-\r\n-  const PrettyPrint = ({ json }: { json: any }) => (\r\n-    <div style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\r\n-      {JSON.stringify(json, null, 2)}\r\n-    </div>\r\n-  )\r\n   return (\r\n     <>\r\n-\r\n       {Object.entries(PipelineIds).map(([key, value]) => (\r\n         <Button key={key} onPress={() => handleClick(value)}>\r\n           {key}\r\n         </Button>\r\n-        \r\n+\r\n       ))}\r\n-            {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n+      {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n \r\n-          {isSuccess && salam}\r\n+      {isSuccess && salam}\r\n \r\n     </>\r\n   );\r\n };\r\n\\ No newline at end of file\n \r\n-  \r\n-  export default SimpleComponent;\n+\r\n+export default SimpleComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708416256963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,11 @@\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n+      await refetch(pipelineId);\r\n \r\n+\r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1708416571327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n-      await refetch(pipelineId);\r\n+       refetch();\r\n \r\n \r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n"
                },
                {
                    "date": 1708416619517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,17 @@\n const SimpleComponent = () => {\r\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n-  // const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n+   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n   const {\r\n-    data,\r\n-    error,\r\n-    isLoading,\r\n-    isError,\r\n-    isSuccess,\r\n-    refetch,\r\n-  }  = apiPipeline.endpoints.getPipeline.useQuery(pipelineId);\r\n+  //   data,\r\n+  //   error,\r\n+  //   isLoading,\r\n+  //   isError,\r\n+  //   isSuccess,\r\n+  //   refetch,\r\n+  // }  = apiPipeline.endpoints.getPipeline.useQuery(pipelineId);\r\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n"
                },
                {
                    "date": 1708416626166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n    const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n-  const {\r\n+  //const {\r\n   //   data,\r\n   //   error,\r\n   //   isLoading,\r\n   //   isError,\r\n"
                },
                {
                    "date": 1708416983141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,17 @@\n const SimpleComponent = () => {\r\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n-   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId);\r\n+   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId\r\n+    , {\r\n+      selectFromResult: ({ data, isLoading, isError, error }) => ({\r\n+        data,\r\n+        isLoading,\r\n+        isError,\r\n+        error,\r\n+      }),\r\n+    })\r\n   //const {\r\n   //   data,\r\n   //   error,\r\n   //   isLoading,\r\n"
                },
                {
                    "date": 1708417018817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \r\n   const handleClick = async (pipelineId) => {\r\n     try {\r\n       setPipelineId(pipelineId);\r\n-       refetch();\r\n+       //refetch();\r\n \r\n \r\n     } catch (error) {\r\n       console.error('Failed to fetch pipeline: ', error);\r\n"
                },
                {
                    "date": 1708417259925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       ))}\r\n       {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n \r\n       {isSuccess && salam}\r\n-\r\n+      isLoading= {isLoading}\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1708417291511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,9 @@\n const SimpleComponent = () => {\r\n \r\n   const [pipelineId, setPipelineId] = useState(null);\r\n \r\n-   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId\r\n-    , {\r\n-      selectFromResult: ({ data, isLoading, isError, error }) => ({\r\n-        data,\r\n-        isLoading,\r\n-        isError,\r\n-        error,\r\n-      }),\r\n-    })\r\n+   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId)\r\n   //const {\r\n   //   data,\r\n   //   error,\r\n   //   isLoading,\r\n"
                },
                {
                    "date": 1708417994178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,29 @@\n-import React, { useState } from 'react';\r\n-import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n-import { useSelector, useDispatch } from 'react-redux';\r\n-import { useGetQuery,apiPipeline } from '../reduxApi/apiPipeline'; // Adjust import path\r\n-import { Button, Icon, useTheme } from '@rneui/themed';\r\n+// import React, { useState } from 'react';\r\n+// import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n+// import { useSelector, useDispatch } from 'react-redux';\r\n+// import { useGetQuery,apiPipeline } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+// import { Button, Icon, useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n+import React from 'react';\r\n+import { Button, Text, View } from 'react-native';\r\n+import { useFetchPipelineQuery } from '../reduxApi/apiPipeline';\r\n \r\n-const SimpleComponent = () => {\r\n+const PipelineComponent = ({ id }) => {\r\n+  const { data, error, isLoading } = useFetchPipelineQuery(id);\r\n \r\n-  const [pipelineId, setPipelineId] = useState(null);\r\n-\r\n-   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId)\r\n-  //const {\r\n-  //   data,\r\n-  //   error,\r\n-  //   isLoading,\r\n-  //   isError,\r\n-  //   isSuccess,\r\n-  //   refetch,\r\n-  // }  = apiPipeline.endpoints.getPipeline.useQuery(pipelineId);\r\n-\r\n-  const handleClick = async (pipelineId) => {\r\n-    try {\r\n-      setPipelineId(pipelineId);\r\n-       //refetch();\r\n-\r\n-\r\n-    } catch (error) {\r\n-      console.error('Failed to fetch pipeline: ', error);\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n-    <>\r\n-      {Object.entries(PipelineIds).map(([key, value]) => (\r\n-        <Button key={key} onPress={() => handleClick(value)}>\r\n-          {key}\r\n-        </Button>\r\n-\r\n-      ))}\r\n\\ No newline at end of file\n-      {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n-\r\n-      {isSuccess && salam}\r\n-      isLoading= {isLoading}\r\n-    </>\r\n+    <View>\r\n+      <Button\r\n+        title=\"Fetch Pipeline\"\r\n+        onPress={() => {}}\r\n+        disabled={isLoading}\r\n+      />\r\n+      {error && <Text>Error: {error.message}</Text>}\r\n+      {isLoading && <Text>Loading...</Text>}\r\n+      {data && <Text>Result: {JSON.stringify(data)}</Text>}\r\n+    </View>\r\n   );\r\n };\r\n \r\n-\r\n-export default SimpleComponent;\n+export default PipelineComponent;\r\n"
                },
                {
                    "date": 1708418008767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { Button, Text, View } from 'react-native';\r\n import { useFetchPipelineQuery } from '../reduxApi/apiPipeline';\r\n \r\n const PipelineComponent = ({ id }) => {\r\n-  const { data, error, isLoading } = useFetchPipelineQuery(id);\r\n+  const { data, error, isLoading } = useGetPipelineQuery(id);\r\n \r\n   return (\r\n     <View>\r\n       <Button\r\n"
                },
                {
                    "date": 1708418024132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import React from 'react';\r\n import { Button, Text, View } from 'react-native';\r\n import { useFetchPipelineQuery } from '../reduxApi/apiPipeline';\r\n \r\n-const PipelineComponent = ({ id }) => {\r\n+const SimpleComponent = ({ id }) => {\r\n   const { data, error, isLoading } = useGetPipelineQuery(id);\r\n \r\n   return (\r\n     <View>\r\n@@ -25,5 +25,5 @@\n     </View>\r\n   );\r\n };\r\n \r\n-export default PipelineComponent;\r\n+export default SimpleComponent;\r\n"
                },
                {
                    "date": 1708418055629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n import React from 'react';\r\n import { Button, Text, View } from 'react-native';\r\n-import { useFetchPipelineQuery } from '../reduxApi/apiPipeline';\r\n+import { useGetPipelineQuery } from '../reduxApi/apiPipeline';\r\n \r\n const SimpleComponent = ({ id }) => {\r\n   const { data, error, isLoading } = useGetPipelineQuery(id);\r\n \r\n"
                },
                {
                    "date": 1708424825342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,51 @@\n-// import React, { useState } from 'react';\r\n-// import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n-// import { useSelector, useDispatch } from 'react-redux';\r\n-// import { useGetQuery,apiPipeline } from '../reduxApi/apiPipeline'; // Adjust import path\r\n-// import { Button, Icon, useTheme } from '@rneui/themed';\r\n+import React, { useState } from 'react';\r\n+import { View, Text, StyleSheet, Linking, FlatList, ActivityIndicator } from 'react-native';\r\n+import { useSelector, useDispatch } from 'react-redux';\r\n+import { useGetQuery,apiPipeline } from '../reduxApi/apiPipeline'; // Adjust import path\r\n+import { Button, Icon, useTheme } from '@rneui/themed';\r\n \r\n import { PipelineIds } from '../entity/pipelines.dto';\r\n-import React from 'react';\r\n-import { Button, Text, View } from 'react-native';\r\n-import { useGetPipelineQuery } from '../reduxApi/apiPipeline';\r\n \r\n-const SimpleComponent = ({ id }) => {\r\n-  const { data, error, isLoading } = useGetPipelineQuery(id);\r\n+const SimpleComponent = () => {\r\n \r\n+  const [pipelineId, setPipelineId] = useState(null);\r\n+\r\n+   const { data, error, isError, isSuccess, isLoading, refetch } = useGetQuery(pipelineId)\r\n+  //const {\r\n+  //   data,\r\n+  //   error,\r\n+  //   isLoading,\r\n+  //   isError,\r\n+  //   isSuccess,\r\n+  //   refetch,\r\n+  // }  = apiPipeline.endpoints.getPipeline.useQuery(pipelineId);\r\n+\r\n+  const handleClick = async (pipelineId) => {\r\n+    try {\r\n+      setPipelineId(pipelineId);\r\n+       //refetch();\r\n+\r\n+\r\n+    } catch (error) {\r\n+      console.error('Failed to fetch pipeline: ', error);\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n-    <View>\r\n-      <Button\r\n-        title=\"Fetch Pipeline\"\r\n-        onPress={() => {}}\r\n-        disabled={isLoading}\r\n-      />\r\n-      {error && <Text>Error: {error.message}</Text>}\r\n-      {isLoading && <Text>Loading...</Text>}\r\n-      {data && <Text>Result: {JSON.stringify(data)}</Text>}\r\n-    </View>\r\n+    <>\r\n+      {Object.entries(PipelineIds).map(([key, value]) => (\r\n+        <Button key={key} onPress={() => handleClick(value)}>\r\n+          {key}\r\n+        </Button>\r\n+\r\n+      ))}\r\n+      {isLoading && <ActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n+\r\n+      {isSuccess && salam}\r\n+      isLoading= {isLoading}\r\n+    </>\r\n   );\r\n };\r\n \r\n-export default SimpleComponent;\r\n+\r\n+export default SimpleComponent;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1708316356242,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useAddItemMutation } from './api2';\r\nimport { addItem } from './sliceB';\r\nimport { Card, ListItem, Divider, useTheme, Button ,Icon} from '@rneui/themed';\r\nconst SimpleComponent = () => {\r\n  const dispatch = useDispatch();\r\n  const [addItemApi, { isLoading }] = useAddItemMutation();\r\n\r\n  const handleClick = async () => {\r\n    const newItem = { /* your new item data here */ };\r\n    try {\r\n      const result = await addItemApi(newItem).unwrap();\r\n      dispatch(addItem(result));\r\n    } catch (error) {\r\n      console.error('Failed to add item: ', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n        <Icon\r\n            name=\"add-shopping-cart\"\r\n            type=\"ionicon\"\r\n            onPress={() => handleClick()}\r\n        />\r\n    </>\r\n);\r\n\r\n};\r\n\r\nexport default SimpleComponent;\r\n"
        }
    ]
}