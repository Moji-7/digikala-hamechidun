{
    "sourceFile": "components/forms/PipelinesButton.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1711275537853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711275609569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,24 +6,24 @@\n import { PipelineDetail } from '../entity/pipelines.dto';\r\n \r\n \r\n   interface PipelinesButtonProps {\r\n-    pipelineDetail: PipelineDetail;\r\n+    pipelineStatus: any;\r\n     handleCallPipeLine: (e: any, integer: number) => void;\r\n     loadingStates: number[];\r\n     getButtonColor: (integer: number) => string;\r\n   }\r\n   \r\n   const PipelinesButton: React.FC<PipelinesButtonProps> = ({\r\n-    pipelineDetail,\r\n+    pipelineStatus,\r\n     handleCallPipeLine,\r\n     loadingStates,\r\n     getButtonColor,\r\n   }) => {\r\n     const { theme } = useTheme();\r\n   \r\n     // Assuming you have defined 'integer' somewhere\r\n-    const integer = pipelineDetail.pipelineId; // Replace with your actual value\r\n+    const integer = pipelineStatus.pipelineId; // Replace with your actual value\r\n   \r\n     return (\r\n       <View style={styles.buttonItem}>\r\n         <Button\r\n"
                },
                {
                    "date": 1711276405129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     return (\r\n       <View style={styles.buttonItem}>\r\n         <Button\r\n           onPress={(e) => handleCallPipeLine(e, integer)}\r\n-          disabled={loadingStates.includes(integer)}\r\n+          disabled={loadingStates.includes(integer) || pipelineStatus.status === 'Success'}\r\n           title={`Run Pid ${integer}`}\r\n           color={getButtonColor(integer)}\r\n         />\r\n       {loadingStates.includes(integer) && (\r\n"
                },
                {
                    "date": 1711276436090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     return (\r\n       <View style={styles.buttonItem}>\r\n         <Button\r\n           onPress={(e) => handleCallPipeLine(e, integer)}\r\n-          disabled={loadingStates.includes(integer) || pipelineStatus.status === 'Success'}\r\n+          disabled={loadingStates.includes(integer) || pipelineStatus.status == 'Success'}\r\n           title={`Run Pid ${integer}`}\r\n           color={getButtonColor(integer)}\r\n         />\r\n       {loadingStates.includes(integer) && (\r\n"
                },
                {
                    "date": 1711276449603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n           disabled={loadingStates.includes(integer) || pipelineStatus.status == 'Success'}\r\n           title={`Run Pid ${integer}`}\r\n           color={getButtonColor(integer)}\r\n         />\r\n+        statt{pipelineStatus.status}\r\n       {loadingStates.includes(integer) && (\r\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n       )}\r\n     </View>\r\n"
                },
                {
                    "date": 1711276539802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,13 @@\n     return (\r\n       <View style={styles.buttonItem}>\r\n         <Button\r\n           onPress={(e) => handleCallPipeLine(e, integer)}\r\n-          disabled={loadingStates.includes(integer) || pipelineStatus.status == 'Success'}\r\n+          disabled={loadingStates.includes(integer) || pipelineStatus.lastRunnedStatus == 'Success'}\r\n           title={`Run Pid ${integer}`}\r\n           color={getButtonColor(integer)}\r\n         />\r\n-        statt{pipelineStatus.status}\r\n+        statt{pipelineStatus.lastRunnedStatus}\r\n       {loadingStates.includes(integer) && (\r\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n       )}\r\n     </View>\r\n"
                },
                {
                    "date": 1711276766999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,16 @@\n \r\n \r\n   interface PipelinesButtonProps {\r\n     pipelineStatus: any;\r\n-    handleCallPipeLine: (e: any, integer: number) => void;\r\n+    handleRunPipeLineStatus: (e: any, integer: number) => void;\r\n     loadingStates: number[];\r\n     getButtonColor: (integer: number) => string;\r\n   }\r\n   \r\n   const PipelinesButton: React.FC<PipelinesButtonProps> = ({\r\n     pipelineStatus,\r\n-    handleCallPipeLine,\r\n+    handleRunPipeLineStatus,\r\n     loadingStates,\r\n     getButtonColor,\r\n   }) => {\r\n     const { theme } = useTheme();\r\n@@ -26,9 +26,9 @@\n   \r\n     return (\r\n       <View style={styles.buttonItem}>\r\n         <Button\r\n-          onPress={(e) => handleCallPipeLine(e, integer)}\r\n+          onPress={(e) => handleRunPipeLineStatus(e, integer)}\r\n           disabled={loadingStates.includes(integer) || pipelineStatus.lastRunnedStatus == 'Success'}\r\n           title={`Run Pid ${integer}`}\r\n           color={getButtonColor(integer)}\r\n         />\r\n"
                },
                {
                    "date": 1711277102205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n \r\n   interface PipelinesButtonProps {\r\n     pipelineStatus: any;\r\n-    handleRunPipeLineStatus: (e: any, integer: number) => void;\r\n+    handleRunPipeLineStatus: (e: any, pipelineStatus: any) => void;\r\n     loadingStates: number[];\r\n     getButtonColor: (integer: number) => string;\r\n   }\r\n   \r\n"
                },
                {
                    "date": 1711277253047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,16 @@\n \r\n \r\n   interface PipelinesButtonProps {\r\n     pipelineStatus: any;\r\n-    handleRunPipeLineStatus: (e: any, pipelineStatus: any) => void;\r\n+    handleRunPipeLineStatusProccess: (e: any, pipelineStatus: any) => void;\r\n     loadingStates: number[];\r\n     getButtonColor: (integer: number) => string;\r\n   }\r\n   \r\n   const PipelinesButton: React.FC<PipelinesButtonProps> = ({\r\n     pipelineStatus,\r\n-    handleRunPipeLineStatus,\r\n+    handleRunPipeLineStatusProccess,\r\n     loadingStates,\r\n     getButtonColor,\r\n   }) => {\r\n     const { theme } = useTheme();\r\n@@ -26,9 +26,9 @@\n   \r\n     return (\r\n       <View style={styles.buttonItem}>\r\n         <Button\r\n-          onPress={(e) => handleRunPipeLineStatus(e, integer)}\r\n+          onPress={(e) => handleRunPipeLineStatusProccess(e, integer)}\r\n           disabled={loadingStates.includes(integer) || pipelineStatus.lastRunnedStatus == 'Success'}\r\n           title={`Run Pid ${integer}`}\r\n           color={getButtonColor(integer)}\r\n         />\r\n"
                },
                {
                    "date": 1711372927271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,13 @@\n     const integer = pipelineStatus.pipelineId; // Replace with your actual value\r\n   \r\n     return (\r\n       <View style={styles.buttonItem}>\r\n-        <Button\r\n+        <Button key={pipelineStatus.id}\r\n           onPress={(e) => handleRunPipeLineStatusProccess(e, integer)}\r\n           disabled={loadingStates.includes(integer) || pipelineStatus.lastRunnedStatus == 'Success'}\r\n           title={`Run Pid ${integer}`}\r\n-          color={getButtonColor(integer)}\r\n+          color={getButtonColor(pipelineStatus.id)}\r\n         />\r\n         statt{pipelineStatus.lastRunnedStatus}\r\n       {loadingStates.includes(integer) && (\r\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n"
                },
                {
                    "date": 1711375072911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,39 @@\n // PipelineButton.js\r\n \r\n import React from 'react';\r\n-import { View, Button, ActivityIndicator ,StyleSheet} from 'react-native';\r\n+import { View, Button, ActivityIndicator, StyleSheet } from 'react-native';\r\n import { useTheme } from '@rneui/themed';\r\n import { PipelineDetail } from '../entity/pipelines.dto';\r\n \r\n \r\n-  interface PipelinesButtonProps {\r\n-    pipelineStatus: any;\r\n-    handleRunPipeLineStatusProccess: (e: any, pipelineStatus: any) => void;\r\n-    loadingStates: number[];\r\n-    getButtonColor: (integer: number) => string;\r\n-  }\r\n-  \r\n-  const PipelinesButton: React.FC<PipelinesButtonProps> = ({\r\n-    pipelineStatus,\r\n-    handleRunPipeLineStatusProccess,\r\n-    loadingStates,\r\n-    getButtonColor,\r\n-  }) => {\r\n-    const { theme } = useTheme();\r\n-  \r\n-    // Assuming you have defined 'integer' somewhere\r\n-    const integer = pipelineStatus.pipelineId; // Replace with your actual value\r\n-  \r\n-    return (\r\n-      <View style={styles.buttonItem}>\r\n-        <Button key={pipelineStatus.id}\r\n-          onPress={(e) => handleRunPipeLineStatusProccess(e, integer)}\r\n-          disabled={loadingStates.includes(integer) || pipelineStatus.lastRunnedStatus == 'Success'}\r\n-          title={`Run Pid ${integer}`}\r\n-          color={getButtonColor(pipelineStatus.id)}\r\n-        />\r\n-        statt{pipelineStatus.lastRunnedStatus}\r\n+interface PipelinesButtonProps {\r\n+  pipelineStatusSummery: any;\r\n+  handleRunPipeLineStatusProccess: (e: any, pipelineStatus: any) => void;\r\n+  loadingStates: number[];\r\n+  getButtonColor: (integer: number) => string;\r\n+}\r\n+\r\n+const PipelinesButton: React.FC<PipelinesButtonProps> = ({\r\n+  pipelineStatusSummery,\r\n+  handleRunPipeLineStatusProccess,\r\n+  loadingStates,\r\n+  getButtonColor,\r\n+}) => {\r\n+  const { theme } = useTheme();\r\n+\r\n+  // Assuming you have defined 'integer' somewhere\r\n+  const integer = pipelineStatusSummery.pipelineId; // Replace with your actual value\r\n+\r\n+  return (\r\n+    <View style={styles.buttonItem}>\r\n+      <Button\r\n+        title={`Run Pid ${pipelineStatusSummery.pipelineId}`}\r\n+        onPress={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n+        disabled={loadingStates.includes(integer) || pipelineStatusSummery.lastRunnedStatus == 'Success'}\r\n+        color={getButtonColor(pipelineStatusSummery.id)}\r\n+      />\r\n+      stat({pipelineStatusSummery.lastRunnedStatus})\r\n       {loadingStates.includes(integer) && (\r\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n       )}\r\n     </View>\r\n@@ -44,17 +44,17 @@\n \r\n export default PipelinesButton;\r\n \r\n const styles = StyleSheet.create({\r\n-    container: {\r\n-        flex: 1,\r\n-        padding: 6,\r\n-    },\r\n-    buttonItem: {\r\n-        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n-        padding: 2,\r\n-        marginBottom: 2,\r\n-        borderRadius: 5,\r\n-        borderWidth: 1,\r\n-        borderColor: '#ddd',\r\n-    },\r\n+  container: {\r\n+    flex: 1,\r\n+    padding: 6,\r\n+  },\r\n+  buttonItem: {\r\n+    //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n+    padding: 2,\r\n+    marginBottom: 2,\r\n+    borderRadius: 5,\r\n+    borderWidth: 1,\r\n+    borderColor: '#ddd',\r\n+  },\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1711375121553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     <View style={styles.buttonItem}>\r\n       <Button\r\n         title={`Run Pid ${pipelineStatusSummery.pipelineId}`}\r\n         onPress={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n-        disabled={loadingStates.includes(integer) || pipelineStatusSummery.lastRunnedStatus == 'Success'}\r\n+        disabled={loadingStates.includes(pipelineStatusSummery.id) || pipelineStatusSummery.lastRunnedStatus == 'Success'}\r\n         color={getButtonColor(pipelineStatusSummery.id)}\r\n       />\r\n       stat({pipelineStatusSummery.lastRunnedStatus})\r\n       {loadingStates.includes(integer) && (\r\n"
                },
                {
                    "date": 1711376623415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n       <Button\r\n         title={`Run Pid ${pipelineStatusSummery.pipelineId}`}\r\n         onPress={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n         disabled={loadingStates.includes(pipelineStatusSummery.id) || pipelineStatusSummery.lastRunnedStatus == 'Success'}\r\n-        color={getButtonColor(pipelineStatusSummery.id)}\r\n+        color={getButtonColor(pipelineStatusSummery)}\r\n       />\r\n       stat({pipelineStatusSummery.lastRunnedStatus})\r\n       {loadingStates.includes(integer) && (\r\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n"
                },
                {
                    "date": 1711377050961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n interface PipelinesButtonProps {\r\n   pipelineStatusSummery: any;\r\n   handleRunPipeLineStatusProccess: (e: any, pipelineStatus: any) => void;\r\n   loadingStates: number[];\r\n-  getButtonColor: (integer: number) => string;\r\n+  getButtonColor: (pipelineStatusSummery: any) => string;\r\n }\r\n \r\n const PipelinesButton: React.FC<PipelinesButtonProps> = ({\r\n   pipelineStatusSummery,\r\n"
                },
                {
                    "date": 1711377148981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         onPress={(e) => handleRunPipeLineStatusProccess(e, pipelineStatusSummery)}\r\n         disabled={loadingStates.includes(pipelineStatusSummery.id) || pipelineStatusSummery.lastRunnedStatus == 'Success'}\r\n         color={getButtonColor(pipelineStatusSummery)}\r\n       />\r\n-      stat({pipelineStatusSummery.lastRunnedStatus})\r\n+      ({pipelineStatusSummery.lastRunnedStatus})\r\n       {loadingStates.includes(integer) && (\r\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n       )}\r\n     </View>\r\n"
                }
            ],
            "date": 1711275537853,
            "name": "Commit-0",
            "content": "// PipelineButton.js\r\n\r\nimport React from 'react';\r\nimport { View, Button, ActivityIndicator ,StyleSheet} from 'react-native';\r\nimport { useTheme } from '@rneui/themed';\r\nimport { PipelineDetail } from '../entity/pipelines.dto';\r\n\r\n\r\n  interface PipelinesButtonProps {\r\n    pipelineDetail: PipelineDetail;\r\n    handleCallPipeLine: (e: any, integer: number) => void;\r\n    loadingStates: number[];\r\n    getButtonColor: (integer: number) => string;\r\n  }\r\n  \r\n  const PipelinesButton: React.FC<PipelinesButtonProps> = ({\r\n    pipelineDetail,\r\n    handleCallPipeLine,\r\n    loadingStates,\r\n    getButtonColor,\r\n  }) => {\r\n    const { theme } = useTheme();\r\n  \r\n    // Assuming you have defined 'integer' somewhere\r\n    const integer = pipelineDetail.pipelineId; // Replace with your actual value\r\n  \r\n    return (\r\n      <View style={styles.buttonItem}>\r\n        <Button\r\n          onPress={(e) => handleCallPipeLine(e, integer)}\r\n          disabled={loadingStates.includes(integer)}\r\n          title={`Run Pid ${integer}`}\r\n          color={getButtonColor(integer)}\r\n        />\r\n      {loadingStates.includes(integer) && (\r\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default PipelinesButton;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 6,\r\n    },\r\n    buttonItem: {\r\n        //width: '48%', // Adjust based on GRID_COLUMN_COUNT and desired proportions\r\n        padding: 2,\r\n        marginBottom: 2,\r\n        borderRadius: 5,\r\n        borderWidth: 1,\r\n        borderColor: '#ddd',\r\n    },\r\n});"
        }
    ]
}