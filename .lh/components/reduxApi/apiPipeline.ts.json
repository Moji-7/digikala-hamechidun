{
    "sourceFile": "components/reduxApi/apiPipeline.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1708352828598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708352862301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,49 @@\n \r\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n-import eyeProductsSlice from './eyeProducts.reducer'; // Import your eyeProducts slice\r\n \r\n+export const api = createApi({\r\n+    reducerPath: \"api\",\r\n+    baseQuery: fetchBaseQuery({\r\n+      baseUrl: \"http://localhost:3222/eye/\",\r\n+    }),\r\n+\r\n+    endpoints: (build) => ({\r\n+      getEye: build.query({\r\n+        query: (params) => `eye/?${stringify(params)}`, \r\n+        providesTags: [\"Eye\"],\r\n+        transformResponse: (response) => response.data,\r\n+        refetchOnMountOrArgChange: true, \r\n+      }),\r\n+  \r\n+      submitItems: build.mutation({\r\n+        query: (items) => ({\r\n+          url: \"submitItems\", \r\n+          method: \"POST\", \r\n+          body: items, \r\n+        }),\r\n+        transformResponse: (response) => {\r\n+          // Log the raw response\r\n+          console.log('Raw response: ', response);\r\n+          // If you want to debug, you can add a breakpoint here\r\n+  \r\n+          // Then return the response to let the mutation proceed as normal\r\n+          return response;\r\n+        },\r\n+       // invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n+        transformErrorResponse: (error) => {\r\n+          // You can modify the error object here to suit your needs\r\n+          return { message: error.data.message, status: error.status };\r\n+        },\r\n+  \r\n+      }),\r\n+\r\n+    }),\r\n+  \r\n+  \r\n+    }),\r\n+  });\r\n+  export const {  useSubmitItemsMutation ,useDeleteItemMutation } = api;\r\n+  \r\n+  \r\n+  \r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708353923875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,14 @@\n \r\n export const api = createApi({\r\n     reducerPath: \"api\",\r\n     baseQuery: fetchBaseQuery({\r\n-      baseUrl: \"http://localhost:3222/eye/\",\r\n+      baseUrl: \"http://localhost:3222/pipeline/\",\r\n     }),\r\n \r\n     endpoints: (build) => ({\r\n       getEye: build.query({\r\n-        query: (params) => `eye/?${stringify(params)}`, \r\n+        query: (params) => `pipeline/?${stringify(params)}`, \r\n         providesTags: [\"Eye\"],\r\n         transformResponse: (response) => response.data,\r\n         refetchOnMountOrArgChange: true, \r\n       }),\r\n@@ -24,9 +24,8 @@\n         transformResponse: (response) => {\r\n           // Log the raw response\r\n           console.log('Raw response: ', response);\r\n           // If you want to debug, you can add a breakpoint here\r\n-  \r\n           // Then return the response to let the mutation proceed as normal\r\n           return response;\r\n         },\r\n        // invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n@@ -40,10 +39,10 @@\n     }),\r\n   \r\n   \r\n     }),\r\n-  });\r\n-  export const {  useSubmitItemsMutation ,useDeleteItemMutation } = api;\r\n+\r\n+  export const {  useSubmitItemsMutation } = api;\r\n   \r\n   \r\n   \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708354052495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,19 +8,19 @@\n     }),\r\n \r\n     endpoints: (build) => ({\r\n       getEye: build.query({\r\n-        query: (params) => `pipeline/?${stringify(params)}`, \r\n-        providesTags: [\"Eye\"],\r\n+        query: (params) => `?${stringify(params)}`, \r\n+        providesTags: [\"pipeline\"],\r\n         transformResponse: (response) => response.data,\r\n         refetchOnMountOrArgChange: true, \r\n       }),\r\n   \r\n       submitItems: build.mutation({\r\n-        query: (items) => ({\r\n+        query: (payload) => ({\r\n           url: \"submitItems\", \r\n           method: \"POST\", \r\n-          body: items, \r\n+          body: , \r\n         }),\r\n         transformResponse: (response) => {\r\n           // Log the raw response\r\n           console.log('Raw response: ', response);\r\n"
                },
                {
                    "date": 1708354560373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,23 +7,24 @@\n       baseUrl: \"http://localhost:3222/pipeline/\",\r\n     }),\r\n \r\n     endpoints: (build) => ({\r\n-      getEye: build.query({\r\n-        query: (params) => `?${stringify(params)}`, \r\n-        providesTags: [\"pipeline\"],\r\n-        transformResponse: (response) => response.data,\r\n-        refetchOnMountOrArgChange: true, \r\n-      }),\r\n-  \r\n+        getAll: build.query({\r\n+            query: () => \"all\",\r\n+            transformResponse: (response) => response.data,\r\n+          }),\r\n+      \r\n+          getPipeline: build.query({\r\n+            query: (pipelineId) => `pipeline/${pipelineId}`,\r\n+            transformResponse: (response) => response.data,\r\n+          }),\r\n       submitItems: build.mutation({\r\n         query: (payload) => ({\r\n           url: \"submitItems\", \r\n           method: \"POST\", \r\n           body: , \r\n         }),\r\n         transformResponse: (response) => {\r\n-          // Log the raw response\r\n           console.log('Raw response: ', response);\r\n           // If you want to debug, you can add a breakpoint here\r\n           // Then return the response to let the mutation proceed as normal\r\n           return response;\r\n@@ -32,14 +33,10 @@\n         transformErrorResponse: (error) => {\r\n           // You can modify the error object here to suit your needs\r\n           return { message: error.data.message, status: error.status };\r\n         },\r\n-  \r\n       }),\r\n-\r\n     }),\r\n-  \r\n-  \r\n     }),\r\n \r\n   export const {  useSubmitItemsMutation } = api;\r\n   \r\n"
                },
                {
                    "date": 1708354719284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,29 @@\n \r\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n \r\n-export const api = createApi({\r\n+export const apiPipelines = createApi({\r\n     reducerPath: \"api\",\r\n     baseQuery: fetchBaseQuery({\r\n       baseUrl: \"http://localhost:3222/pipeline/\",\r\n     }),\r\n \r\n     endpoints: (build) => ({\r\n         getAll: build.query({\r\n-            query: () => \"all\",\r\n-            transformResponse: (response) => response.data,\r\n+            query: () => \"pipelines\", // Assuming the endpoint URL is just \"pipelines\"\r\n+            providesTags: [\"Pipelines\"], // Invalidate \"Pipelines\" tag on success\r\n+            transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n           }),\r\n       \r\n-          getPipeline: build.query({\r\n-            query: (pipelineId) => `pipeline/${pipelineId}`,\r\n-            transformResponse: (response) => response.data,\r\n+          get: build.query({\r\n+            query: (pipelineId) => `pipelines/${pipelineId}`,\r\n+            providesTags: (result, error) =>\r\n+              error ? [] : [\"Pipelines\", result.id ? { type: \"Pipeline\", id: result.id }] // Invalidate both tags\r\n           }),\r\n-      submitItems: build.mutation({\r\n-        query: (payload) => ({\r\n-          url: \"submitItems\", \r\n-          method: \"POST\", \r\n-          body: , \r\n-        }),\r\n-        transformResponse: (response) => {\r\n-          console.log('Raw response: ', response);\r\n-          // If you want to debug, you can add a breakpoint here\r\n-          // Then return the response to let the mutation proceed as normal\r\n-          return response;\r\n-        },\r\n-       // invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n-        transformErrorResponse: (error) => {\r\n-          // You can modify the error object here to suit your needs\r\n-          return { message: error.data.message, status: error.status };\r\n-        },\r\n-      }),\r\n     }),\r\n-    }),\r\n+    })\r\n \r\n-  export const {  useSubmitItemsMutation } = api;\r\n+    export const { useGetAllQuery, useGetQuery } = apiPipelines;\r\n   \r\n   \r\n   \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708354762799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \r\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n \r\n-export const apiPipelines = createApi({\r\n+export const apiPipeline = createApi({\r\n     reducerPath: \"api\",\r\n     baseQuery: fetchBaseQuery({\r\n       baseUrl: \"http://localhost:3222/pipeline/\",\r\n     }),\r\n@@ -21,9 +21,9 @@\n           }),\r\n     }),\r\n     })\r\n \r\n-    export const { useGetAllQuery, useGetQuery } = apiPipelines;\r\n+    export const { useGetAllQuery, useGetQuery } = apiPipeline;\r\n   \r\n   \r\n   \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708355948886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n       \r\n           get: build.query({\r\n             query: (pipelineId) => `pipelines/${pipelineId}`,\r\n             providesTags: (result, error) =>\r\n-              error ? [] : [\"Pipelines\", result.id ? { type: \"Pipeline\", id: result.id }] // Invalidate both tags\r\n+              error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n           }),\r\n     }),\r\n     })\r\n \r\n"
                },
                {
                    "date": 1708403120868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+\r\n+import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n+\r\n+export const apiPipeline = createApi({\r\n+    reducerPath: \"apiPipeline\",\r\n+    baseQuery: fetchBaseQuery({\r\n+      baseUrl: \"http://localhost:3222/pipeline/\",\r\n+    }),\r\n+\r\n+    endpoints: (build) => ({\r\n+        getAll: build.query({\r\n+            query: () => \"pipelines\", // Assuming the endpoint URL is just \"pipelines\"\r\n+            providesTags: [\"Pipelines\"], // Invalidate \"Pipelines\" tag on success\r\n+            transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n+          }),\r\n+      \r\n+          get: build.query({\r\n+            query: (pipelineId) => `pipelines/${pipelineId}`,\r\n+            providesTags: (result, error) =>\r\n+              error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n+          }),\r\n+    }),\r\n+    })\r\n+\r\n+    export const { useGetAllQuery, useGetQuery } = apiPipeline;\r\n+  \r\n+  \r\n+  \r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708404786919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n             transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n           }),\r\n       \r\n           get: build.query({\r\n-            query: (pipelineId) => `pipelines/${pipelineId}`,\r\n+            query: (pipelineId) => `${pipelineId}`,\r\n             providesTags: (result, error) =>\r\n               error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n           }),\r\n     }),\r\n@@ -25,34 +25,5 @@\n     export const { useGetAllQuery, useGetQuery } = apiPipeline;\r\n   \r\n   \r\n   \r\n-  \n-\r\n-import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n-\r\n-export const apiPipeline = createApi({\r\n-    reducerPath: \"api\",\r\n-    baseQuery: fetchBaseQuery({\r\n-      baseUrl: \"http://localhost:3222/pipeline/\",\r\n-    }),\r\n-\r\n-    endpoints: (build) => ({\r\n-        getAll: build.query({\r\n-            query: () => \"pipelines\", // Assuming the endpoint URL is just \"pipelines\"\r\n-            providesTags: [\"Pipelines\"], // Invalidate \"Pipelines\" tag on success\r\n-            transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n-          }),\r\n-      \r\n-          get: build.query({\r\n-            query: (pipelineId) => `pipelines/${pipelineId}`,\r\n-            providesTags: (result, error) =>\r\n-              error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n-          }),\r\n-    }),\r\n-    })\r\n-\r\n-    export const { useGetAllQuery, useGetQuery } = apiPipeline;\r\n-  \r\n-  \r\n-  \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708414258720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,19 +7,11 @@\n       baseUrl: \"http://localhost:3222/pipeline/\",\r\n     }),\r\n \r\n     endpoints: (build) => ({\r\n-        getAll: build.query({\r\n-            query: () => \"pipelines\", // Assuming the endpoint URL is just \"pipelines\"\r\n-            providesTags: [\"Pipelines\"], // Invalidate \"Pipelines\" tag on success\r\n-            transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n-          }),\r\n-      \r\n-          get: build.query({\r\n-            query: (pipelineId) => `${pipelineId}`,\r\n-            providesTags: (result, error) =>\r\n-              error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n-          }),\r\n+            getPipeline: builder.query({\r\n+              query: (pipelineId) => `${pipelineId}`,\r\n+\r\n     }),\r\n     })\r\n \r\n     export const { useGetAllQuery, useGetQuery } = apiPipeline;\r\n"
                },
                {
                    "date": 1708414283945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,15 +7,26 @@\n       baseUrl: \"http://localhost:3222/pipeline/\",\r\n     }),\r\n \r\n     endpoints: (build) => ({\r\n-            getPipeline: builder.query({\r\n-              query: (pipelineId) => `${pipelineId}`,\r\n-\r\n+        getAll: build.query({\r\n+            query: () => \"pipelines\", // Assuming the endpoint URL is just \"pipelines\"\r\n+            providesTags: [\"Pipelines\"], // Invalidate \"Pipelines\" tag on success\r\n+            transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n+          }),\r\n+      \r\n+          get: build.query({\r\n+            query: (pipelineId) => `${pipelineId}`,\r\n+            providesTags: (result, error) =>\r\n+              error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n+          }),\r\n+          getPipeline: build.query({\r\n+            query: (pipelineId) => `${pipelineId}`,\r\n+          }),\r\n     }),\r\n     })\r\n \r\n-    export const { useGetAllQuery, useGetQuery } = apiPipeline;\r\n+    export const { useGetAllQuery, useGetQuery ,useGetPipelineQuery } = apiPipeline;\r\n   \r\n   \r\n   \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708420317279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,21 +12,12 @@\n             query: () => \"pipelines\", // Assuming the endpoint URL is just \"pipelines\"\r\n             providesTags: [\"Pipelines\"], // Invalidate \"Pipelines\" tag on success\r\n             transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n           }),\r\n-      \r\n-          get: build.query({\r\n-            query: (pipelineId) => `${pipelineId}`,\r\n-            providesTags: (result, error) =>\r\n-              error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n-          }),\r\n-          getPipeline: build.query({\r\n-            query: (pipelineId) => `${pipelineId}`,\r\n-          }),\r\n     }),\r\n     })\r\n \r\n-    export const { useGetAllQuery, useGetQuery ,useGetPipelineQuery } = apiPipeline;\r\n+    export const { useGetAllQuery } = apiPipeline;\r\n   \r\n   \r\n   \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708420606003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,21 @@\n             query: () => \"pipelines\", // Assuming the endpoint URL is just \"pipelines\"\r\n             providesTags: [\"Pipelines\"], // Invalidate \"Pipelines\" tag on success\r\n             transformResponse: (response) => response.data as Pipeline[], // Assuming data array\r\n           }),\r\n+      \r\n+          get: build.query({\r\n+            query: (pipelineId) => `${pipelineId}`,\r\n+            providesTags: (result, error) =>\r\n+              error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n+          }),\r\n+          getPipeline: build.query({\r\n+            query: (pipelineId) => `${pipelineId}`,\r\n+          }),\r\n     }),\r\n     })\r\n \r\n-    export const { useGetAllQuery } = apiPipeline;\r\n+    export const { useGetAllQuery, useGetQuery ,useGetPipelineQuery } = apiPipeline;\r\n   \r\n   \r\n   \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708420638896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,15 @@\n             query: (pipelineId) => `${pipelineId}`,\r\n             providesTags: (result, error) =>\r\n               error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n           }),\r\n-          getPipeline: build.query({\r\n+          getPipeline: buil.query({\r\n             query: (pipelineId) => `${pipelineId}`,\r\n           }),\r\n     }),\r\n     })\r\n \r\n-    export const { useGetAllQuery, useGetQuery ,useGetPipelineQuery } = apiPipeline;\r\n+    export const { useGetAllQuery, useGetQuery,useGetPipelineQuery } = apiPipeline;\r\n   \r\n   \r\n   \r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708420644529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n             query: (pipelineId) => `${pipelineId}`,\r\n             providesTags: (result, error) =>\r\n               error ? [] : [\"Pipelines\", result.id] // Invalidate both tags\r\n           }),\r\n-          getPipeline: buil.query({\r\n+          getPipeline: build.query({\r\n             query: (pipelineId) => `${pipelineId}`,\r\n           }),\r\n     }),\r\n     })\r\n"
                },
                {
                    "date": 1708420804468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \r\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n \r\n export const apiPipeline = createApi({\r\n-    reducerPath: \"apiPipeline\",\r\n+    reducerPath: \"pipeline\",\r\n     baseQuery: fetchBaseQuery({\r\n       baseUrl: \"http://localhost:3222/pipeline/\",\r\n     }),\r\n \r\n"
                }
            ],
            "date": 1708352828598,
            "name": "Commit-0",
            "content": "\r\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nimport eyeProductsSlice from './eyeProducts.reducer'; // Import your eyeProducts slice\r\n\r\n"
        }
    ]
}