{
    "sourceFile": "components/reduxApi/middleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1708766439788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708766863929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,9 @@\n import { createSlice } from '@reduxjs/toolkit';\r\n import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n \r\n \r\n-export const tokenSlice = createSlice({\r\n-  name: 'token',\r\n-  initialState: {\r\n-    token: null, // Initialize with null or retrieve from secure storage\r\n-  },\r\n-  reducers: {\r\n-    setToken(state, action) {\r\n-      state.token = action.payload;\r\n-    },\r\n-  },\r\n-});\r\n \r\n-export const { setToken } = tokenSlice.actions;\r\n \r\n export const tokenMiddleware = (store) => (next) => async (action) => {\r\n   if (action.type.startsWith('api/')) {\r\n     try {\r\n"
                },
                {
                    "date": 1708767623141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,33 +4,29 @@\n \r\n \r\n \r\n export const tokenMiddleware = (store) => (next) => async (action) => {\r\n-  if (action.type.startsWith('api/')) {\r\n+\r\n     try {\r\n         const { getToken } = useTokenStorage();\r\n-      const token = await getToken();\r\n+        const token = await getToken();\r\n \r\n-      if (token && action.type !== 'api/invalidateEntries') { // Exclude token invalidation requests\r\n-        const requestUrl = action.payload?.baseQuery?.url;\r\n-        const isLocalhostPostRequest = requestUrl === 'http://localhost:3222' &&\r\n-          action.type.endsWith('/post');\r\n-\r\n-        if (isLocalhostPostRequest) { // Target specific POST requests to localhost:3222\r\n-          action.payload.baseQuery?.headers = {\r\n-            'Authorization': `Bearer ${token}`,\r\n-            // Add other common headers as needed\r\n-          };\r\n-        } else {\r\n-          // Optional handling for other API requests (if applicable)\r\n+        if (action.payload.baseQuery?.url === 'http://localhost:3222' && // Check for specific API address\r\n+            action.payload.method === 'POST') // Check for POST method) { // Target specific POST requests to localhost:3222\r\n+            action.payload.baseQuery?.headers = {\r\n+                'Authorization': `Bearer ${token}`,\r\n+                // Add other common headers as needed\r\n+            };\r\n+        else {\r\n+            // Optional handling for other API requests (if applicable)\r\n         }\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error retrieving token:', error);\r\n-      // Handle errors gracefully, e.g., display user-friendly message\r\n     }\r\n+    catch (error) {\r\n+        console.error('Error retrieving token:', error);\r\n+        // Handle errors gracefully, e.g., display user-friendly message\r\n+    }\r\n \r\n     return next(action);\r\n-  }\r\n+}\r\n \r\n-  return next(action);\r\n-};\r\n+return next(action);\r\n+\r\n"
                },
                {
                    "date": 1708767643550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n \r\n export const tokenMiddleware = (store) => (next) => async (action) => {\r\n \r\n     try {\r\n-        const { getToken } = useTokenStorage();\r\n-        const token = await getToken();\r\n+       // const { getToken } = useTokenStorage();\r\n+        const token =\"ali\"// await getToken();\r\n \r\n         if (action.payload.baseQuery?.url === 'http://localhost:3222' && // Check for specific API address\r\n             action.payload.method === 'POST') // Check for POST method) { // Target specific POST requests to localhost:3222\r\n             action.payload.baseQuery?.headers = {\r\n"
                },
                {
                    "date": 1708767891603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,24 @@\n import { createSlice } from '@reduxjs/toolkit';\r\n import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n \r\n-\r\n-\r\n-\r\n export const tokenMiddleware = (store) => (next) => async (action) => {\r\n-\r\n     try {\r\n-       // const { getToken } = useTokenStorage();\r\n-        const token =\"ali\"// await getToken();\r\n+        // const { getToken } = useTokenStorage();\r\n+        const token = \"ali\"; // await getToken();\r\n \r\n-        if (action.payload.baseQuery?.url === 'http://localhost:3222' && // Check for specific API address\r\n-            action.payload.method === 'POST') // Check for POST method) { // Target specific POST requests to localhost:3222\r\n+        if (action.payload.baseQuery?.url === 'http://localhost:3222' &&\r\n+            action.payload.method === 'POST') {\r\n             action.payload.baseQuery?.headers = {\r\n                 'Authorization': `Bearer ${token}`,\r\n                 // Add other common headers as needed\r\n             };\r\n-        else {\r\n-            // Optional handling for other API requests (if applicable)\r\n+        } else {\r\n+            // Optional: Handle other scenarios if needed\r\n         }\r\n-    }\r\n-    catch (error) {\r\n+    } catch (error) {\r\n         console.error('Error retrieving token:', error);\r\n-        // Handle errors gracefully, e.g., display user-friendly message\r\n     }\r\n \r\n+    // Make sure to return the result of the next middleware/action\r\n     return next(action);\r\n-}\r\n-\r\n-return next(action);\r\n-\r\n+};\r\n"
                },
                {
                    "date": 1708768193392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import { createSlice } from '@reduxjs/toolkit';\r\n-import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n+// import { createSlice } from '@reduxjs/toolkit';\r\n+// import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n \r\n export const tokenMiddleware = (store) => (next) => async (action) => {\r\n     try {\r\n         // const { getToken } = useTokenStorage();\r\n"
                },
                {
                    "date": 1708768549605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,14 @@\n-// import { createSlice } from '@reduxjs/toolkit';\r\n-// import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n+import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n \r\n-export const tokenMiddleware = (store) => (next) => async (action) => {\r\n-    try {\r\n-        // const { getToken } = useTokenStorage();\r\n-        const token = \"ali\"; // await getToken();\r\n-\r\n-        if (action.payload.baseQuery?.url === 'http://localhost:3222' &&\r\n-            action.payload.method === 'POST') {\r\n-            action.payload.baseQuery?.headers = {\r\n-                'Authorization': `Bearer ${token}`,\r\n-                // Add other common headers as needed\r\n-            };\r\n-        } else {\r\n-            // Optional: Handle other scenarios if needed\r\n-        }\r\n-    } catch (error) {\r\n-        console.error('Error retrieving token:', error);\r\n+const authMiddleware = (store) => (next) => (action) => {\r\n+  if (action.type.startsWith('api1/') || action.type.startsWith('api2/')) {\r\n+    if (action.type.endsWith('/pending') && action.meta.method === 'POST') {\r\n+      action.meta.headers = {\r\n+        ...action.meta.headers,\r\n+        Authorization: `Bearer ${store.getState().auth.token}`, // Assuming token is in auth state\r\n+      };\r\n     }\r\n+  }\r\n \r\n-    // Make sure to return the result of the next middleware/action\r\n-    return next(action);\r\n-};\r\n+  return next(action);\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1708766439788,
            "name": "Commit-0",
            "content": "import { createSlice } from '@reduxjs/toolkit';\r\nimport useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n\r\n\r\nexport const tokenSlice = createSlice({\r\n  name: 'token',\r\n  initialState: {\r\n    token: null, // Initialize with null or retrieve from secure storage\r\n  },\r\n  reducers: {\r\n    setToken(state, action) {\r\n      state.token = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setToken } = tokenSlice.actions;\r\n\r\nexport const tokenMiddleware = (store) => (next) => async (action) => {\r\n  if (action.type.startsWith('api/')) {\r\n    try {\r\n        const { getToken } = useTokenStorage();\r\n      const token = await getToken();\r\n\r\n      if (token && action.type !== 'api/invalidateEntries') { // Exclude token invalidation requests\r\n        const requestUrl = action.payload?.baseQuery?.url;\r\n        const isLocalhostPostRequest = requestUrl === 'http://localhost:3222' &&\r\n          action.type.endsWith('/post');\r\n\r\n        if (isLocalhostPostRequest) { // Target specific POST requests to localhost:3222\r\n          action.payload.baseQuery?.headers = {\r\n            'Authorization': `Bearer ${token}`,\r\n            // Add other common headers as needed\r\n          };\r\n        } else {\r\n          // Optional handling for other API requests (if applicable)\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error retrieving token:', error);\r\n      // Handle errors gracefully, e.g., display user-friendly message\r\n    }\r\n\r\n    return next(action);\r\n  }\r\n\r\n  return next(action);\r\n};\r\n"
        }
    ]
}