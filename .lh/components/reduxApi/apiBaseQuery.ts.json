{
    "sourceFile": "components/reduxApi/apiBaseQuery.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1708768880464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708769033103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { BaseQueryFn } from \"@reduxjs/toolkit/query\";\r\n+import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n     const obj = {\r\n       auth: {\r\n"
                },
                {
                    "date": 1708769126618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,17 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n+import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n-    const obj = {\r\n-      auth: {\r\n-        access_token: 'your_access_token_here'\r\n-      }\r\n-    };\r\n-    const token = obj.auth?.access_token;\r\n+    // const obj = {\r\n+    //   auth: {\r\n+    //     access_token: 'your_access_token_here'\r\n+    //   }\r\n+    // };\r\n+    // const token = obj.auth?.access_token;\r\n   \r\n-    // const { getToken } = useTokenStorage();\r\n-    // const token = await getToken();\r\n+    const { getToken } = useTokenStorage();\r\n+    const token = await getToken();\r\n     \r\n   \r\n     let headers = {};\r\n     if (token) {\r\n"
                },
                {
                    "date": 1708769397733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,16 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n-\r\n+const { getToken } = useTokenStorage();\r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n     // const obj = {\r\n     //   auth: {\r\n     //     access_token: 'your_access_token_here'\r\n     //   }\r\n     // };\r\n     // const token = obj.auth?.access_token;\r\n-  \r\n-    const { getToken } = useTokenStorage();\r\n+\r\n     const token = await getToken();\r\n-    \r\n-  \r\n     let headers = {};\r\n     if (token) {\r\n       headers = {\r\n         authorization: `Bearer ${token}`,\r\n"
                },
                {
                    "date": 1708769462716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,24 @@\n-import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n-import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n-const { getToken } = useTokenStorage();\r\n+import React from 'react';\r\n+import { BaseQueryFn, fetchBaseQuery } from '@reduxjs/toolkit/query';\r\n+import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n+\r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n-    // const obj = {\r\n-    //   auth: {\r\n-    //     access_token: 'your_access_token_here'\r\n-    //   }\r\n-    // };\r\n-    // const token = obj.auth?.access_token;\r\n+  const { getToken } = useTokenStorage();\r\n+  const token = await getToken();\r\n \r\n-    const token = await getToken();\r\n-    let headers = {};\r\n-    if (token) {\r\n-      headers = {\r\n-        authorization: `Bearer ${token}`,\r\n-        ...extraOptions?.headers,\r\n-      };\r\n-    }\r\n-  \r\n-    return fetchBaseQuery({\r\n-      baseUrl: 'http://localhost:3222/eye/',\r\n-      prepareHeaders: (headers, { getState }) => {\r\n\\ No newline at end of file\n-        headers.set('authorization', `Bearer ${token}`);\r\n-        return headers;\r\n-      },\r\n-    })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n-  };\r\n-  \n+  let headers = {};\r\n+  if (token) {\r\n+    headers = {\r\n+      authorization: `Bearer ${token}`,\r\n+      ...extraOptions?.headers,\r\n+    };\r\n+  }\r\n+\r\n+  return fetchBaseQuery({\r\n+    baseUrl: 'http://localhost:3222/eye/',\r\n+    prepareHeaders: (headers, { getState }) => {\r\n+      headers.set('authorization', `Bearer ${token}`);\r\n+      return headers;\r\n+    },\r\n+  })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n+};\r\n"
                },
                {
                    "date": 1708769539881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n   const { getToken } = useTokenStorage();\r\n+  debugger;\r\n   const token = await getToken();\r\n \r\n   let headers = {};\r\n   if (token) {\r\n"
                },
                {
                    "date": 1708778805990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,29 @@\n-import React from 'react';\r\n-import { BaseQueryFn, fetchBaseQuery } from '@reduxjs/toolkit/query';\r\n-import useTokenStorage from '../../auth/components/hooks/useTokenStorage';\r\n+import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n+import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n-  const { getToken } = useTokenStorage();\r\n-  debugger;\r\n-  const token = await getToken();\r\n-\r\n-  let headers = {};\r\n-  if (token) {\r\n-    headers = {\r\n-      authorization: `Bearer ${token}`,\r\n-      ...extraOptions?.headers,\r\n+    const obj = {\r\n+      auth: {\r\n+        access_token: 'your_access_token_here'\r\n+      }\r\n     };\r\n-  }\r\n-\r\n-  return fetchBaseQuery({\r\n-    baseUrl: 'http://localhost:3222/eye/',\r\n-    prepareHeaders: (headers, { getState }) => {\r\n-      headers.set('authorization', `Bearer ${token}`);\r\n-      return headers;\r\n-    },\r\n-  })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n-};\r\n+    const token = obj.auth?.access_token;\r\n+    // const { getToken } = useTokenStorage();\r\n+    // const token = await getToken();\r\n+    let headers = {};\r\n+    if (token) {\r\n+      headers = {\r\n+        authorization: `Bearer ${token}`,\r\n+        ...extraOptions?.headers,\r\n+      };\r\n+    }\r\n+  \r\n+    return fetchBaseQuery({\r\n+      baseUrl: 'http://localhost:3222/eye/',\r\n+      prepareHeaders: (headers, { getState }) => {\r\n+        headers.set('authorization', `Bearer ${token}`);\r\n+        return headers;\r\n+      },\r\n+    })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n+  };\r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708779303317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,35 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n-    const obj = {\r\n-      auth: {\r\n-        access_token: 'your_access_token_here'\r\n-      }\r\n-    };\r\n-    const token = obj.auth?.access_token;\r\n-    // const { getToken } = useTokenStorage();\r\n-    // const token = await getToken();\r\n-    let headers = {};\r\n-    if (token) {\r\n-      headers = {\r\n-        authorization: `Bearer ${token}`,\r\n-        ...extraOptions?.headers,\r\n-      };\r\n-    }\r\n+    // const obj = {\r\n+    //   auth: {\r\n+    //     access_token: 'your_access_token_here'\r\n+    //   }\r\n+    // };\r\n+    // const token = obj.auth?.access_token;\r\n+    // // const { getToken } = useTokenStorage();\r\n+    // // const token = await getToken();\r\n+    // let headers = {};\r\n+    // if (token) {\r\n+    //   headers = {\r\n+    //     authorization: `Bearer ${token}`,\r\n+    //     ...extraOptions?.headers,\r\n+    //   };\r\n+    // }\r\n   \r\n     return fetchBaseQuery({\r\n       baseUrl: 'http://localhost:3222/eye/',\r\n-      prepareHeaders: (headers, { getState }) => {\r\n-        headers.set('authorization', `Bearer ${token}`);\r\n-        return headers;\r\n+      prepareHeaders: async (headers, { getState }) => {\r\n+        // get the token from the custom hook\r\n+        const { getToken } = useTokenStorage()\r\n+        const token = await getToken()\r\n+        // if we have a token, set the Authorization header\r\n+        if (token) {\r\n+          headers.set('Authorization', `Bearer ${token}`)\r\n+        }\r\n+        return headers\r\n       },\r\n-    })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n+    })({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n   };\r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708779742051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n-import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n     // const obj = {\r\n     //   auth: {\r\n"
                },
                {
                    "date": 1708780223935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n \r\n-export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n+export const baseQueryWithAuth(getToken): BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n     // const obj = {\r\n     //   auth: {\r\n     //     access_token: 'your_access_token_here'\r\n     //   }\r\n@@ -30,5 +30,8 @@\n         return headers\r\n       },\r\n     })({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n   };\r\n+  \r\n+\r\n+\r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708780244193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,17 @@\n     return fetchBaseQuery({\r\n       baseUrl: 'http://localhost:3222/eye/',\r\n       prepareHeaders: async (headers, { getState }) => {\r\n         // get the token from the custom hook\r\n-        const { getToken } = useTokenStorage()\r\n-        const token = await getToken()\r\n+       // const { getToken } = useTokenStorage()\r\n+       // const token = await getToken()\r\n         // if we have a token, set the Authorization header\r\n+         const obj = {\r\n+      auth: {\r\n+        access_token: 'your_access_token_here'\r\n+      }\r\n+    };\r\n+    const token = obj.auth?.access_token;\r\n         if (token) {\r\n           headers.set('Authorization', `Bearer ${token}`)\r\n         }\r\n         return headers\r\n@@ -33,5 +39,4 @@\n   };\r\n   \r\n \r\n \r\n-  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708780366726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,29 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n+import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n \r\n-export const baseQueryWithAuth(getToken): BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n-    // const obj = {\r\n-    //   auth: {\r\n-    //     access_token: 'your_access_token_here'\r\n-    //   }\r\n-    // };\r\n-    // const token = obj.auth?.access_token;\r\n-    // // const { getToken } = useTokenStorage();\r\n-    // // const token = await getToken();\r\n-    // let headers = {};\r\n-    // if (token) {\r\n-    //   headers = {\r\n-    //     authorization: `Bearer ${token}`,\r\n-    //     ...extraOptions?.headers,\r\n-    //   };\r\n-    // }\r\n-  \r\n-    return fetchBaseQuery({\r\n-      baseUrl: 'http://localhost:3222/eye/',\r\n-      prepareHeaders: async (headers, { getState }) => {\r\n-        // get the token from the custom hook\r\n-       // const { getToken } = useTokenStorage()\r\n-       // const token = await getToken()\r\n-        // if we have a token, set the Authorization header\r\n-         const obj = {\r\n+export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n+    const obj = {\r\n       auth: {\r\n         access_token: 'your_access_token_here'\r\n       }\r\n     };\r\n     const token = obj.auth?.access_token;\r\n-        if (token) {\r\n-          headers.set('Authorization', `Bearer ${token}`)\r\n-        }\r\n-        return headers\r\n+    // const { getToken } = useTokenStorage();\r\n+    // const token = await getToken();\r\n+    let headers = {};\r\n+    if (token) {\r\n+      headers = {\r\n+        authorization: `Bearer ${token}`,\r\n+        ...extraOptions?.headers,\r\n+      };\r\n+    }\r\n+  \r\n+    return fetchBaseQuery({\r\n+      baseUrl: 'http://localhost:3222/eye/',\r\n+      prepareHeaders: (headers, { getState }) => {\r\n+        headers.set('authorization', `Bearer ${token}`);\r\n+        return headers;\r\n       },\r\n-    })({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n+    })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n   };\r\n-  \r\n-\r\n-\r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708780608442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,15 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n \r\n-export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n+export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = \r\n+async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n     const obj = {\r\n       auth: {\r\n         access_token: 'your_access_token_here'\r\n       }\r\n     };\r\n+    const token0 = await useTokenStorage().getToken();\r\n     const token = obj.auth?.access_token;\r\n     // const { getToken } = useTokenStorage();\r\n     // const token = await getToken();\r\n     let headers = {};\r\n"
                },
                {
                    "date": 1708780639141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n       auth: {\r\n         access_token: 'your_access_token_here'\r\n       }\r\n     };\r\n-    const token0 = await useTokenStorage().getToken();\r\n+    //const token0 = await useTokenStorage().getToken();\r\n     const token = obj.auth?.access_token;\r\n     // const { getToken } = useTokenStorage();\r\n     // const token = await getToken();\r\n     let headers = {};\r\n"
                },
                {
                    "date": 1708780704056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n+import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n+\r\n+export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = \r\n+async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n+    const obj = {\r\n+      auth: {\r\n+        access_token: 'your_access_token_here'\r\n+      }\r\n+    };\r\n+    const token0 = await useTokenStorage().getToken();\r\n+    const token = obj.auth?.access_token;\r\n+    // const { getToken } = useTokenStorage();\r\n+    // const token = await getToken();\r\n+    let headers = {};\r\n+    if (token) {\r\n+      headers = {\r\n+        authorization: `Bearer ${token}`,\r\n+        ...extraOptions?.headers,\r\n+      };\r\n+    }\r\n+  \r\n+    return fetchBaseQuery({\r\n+      baseUrl: 'http://localhost:3222/eye/',\r\n+      prepareHeaders: (headers, { getState }) => {\r\n+        headers.set('authorization', `Bearer ${token}`);\r\n+        return headers;\r\n+      },\r\n+    })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n+  };\r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708780912236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n       auth: {\r\n         access_token: 'your_access_token_here'\r\n       }\r\n     };\r\n-    const token0 = await useTokenStorage().getToken();\r\n+   // const token0 = await useTokenStorage().getToken();\r\n     const token = obj.auth?.access_token;\r\n     // const { getToken } = useTokenStorage();\r\n     // const token = await getToken();\r\n     let headers = {};\r\n@@ -27,36 +27,5 @@\n         return headers;\r\n       },\r\n     })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n   };\r\n-  \n-import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n-import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n-\r\n-export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = \r\n-async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n-    const obj = {\r\n-      auth: {\r\n-        access_token: 'your_access_token_here'\r\n-      }\r\n-    };\r\n-    //const token0 = await useTokenStorage().getToken();\r\n-    const token = obj.auth?.access_token;\r\n-    // const { getToken } = useTokenStorage();\r\n-    // const token = await getToken();\r\n-    let headers = {};\r\n-    if (token) {\r\n-      headers = {\r\n-        authorization: `Bearer ${token}`,\r\n-        ...extraOptions?.headers,\r\n-      };\r\n-    }\r\n-  \r\n-    return fetchBaseQuery({\r\n-      baseUrl: 'http://localhost:3222/eye/',\r\n-      prepareHeaders: (headers, { getState }) => {\r\n-        headers.set('authorization', `Bearer ${token}`);\r\n-        return headers;\r\n-      },\r\n-    })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n-  };\r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1708781816430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n+import { useSelector } from \"react-redux\";\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = \r\n async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n     const obj = {\r\n@@ -9,8 +10,10 @@\n       }\r\n     };\r\n    // const token0 = await useTokenStorage().getToken();\r\n     const token = obj.auth?.access_token;\r\n+\r\n+    const token2 = useSelector((state) => state.token.value);\r\n     // const { getToken } = useTokenStorage();\r\n     // const token = await getToken();\r\n     let headers = {};\r\n     if (token) {\r\n@@ -22,9 +25,9 @@\n   \r\n     return fetchBaseQuery({\r\n       baseUrl: 'http://localhost:3222/eye/',\r\n       prepareHeaders: (headers, { getState }) => {\r\n-        headers.set('authorization', `Bearer ${token}`);\r\n+        headers.set('authorization', `Bearer ${token2}`);\r\n         return headers;\r\n       },\r\n     })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n   };\r\n"
                },
                {
                    "date": 1708782047986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n import { BaseQueryFn, fetchBaseQuery } from \"@reduxjs/toolkit/query\";\r\n-import useTokenStorage from \"../../auth/components/hooks/useTokenStorage\";\r\n-import { useSelector } from \"react-redux\";\r\n \r\n export const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = \r\n async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n     const obj = {\r\n@@ -10,10 +8,9 @@\n       }\r\n     };\r\n    // const token0 = await useTokenStorage().getToken();\r\n     const token = obj.auth?.access_token;\r\n-\r\n-    const token2 = useSelector((state) => state.token.value);\r\n+    const token2 =getState().token.value\r\n     // const { getToken } = useTokenStorage();\r\n     // const token = await getToken();\r\n     let headers = {};\r\n     if (token) {\r\n"
                }
            ],
            "date": 1708768880464,
            "name": "Commit-0",
            "content": "import { BaseQueryFn } from \"@reduxjs/toolkit/query\";\r\n\r\nexport const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n    const obj = {\r\n      auth: {\r\n        access_token: 'your_access_token_here'\r\n      }\r\n    };\r\n    const token = obj.auth?.access_token;\r\n  \r\n    // const { getToken } = useTokenStorage();\r\n    // const token = await getToken();\r\n    \r\n  \r\n    let headers = {};\r\n    if (token) {\r\n      headers = {\r\n        authorization: `Bearer ${token}`,\r\n        ...extraOptions?.headers,\r\n      };\r\n    }\r\n  \r\n    return fetchBaseQuery({\r\n      baseUrl: 'http://localhost:3222/eye/',\r\n      prepareHeaders: (headers, { getState }) => {\r\n        headers.set('authorization', `Bearer ${token}`);\r\n        return headers;\r\n      },\r\n    })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n  };\r\n  "
        }
    ]
}