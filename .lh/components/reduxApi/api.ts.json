{
    "sourceFile": "components/reduxApi/api.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1708242472795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708243050119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,19 +33,20 @@\n   // }),\r\n   baseQuery: baseQueryWithAuth,\r\n   endpoints: (build) => ({\r\n     getEye: build.query({\r\n-      query: (params) => `?${params}`,\r\n+      query: (params) => `eye/?${stringify(params)}`, // The URL for the query endpoint\r\n+      providesTags: [\"Eye\"], // Provide the Eye tag for the query data\r\n       transformResponse: (response) => response.data,\r\n     }),\r\n-    \r\n+\r\n     submitItems: build.mutation({\r\n       query: (items) => ({\r\n         url: \"submitItems\", // The URL for the mutation endpoint\r\n         method: \"POST\", // The HTTP method for the mutation request\r\n         body: items, // The payload for the mutation request\r\n       }),\r\n-      invalidatesTags: [\"getEye\"], // Invalidate the getEye query after the mutation succeeds\r\n+      invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n          //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n       },\r\n"
                },
                {
                    "date": 1708243152948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,12 @@\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n          //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n       },\r\n+      transformErrorResponse: (error) => {\r\n+        // You can modify the error object here to suit your needs\r\n+        return { message: error.data.message, status: error.status };\r\n+      },\r\n     }),\r\n \r\n \r\n   }),\r\n"
                },
                {
                    "date": 1708243697470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,10 @@\n     getEye: build.query({\r\n       query: (params) => `eye/?${stringify(params)}`, // The URL for the query endpoint\r\n       providesTags: [\"Eye\"], // Provide the Eye tag for the query data\r\n       transformResponse: (response) => response.data,\r\n+      refetchOnMountOrArgChange: true, // Force a refetch on mount or arg change\r\n+\r\n     }),\r\n \r\n     submitItems: build.mutation({\r\n       query: (items) => ({\r\n"
                },
                {
                    "date": 1708247250591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n+import eyeProductsSlice from './eyeProducts.reducer'; // Import your eyeProducts slice\r\n \r\n \r\n const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n   const obj = {\r\n@@ -50,8 +51,11 @@\n       invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n          //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n+         const dispatch = queryApi.dispatch;\r\n+         dispatch(eyeProductsSlice.actions.addProduct(result.data)); // Assuming addProduct adds data\r\n+       \r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n"
                },
                {
                    "date": 1708248105503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n          //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n          const dispatch = queryApi.dispatch;\r\n-         dispatch(eyeProductsSlice.actions.addProduct(result.data)); // Assuming addProduct adds data\r\n+         dispatch(eyeProductsSlice.actions.addProduct(result)); // Assuming addProduct adds data\r\n        \r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n"
                },
                {
                    "date": 1708248579944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,23 @@\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n-import eyeProductsSlice from './eyeProducts.reducer'; // Import your eyeProducts slice\r\n+import eyeProductsSlice from \"./eyeProducts.reducer\"; // Import your eyeProducts slice\r\n \r\n-\r\n-const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n+const baseQueryWithAuth: BaseQueryFn<\r\n+  string,\r\n+  unknown,\r\n+  unknown,\r\n+  unknown,\r\n+  { auth: AuthHeaderType | null }\r\n+> = async (\r\n+  { url, method, body },\r\n+  { signal, dispatch, getState, extraOptions },\r\n+  endpointDefinition,\r\n+  baseQueryApi\r\n+) => {\r\n   const obj = {\r\n     auth: {\r\n-      access_token: 'your_access_token_here'\r\n-    }\r\n+      access_token: \"your_access_token_here\",\r\n+    },\r\n   };\r\n   const token = obj.auth?.access_token;\r\n   let headers = {};\r\n   if (token) {\r\n@@ -17,17 +27,21 @@\n     };\r\n   }\r\n \r\n   return fetchBaseQuery({\r\n-    baseUrl: 'http://localhost:3222/eye/',\r\n+    baseUrl: \"http://localhost:3222/eye/\",\r\n     prepareHeaders: (headers, { getState }) => {\r\n-      headers.set('authorization', `Bearer ${token}`);\r\n+      headers.set(\"authorization\", `Bearer ${token}`);\r\n       return headers;\r\n     },\r\n-  })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n+  })(\r\n+    { url, method, body, headers },\r\n+    { signal, dispatch, getState, extraOptions },\r\n+    endpointDefinition,\r\n+    baseQueryApi\r\n+  );\r\n };\r\n \r\n-\r\n export const api = createApi({\r\n   reducerPath: \"api\",\r\n   // baseQuery: fetchBaseQuery({\r\n   //   baseUrl: \"http://localhost:3222/eye/\",\r\n@@ -38,9 +52,8 @@\n       query: (params) => `eye/?${stringify(params)}`, // The URL for the query endpoint\r\n       providesTags: [\"Eye\"], // Provide the Eye tag for the query data\r\n       transformResponse: (response) => response.data,\r\n       refetchOnMountOrArgChange: true, // Force a refetch on mount or arg change\r\n-\r\n     }),\r\n \r\n     submitItems: build.mutation({\r\n       query: (items) => ({\r\n@@ -50,22 +63,17 @@\n       }),\r\n       invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n-         //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n-         const dispatch = queryApi.dispatch;\r\n-         dispatch(eyeProductsSlice.actions.addProduct(result)); // Assuming addProduct adds data\r\n-       \r\n+        //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n+        const { dispatch } = queryApi.extraOptions;\r\n+        // Dispatch an action to update the eyeProducts state\r\n+        dispatch(eyeProductsSlice.actions.addProduct(result.data)); // Assuming addProduct adds data\r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n     }),\r\n-\r\n-\r\n   }),\r\n });\r\n export const { useGetEyeQuery, useSubmitItemsMutation } = api;\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1708248642985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n         // Handle any side effects after the mutation succeeds\r\n         //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n         const { dispatch } = queryApi.extraOptions;\r\n         // Dispatch an action to update the eyeProducts state\r\n-        dispatch(eyeProductsSlice.actions.addProduct(result.data)); // Assuming addProduct adds data\r\n+        dispatch(eyeProductsSlice.actions.addProduct(result)); // Assuming addProduct adds data\r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n"
                },
                {
                    "date": 1708248650254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n         // Handle any side effects after the mutation succeeds\r\n         //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n         const { dispatch } = queryApi.extraOptions;\r\n         // Dispatch an action to update the eyeProducts state\r\n-        dispatch(eyeProductsSlice.actions.addProduct(result)); // Assuming addProduct adds data\r\n+        dispatch(eyeProductsSlice.actions.addProduct(\"ali\")); // Assuming addProduct adds data\r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n"
                },
                {
                    "date": 1708248793871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n         // Handle any side effects after the mutation succeeds\r\n         //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n         const { dispatch } = queryApi.extraOptions;\r\n         // Dispatch an action to update the eyeProducts state\r\n-        dispatch(eyeProductsSlice.actions.addProduct(\"ali\")); // Assuming addProduct adds data\r\n+        dispatch(eyeProductsSlice.actions.addEyeProduct(\"ali\")); // Assuming addProduct adds data\r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n"
                },
                {
                    "date": 1708248948269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,13 @@\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n-import eyeProductsSlice from \"./eyeProducts.reducer\"; // Import your eyeProducts slice\r\n+import eyeProductsSlice from './eyeProducts.reducer'; // Import your eyeProducts slice\r\n \r\n-const baseQueryWithAuth: BaseQueryFn<\r\n-  string,\r\n-  unknown,\r\n-  unknown,\r\n-  unknown,\r\n-  { auth: AuthHeaderType | null }\r\n-> = async (\r\n-  { url, method, body },\r\n-  { signal, dispatch, getState, extraOptions },\r\n-  endpointDefinition,\r\n-  baseQueryApi\r\n-) => {\r\n+\r\n+const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n   const obj = {\r\n     auth: {\r\n-      access_token: \"your_access_token_here\",\r\n-    },\r\n+      access_token: 'your_access_token_here'\r\n+    }\r\n   };\r\n   const token = obj.auth?.access_token;\r\n   let headers = {};\r\n   if (token) {\r\n@@ -27,21 +17,17 @@\n     };\r\n   }\r\n \r\n   return fetchBaseQuery({\r\n-    baseUrl: \"http://localhost:3222/eye/\",\r\n+    baseUrl: 'http://localhost:3222/eye/',\r\n     prepareHeaders: (headers, { getState }) => {\r\n-      headers.set(\"authorization\", `Bearer ${token}`);\r\n+      headers.set('authorization', `Bearer ${token}`);\r\n       return headers;\r\n     },\r\n-  })(\r\n-    { url, method, body, headers },\r\n-    { signal, dispatch, getState, extraOptions },\r\n-    endpointDefinition,\r\n-    baseQueryApi\r\n-  );\r\n+  })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n };\r\n \r\n+\r\n export const api = createApi({\r\n   reducerPath: \"api\",\r\n   // baseQuery: fetchBaseQuery({\r\n   //   baseUrl: \"http://localhost:3222/eye/\",\r\n@@ -52,8 +38,9 @@\n       query: (params) => `eye/?${stringify(params)}`, // The URL for the query endpoint\r\n       providesTags: [\"Eye\"], // Provide the Eye tag for the query data\r\n       transformResponse: (response) => response.data,\r\n       refetchOnMountOrArgChange: true, // Force a refetch on mount or arg change\r\n+\r\n     }),\r\n \r\n     submitItems: build.mutation({\r\n       query: (items) => ({\r\n@@ -63,17 +50,22 @@\n       }),\r\n       invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n-        //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n-        const { dispatch } = queryApi.extraOptions;\r\n-        // Dispatch an action to update the eyeProducts state\r\n-        dispatch(eyeProductsSlice.actions.addEyeProduct(\"ali\")); // Assuming addProduct adds data\r\n+         //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n+         const dispatch = queryApi.dispatch;\r\n+         dispatch(eyeProductsSlice.actions.addEyeProduct(result)); // Assuming addProduct adds data\r\n+       \r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n     }),\r\n+\r\n+\r\n   }),\r\n });\r\n export const { useGetEyeQuery, useSubmitItemsMutation } = api;\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1708249099191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,12 @@\n       invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n          //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n+         \r\n+         console.log(result)\r\n+         console.log(queryApi)\r\n+         debugger\r\n          const dispatch = queryApi.dispatch;\r\n          dispatch(eyeProductsSlice.actions.addEyeProduct(result)); // Assuming addProduct adds data\r\n        \r\n       },\r\n"
                },
                {
                    "date": 1708249377081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n       }),\r\n       invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n-         //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n+         queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n          \r\n          console.log(result)\r\n          console.log(queryApi)\r\n          debugger\r\n"
                },
                {
                    "date": 1708249945373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,13 +52,13 @@\n       onSuccess: (result, queryApi, payload) => {\r\n         // Handle any side effects after the mutation succeeds\r\n          queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n          \r\n-         console.log(result)\r\n-         console.log(queryApi)\r\n-         debugger\r\n-         const dispatch = queryApi.dispatch;\r\n-         dispatch(eyeProductsSlice.actions.addEyeProduct(result)); // Assuming addProduct adds data\r\n+        //  console.log(result)\r\n+        //  console.log(queryApi)\r\n+        //  debugger\r\n+        //  const dispatch = queryApi.dispatch;\r\n+        //  dispatch(eyeProductsSlice.actions.addEyeProduct(result)); \r\n        \r\n       },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n"
                },
                {
                    "date": 1708253283846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,26 +43,13 @@\n     }),\r\n \r\n     submitItems: build.mutation({\r\n       query: (items) => ({\r\n-        url: \"submitItems\", // The URL for the mutation endpoint\r\n-        method: \"POST\", // The HTTP method for the mutation request\r\n-        body: items, // The payload for the mutation request\r\n+        url: \"submitItems\",\r\n+        method: \"POST\", \r\n+        body: items, \r\n       }),\r\n-      invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n-      onSuccess: (result, queryApi, payload) => {\r\n-        // Handle any side effects after the mutation succeeds\r\n-         queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n-         \r\n-        //  console.log(result)\r\n-        //  console.log(queryApi)\r\n-        //  debugger\r\n-        //  const dispatch = queryApi.dispatch;\r\n-        //  dispatch(eyeProductsSlice.actions.addEyeProduct(result)); \r\n-       \r\n-      },\r\n       transformErrorResponse: (error) => {\r\n-        // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n     }),\r\n \r\n"
                },
                {
                    "date": 1708253435343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,26 @@\n     }),\r\n \r\n     submitItems: build.mutation({\r\n       query: (items) => ({\r\n-        url: \"submitItems\",\r\n+        url: \"submitItems\", \r\n         method: \"POST\", \r\n         body: items, \r\n       }),\r\n+      invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n+      onSuccess: (result, queryApi, payload) => {\r\n+        // Handle any side effects after the mutation succeeds\r\n+         queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n+         \r\n+        //  console.log(result)\r\n+        //  console.log(queryApi)\r\n+        //  debugger\r\n+        //  const dispatch = queryApi.dispatch;\r\n+        //  dispatch(eyeProductsSlice.actions.addEyeProduct(result)); \r\n+       \r\n+      },\r\n       transformErrorResponse: (error) => {\r\n+        // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n     }),\r\n \r\n"
                },
                {
                    "date": 1708253669016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,14 @@\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n+      onQueryStarted: async (items, thunkAPI) => {\r\n+        // Call the original mutation logic\r\n+        const { data } = await thunkAPI.query(items);\r\n+        // Dispatch the addSaveProduct action with the data as payload\r\n+        thunkAPI.dispatch(eyeProductsSlice.actions.addSaveProduct(data));\r\n+      }\r\n     }),\r\n \r\n \r\n   }),\r\n"
                },
                {
                    "date": 1708253829608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,14 +63,14 @@\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n-      onQueryStarted: async (items, thunkAPI) => {\r\n-        // Call the original mutation logic\r\n-        const { data } = await thunkAPI.query(items);\r\n-        // Dispatch the addSaveProduct action with the data as payload\r\n-        thunkAPI.dispatch(eyeProductsSlice.actions.addSaveProduct(data));\r\n-      }\r\n+      // onQueryStarted: async (items, thunkAPI) => {\r\n+      //   // Call the original mutation logic\r\n+      //   const { data } = await thunkAPI.query(items);\r\n+      //   // Dispatch the addSaveProduct action with the data as payload\r\n+      //   thunkAPI.dispatch(eyeProductsSlice.actions.addSaveProduct(data));\r\n+      // }\r\n     }),\r\n \r\n \r\n   }),\r\n"
                },
                {
                    "date": 1708254261497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,14 +63,9 @@\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n-      // onQueryStarted: async (items, thunkAPI) => {\r\n-      //   // Call the original mutation logic\r\n-      //   const { data } = await thunkAPI.query(items);\r\n-      //   // Dispatch the addSaveProduct action with the data as payload\r\n-      //   thunkAPI.dispatch(eyeProductsSlice.actions.addSaveProduct(data));\r\n-      // }\r\n+\r\n     }),\r\n \r\n \r\n   }),\r\n"
                },
                {
                    "date": 1708254712529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,19 +48,19 @@\n         method: \"POST\", \r\n         body: items, \r\n       }),\r\n       invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n-      onSuccess: (result, queryApi, payload) => {\r\n-        // Handle any side effects after the mutation succeeds\r\n-         queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n+      // onSuccess: (result, queryApi, payload) => {\r\n+      //   // Handle any side effects after the mutation succeeds\r\n+      //    queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n          \r\n-        //  console.log(result)\r\n-        //  console.log(queryApi)\r\n-        //  debugger\r\n-        //  const dispatch = queryApi.dispatch;\r\n-        //  dispatch(eyeProductsSlice.actions.addEyeProduct(result)); \r\n+      //   //  console.log(result)\r\n+      //   //  console.log(queryApi)\r\n+      //   //  debugger\r\n+      //   //  const dispatch = queryApi.dispatch;\r\n+      //   //  dispatch(eyeProductsSlice.actions.addEyeProduct(result)); \r\n        \r\n-      },\r\n+      // },\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n"
                },
                {
                    "date": 1708256084182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,19 +28,16 @@\n \r\n \r\n export const api = createApi({\r\n   reducerPath: \"api\",\r\n-  // baseQuery: fetchBaseQuery({\r\n-  //   baseUrl: \"http://localhost:3222/eye/\",\r\n-  // }),\r\n+\r\n   baseQuery: baseQueryWithAuth,\r\n   endpoints: (build) => ({\r\n     getEye: build.query({\r\n-      query: (params) => `eye/?${stringify(params)}`, // The URL for the query endpoint\r\n-      providesTags: [\"Eye\"], // Provide the Eye tag for the query data\r\n+      query: (params) => `eye/?${stringify(params)}`, \r\n+      providesTags: [\"Eye\"],\r\n       transformResponse: (response) => response.data,\r\n-      refetchOnMountOrArgChange: true, // Force a refetch on mount or arg change\r\n-\r\n+      refetchOnMountOrArgChange: true, \r\n     }),\r\n \r\n     submitItems: build.mutation({\r\n       query: (items) => ({\r\n@@ -48,21 +45,9 @@\n         method: \"POST\", \r\n         body: items, \r\n       }),\r\n       invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n-      // onSuccess: (result, queryApi, payload) => {\r\n-      //   // Handle any side effects after the mutation succeeds\r\n-      //    queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n-         \r\n-      //   //  console.log(result)\r\n-      //   //  console.log(queryApi)\r\n-      //   //  debugger\r\n-      //   //  const dispatch = queryApi.dispatch;\r\n-      //   //  dispatch(eyeProductsSlice.actions.addEyeProduct(result)); \r\n-       \r\n-      // },\r\n       transformErrorResponse: (error) => {\r\n-        // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n \r\n     }),\r\n"
                },
                {
                    "date": 1708256104011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         url: \"submitItems\", \r\n         method: \"POST\", \r\n         body: items, \r\n       }),\r\n-      invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n+      //invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       transformErrorResponse: (error) => {\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n \r\n"
                },
                {
                    "date": 1708256119565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,11 @@\n \r\n \r\n export const api = createApi({\r\n   reducerPath: \"api\",\r\n-\r\n+  // baseQuery: fetchBaseQuery({\r\n+  //   baseUrl: \"http://localhost:3222/eye/\",\r\n+  // }),\r\n   baseQuery: baseQueryWithAuth,\r\n   endpoints: (build) => ({\r\n     getEye: build.query({\r\n       query: (params) => `eye/?${stringify(params)}`, \r\n@@ -44,10 +46,11 @@\n         url: \"submitItems\", \r\n         method: \"POST\", \r\n         body: items, \r\n       }),\r\n-      //invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n+      invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       transformErrorResponse: (error) => {\r\n+        // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n \r\n     }),\r\n"
                },
                {
                    "date": 1708256601088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,8 @@\n \r\n \r\n   }),\r\n });\r\n-export const { useGetEyeQuery, useSubmitItemsMutation } = api;\r\n+export const {  useSubmitItemsMutation } = api;\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1708327876762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         url: \"submitItems\", \r\n         method: \"POST\", \r\n         body: items, \r\n       }),\r\n-      invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n+     // invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n       },\r\n"
                },
                {
                    "date": 1708328165539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,17 @@\n         url: \"submitItems\", \r\n         method: \"POST\", \r\n         body: items, \r\n       }),\r\n+      transformResponse: (response) => {\r\n+        // Log the raw response\r\n+        console.log('Raw response: ', response);\r\n+    \r\n+        // If you want to debug, you can add a breakpoint here\r\n+    \r\n+        // Then return the response to let the mutation proceed as normal\r\n+        return response;\r\n+      },\r\n      // invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n       transformErrorResponse: (error) => {\r\n         // You can modify the error object here to suit your needs\r\n         return { message: error.data.message, status: error.status };\r\n"
                },
                {
                    "date": 1708334948123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n     },\r\n   })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n };\r\n \r\n-\r\n export const api = createApi({\r\n   reducerPath: \"api\",\r\n   // baseQuery: fetchBaseQuery({\r\n   //   baseUrl: \"http://localhost:3222/eye/\",\r\n"
                },
                {
                    "date": 1708346050978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n       }),\r\n       transformResponse: (response) => {\r\n         // Log the raw response\r\n         console.log('Raw response: ', response);\r\n-    \r\n         // If you want to debug, you can add a breakpoint here\r\n     \r\n         // Then return the response to let the mutation proceed as normal\r\n         return response;\r\n"
                },
                {
                    "date": 1708347390346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       transformResponse: (response) => {\r\n         // Log the raw response\r\n         console.log('Raw response: ', response);\r\n         // If you want to debug, you can add a breakpoint here\r\n-    \r\n+\r\n         // Then return the response to let the mutation proceed as normal\r\n         return response;\r\n       },\r\n      // invalidatesTags: [\"Eye\"], // Invalidate the getEye query after the mutation succeeds\r\n@@ -60,12 +60,19 @@\n         return { message: error.data.message, status: error.status };\r\n       },\r\n \r\n     }),\r\n+    deleteItem: build.mutation<void, number>({\r\n+      query: (productId) => ({\r\n+          url: `/${productId}`, // Adjust the URL as needed\r\n+          method: \"DELETE\",\r\n+      }),\r\n+      // Other options...\r\n+  }),\r\n \r\n \r\n   }),\r\n });\r\n-export const {  useSubmitItemsMutation } = api;\r\n+export const {  useSubmitItemsMutation ,useDeleteItemMutation } = api;\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1708352867926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n-import eyeProductsSlice from './eyeProducts.reducer'; // Import your eyeProducts slice\r\n \r\n \r\n const baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n   const obj = {\r\n"
                }
            ],
            "date": 1708242472795,
            "name": "Commit-0",
            "content": "import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\n\r\nconst baseQueryWithAuth: BaseQueryFn<string, unknown, unknown, unknown, { auth: AuthHeaderType | null }> = async ({ url, method, body }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi) => {\r\n  const obj = {\r\n    auth: {\r\n      access_token: 'your_access_token_here'\r\n    }\r\n  };\r\n  const token = obj.auth?.access_token;\r\n  let headers = {};\r\n  if (token) {\r\n    headers = {\r\n      authorization: `Bearer ${token}`,\r\n      ...extraOptions?.headers,\r\n    };\r\n  }\r\n\r\n  return fetchBaseQuery({\r\n    baseUrl: 'http://localhost:3222/eye/',\r\n    prepareHeaders: (headers, { getState }) => {\r\n      headers.set('authorization', `Bearer ${token}`);\r\n      return headers;\r\n    },\r\n  })({ url, method, body, headers }, { signal, dispatch, getState, extraOptions }, endpointDefinition, baseQueryApi);\r\n};\r\n\r\n\r\nexport const api = createApi({\r\n  reducerPath: \"api\",\r\n  // baseQuery: fetchBaseQuery({\r\n  //   baseUrl: \"http://localhost:3222/eye/\",\r\n  // }),\r\n  baseQuery: baseQueryWithAuth,\r\n  endpoints: (build) => ({\r\n    getEye: build.query({\r\n      query: (params) => `?${params}`,\r\n      transformResponse: (response) => response.data,\r\n    }),\r\n    \r\n    submitItems: build.mutation({\r\n      query: (items) => ({\r\n        url: \"submitItems\", // The URL for the mutation endpoint\r\n        method: \"POST\", // The HTTP method for the mutation request\r\n        body: items, // The payload for the mutation request\r\n      }),\r\n      invalidatesTags: [\"getEye\"], // Invalidate the getEye query after the mutation succeeds\r\n      onSuccess: (result, queryApi, payload) => {\r\n        // Handle any side effects after the mutation succeeds\r\n         //queryApi.notify(\"Items submitted successfully!\"); // Show a notification\r\n      },\r\n    }),\r\n\r\n\r\n  }),\r\n});\r\nexport const { useGetEyeQuery, useSubmitItemsMutation } = api;\r\n\r\n\r\n\r\n"
        }
    ]
}