{
    "sourceFile": "components/populate.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1704283323977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704283410110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { useQueries } from '@tanstack/react-query';\r\n import usePopulateOrdersSummary from './usePopulateOrdersSummary';\r\n-import usePopulateOrdersSellersMost from './usePopulateOrdersSellersMost';\r\n-import usePopulateOrdersProductsMost from './usePopulateOrdersProductsMost';\r\n-import usePopulateOrderProductPriceExpensive from './usePopulateOrderProductPriceExpensive';\r\n+// import usePopulateOrdersSellersMost from './usePopulateOrdersSellersMost';\r\n+// import usePopulateOrdersProductsMost from './usePopulateOrdersProductsMost';\r\n+// import usePopulateOrderProductPriceExpensive from './usePopulateOrderProductPriceExpensive';\r\n \r\n // Import your child components\r\n import OrdersSummary from './OrdersSummary';\r\n-import OrdersSellersMost from './OrdersSellersMost';\r\n-import OrdersProductsMost from './OrdersProductsMost';\r\n-import OrderProductPriceExpensive from './OrderProductPriceExpensive';\r\n+// import OrdersSellersMost from './OrdersSellersMost';\r\n+// import OrdersProductsMost from './OrdersProductsMost';\r\n+// import OrderProductPriceExpensive from './OrderProductPriceExpensive';\r\n \r\n const populate = () =>{\r\n   const queries = useQueries([\r\n     {\r\n"
                },
                {
                    "date": 1704283429193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n   return (\r\n     <div>\r\n       {/* Render your child components and pass the query states as props */}\r\n       <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} />\r\n-      <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n+      {/* <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n       <OrdersProductsMost data={queries[2].data} error={queries[2].error} isLoading={queries[2].isLoading} isError={queries[2].isError} />\r\n-      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} />\r\n+      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} /> */}\r\n     </div>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1704283558010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,21 +14,9 @@\n   const queries = useQueries([\r\n     {\r\n       queryKey: 'populateOrdersSummary',\r\n       queryFn: usePopulateOrdersSummary,\r\n-    },\r\n-    {\r\n-      queryKey: 'populateOrdersSellersMost',\r\n-      queryFn: usePopulateOrdersSellersMost,\r\n-    },\r\n-    {\r\n-      queryKey: 'populateOrdersProductsMost',\r\n-      queryFn: usePopulateOrdersProductsMost,\r\n-    },\r\n-    {\r\n-      queryKey: 'populateOrderProductPriceExpensive',\r\n-      queryFn: usePopulateOrderProductPriceExpensive,\r\n-    },\r\n+    }\r\n   ]);\r\n \r\n   // You can access the data, error, isLoading, and isError states of each query\r\n   // For example, queries[0].data is the data from usePopulateOrdersSummary\r\n"
                },
                {
                    "date": 1704283671845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \r\n   return (\r\n     <div>\r\n       {/* Render your child components and pass the query states as props */}\r\n-      <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} />\r\n+      {/* <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} /> */}\r\n       {/* <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n       <OrdersProductsMost data={queries[2].data} error={queries[2].error} isLoading={queries[2].isLoading} isError={queries[2].isError} />\r\n       <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} /> */}\r\n     </div>\r\n"
                },
                {
                    "date": 1704283702699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,14 @@\n // import OrdersProductsMost from './OrdersProductsMost';\r\n // import OrderProductPriceExpensive from './OrderProductPriceExpensive';\r\n \r\n const populate = () =>{\r\n-  const queries = useQueries([\r\n-    {\r\n-      queryKey: 'populateOrdersSummary',\r\n-      queryFn: usePopulateOrdersSummary,\r\n-    }\r\n-  ]);\r\n+//   const queries = useQueries([\r\n+//     {\r\n+//       queryKey: 'populateOrdersSummary',\r\n+//       queryFn: usePopulateOrdersSummary,\r\n+//     }\r\n+//   ]);\r\n \r\n   // You can access the data, error, isLoading, and isError states of each query\r\n   // For example, queries[0].data is the data from usePopulateOrdersSummary\r\n   // queries[1].error is the error from usePopulateOrdersSellersMost, and so on\r\n"
                },
                {
                    "date": 1704283708285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,14 @@\n // import OrdersProductsMost from './OrdersProductsMost';\r\n // import OrderProductPriceExpensive from './OrderProductPriceExpensive';\r\n \r\n const populate = () =>{\r\n-//   const queries = useQueries([\r\n-//     {\r\n-//       queryKey: 'populateOrdersSummary',\r\n-//       queryFn: usePopulateOrdersSummary,\r\n-//     }\r\n-//   ]);\r\n+  const queries = useQueries([\r\n+    {\r\n+      queryKey: 'populateOrdersSummary',\r\n+      queryFn: usePopulateOrdersSummary,\r\n+    }\r\n+  ]);\r\n \r\n   // You can access the data, error, isLoading, and isError states of each query\r\n   // For example, queries[0].data is the data from usePopulateOrdersSummary\r\n   // queries[1].error is the error from usePopulateOrdersSellersMost, and so on\r\n"
                },
                {
                    "date": 1704283845729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,22 @@\n \r\n const populate = () =>{\r\n   const queries = useQueries([\r\n     {\r\n-      queryKey: 'populateOrdersSummary',\r\n-      queryFn: usePopulateOrdersSummary,\r\n+        queryKey: ['populateOrdersSummary'],\r\n+      queryFn: async () => { // The query function with the async keyword\r\n+        try {\r\n+            const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n+            if (!response.ok) {\r\n+                throw { status: response.status, message: response.statusText };\r\n+            }\r\n+            const data = await response.json();\r\n+            return data;\r\n+        } catch (error) {\r\n+            // Throw the error object\r\n+            throw error;\r\n+        }\r\n+    },\r\n     }\r\n   ]);\r\n \r\n   // You can access the data, error, isLoading, and isError states of each query\r\n"
                },
                {
                    "date": 1704283936868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,23 +12,23 @@\n \r\n const populate = () =>{\r\n   const queries = useQueries([\r\n     {\r\n-        queryKey: ['populateOrdersSummary'],\r\n-      queryFn: async () => { // The query function with the async keyword\r\n-        try {\r\n-            const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n-            if (!response.ok) {\r\n-                throw { status: response.status, message: response.statusText };\r\n-            }\r\n-            const data = await response.json();\r\n-            return data;\r\n-        } catch (error) {\r\n-            // Throw the error object\r\n-            throw error;\r\n-        }\r\n+      queryKey: '[populateOrdersSummary]',\r\n+      queryFn: usePopulateOrdersSummary,\r\n     },\r\n-    }\r\n+    // {\r\n+    //   queryKey: 'populateOrdersSellersMost',\r\n+    //   queryFn: usePopulateOrdersSellersMost,\r\n+    // },\r\n+    // {\r\n+    //   queryKey: 'populateOrdersProductsMost',\r\n+    //   queryFn: usePopulateOrdersProductsMost,\r\n+    // },\r\n+    // {\r\n+    //   queryKey: 'populateOrderProductPriceExpensive',\r\n+    //   queryFn: usePopulateOrderProductPriceExpensive,\r\n+    // },\r\n   ]);\r\n \r\n   // You can access the data, error, isLoading, and isError states of each query\r\n   // For example, queries[0].data is the data from usePopulateOrdersSummary\r\n@@ -36,12 +36,12 @@\n \r\n   return (\r\n     <div>\r\n       {/* Render your child components and pass the query states as props */}\r\n-      {/* <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} /> */}\r\n-      {/* <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n+      <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} />\r\n+      <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n       <OrdersProductsMost data={queries[2].data} error={queries[2].error} isLoading={queries[2].isLoading} isError={queries[2].isError} />\r\n-      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} /> */}\r\n+      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} />\r\n     </div>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1704283943063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n   return (\r\n     <div>\r\n       {/* Render your child components and pass the query states as props */}\r\n       <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} />\r\n-      <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n+      {/* <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n       <OrdersProductsMost data={queries[2].data} error={queries[2].error} isLoading={queries[2].isLoading} isError={queries[2].isError} />\r\n-      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} />\r\n+      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} /> */}\r\n     </div>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1704284373262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,25 @@\n import { useQueries } from '@tanstack/react-query';\r\n import usePopulateOrdersSummary from './usePopulateOrdersSummary';\r\n-// import usePopulateOrdersSellersMost from './usePopulateOrdersSellersMost';\r\n-// import usePopulateOrdersProductsMost from './usePopulateOrdersProductsMost';\r\n-// import usePopulateOrderProductPriceExpensive from './usePopulateOrderProductPriceExpensive';\r\n \r\n // Import your child components\r\n import OrdersSummary from './OrdersSummary';\r\n-// import OrdersSellersMost from './OrdersSellersMost';\r\n-// import OrdersProductsMost from './OrdersProductsMost';\r\n-// import OrderProductPriceExpensive from './OrderProductPriceExpensive';\r\n \r\n const populate = () =>{\r\n   const queries = useQueries([\r\n     {\r\n       queryKey: '[populateOrdersSummary]',\r\n       queryFn: usePopulateOrdersSummary,\r\n     },\r\n-    // {\r\n-    //   queryKey: 'populateOrdersSellersMost',\r\n-    //   queryFn: usePopulateOrdersSellersMost,\r\n-    // },\r\n-    // {\r\n-    //   queryKey: 'populateOrdersProductsMost',\r\n-    //   queryFn: usePopulateOrdersProductsMost,\r\n-    // },\r\n-    // {\r\n-    //   queryKey: 'populateOrderProductPriceExpensive',\r\n-    //   queryFn: usePopulateOrderProductPriceExpensive,\r\n-    // },\r\n   ]);\r\n \r\n-  // You can access the data, error, isLoading, and isError states of each query\r\n-  // For example, queries[0].data is the data from usePopulateOrdersSummary\r\n-  // queries[1].error is the error from usePopulateOrdersSellersMost, and so on\r\n \r\n   return (\r\n     <div>\r\n       {/* Render your child components and pass the query states as props */}\r\n       <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} />\r\n-      {/* <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n-      <OrdersProductsMost data={queries[2].data} error={queries[2].error} isLoading={queries[2].isLoading} isError={queries[2].isError} />\r\n-      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} /> */}\r\n+      \r\n     </div>\r\n   );\r\n }\r\n-\r\n export default populate;\r\n \r\n"
                },
                {
                    "date": 1704284606337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,24 @@\n-import { useQueries } from '@tanstack/react-query';\r\n+// Parent component\r\n+import { useQuery } from '@tanstack/react-query';\r\n import usePopulateOrdersSummary from './usePopulateOrdersSummary';\r\n \r\n-// Import your child components\r\n+// Import child components\r\n import OrdersSummary from './OrdersSummary';\r\n \r\n-const populate = () =>{\r\n-  const queries = useQueries([\r\n-    {\r\n-      queryKey: '[populateOrdersSummary]',\r\n-      queryFn: usePopulateOrdersSummary,\r\n-    },\r\n-  ]);\r\n+const populate = () => {\r\n+  // Use useQuery instead of useQueries, and pass the custom hook as the query function\r\n+  const { data, error, isLoading, isError } = useQuery(usePopulateOrdersSummary);\r\n \r\n-\r\n   return (\r\n     <div>\r\n-      {/* Render your child components and pass the query states as props */}\r\n-      <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} />\r\n-      \r\n+      {/* Render your child component and pass the query states as props */}\r\n+      <OrdersSummary\r\n+        data={data}\r\n+        error={error}\r\n+        isLoading={isLoading}\r\n+        isError={isError}\r\n+      />\r\n     </div>\r\n   );\r\n-}\r\n-export default populate;\r\n-\r\n+};\r\n+export default populate;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704284670018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,20 @@\n // Parent component\r\n import { useQuery } from '@tanstack/react-query';\r\n-import usePopulateOrdersSummary from './usePopulateOrdersSummary';\r\n \r\n+\r\n // Import child components\r\n import OrdersSummary from './OrdersSummary';\r\n \r\n const populate = () => {\r\n   // Use useQuery instead of useQueries, and pass the custom hook as the query function\r\n-  const { data, error, isLoading, isError } = useQuery(usePopulateOrdersSummary);\r\n \r\n+\r\n   return (\r\n     <div>\r\n       {/* Render your child component and pass the query states as props */}\r\n       <OrdersSummary\r\n-        data={data}\r\n-        error={error}\r\n-        isLoading={isLoading}\r\n-        isError={isError}\r\n+       \r\n       />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1704284678354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,9 @@\n \r\n   return (\r\n     <div>\r\n       {/* Render your child component and pass the query states as props */}\r\n-      <OrdersSummary\r\n-       \r\n-      />\r\n+      <OrdersSummary />\r\n     </div>\r\n   );\r\n };\r\n export default populate;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704284699708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,9 @@\n \r\n \r\n   return (\r\n     <div>\r\n-      {/* Render your child component and pass the query states as props */}\r\n-      <OrdersSummary />\r\n+   \r\n     </div>\r\n   );\r\n };\r\n export default populate;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704287248525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,10 @@\n \r\n \r\n   return (\r\n     <div>\r\n-   \r\n+      {/* Render your child component and pass the query states as props */}\r\n+      <OrdersSummary />\r\n     </div>\r\n   );\r\n };\r\n export default populate;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704287278344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n \r\n \r\n // Import child components\r\n import OrdersSummary from './OrdersSummary';\r\n-\r\n+import OrdersSellersMost from './OrdersSellersMost';\r\n+import OrdersProductsMost from './OrdersProductsMost';\r\n+import OrderProductPriceExpensive from './OrderProductPriceExpensive';\r\n const populate = () => {\r\n   // Use useQuery instead of useQueries, and pass the custom hook as the query function\r\n \r\n \r\n"
                },
                {
                    "date": 1704287717187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,11 @@\n   return (\r\n     <div>\r\n       {/* Render your child component and pass the query states as props */}\r\n       <OrdersSummary />\r\n+      <OrdersSellersMost />\r\n+      <OrdersSummary />\r\n+      <OrdersSummary />\r\n     </div>\r\n   );\r\n };\r\n export default populate;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704287725157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n     <div>\r\n       {/* Render your child component and pass the query states as props */}\r\n       <OrdersSummary />\r\n       <OrdersSellersMost />\r\n-      <OrdersSummary />\r\n-      <OrdersSummary />\r\n+      <OrdersProductsMost />\r\n+      <OrderProductPriceExpensive />\r\n     </div>\r\n   );\r\n };\r\n export default populate;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704288166693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n   return (\r\n     <div>\r\n       {/* Render your child component and pass the query states as props */}\r\n       <OrdersSummary />\r\n-      <OrdersSellersMost />\r\n-      <OrdersProductsMost />\r\n+      {/* <OrdersSellersMost />\r\n+      <OrdersProductsMost /> */}\r\n       <OrderProductPriceExpensive />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1704288341225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n   return (\r\n     <div>\r\n       {/* Render your child component and pass the query states as props */}\r\n       <OrdersSummary />\r\n-      {/* <OrdersSellersMost />\r\n-      <OrdersProductsMost /> */}\r\n+      <OrdersSellersMost />\r\n+      <OrdersProductsMost />\r\n       <OrderProductPriceExpensive />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1704783396544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n   return (\r\n     <div>\r\n       {/* Render your child component and pass the query states as props */}\r\n       <OrdersSummary />\r\n-      <OrdersSellersMost />\r\n+      {/* <OrdersSellersMost />\r\n       <OrdersProductsMost />\r\n-      <OrderProductPriceExpensive />\r\n+      <OrderProductPriceExpensive /> */}\r\n     </div>\r\n   );\r\n };\r\n export default populate;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1704283323977,
            "name": "Commit-0",
            "content": "import { useQueries } from '@tanstack/react-query';\r\nimport usePopulateOrdersSummary from './usePopulateOrdersSummary';\r\nimport usePopulateOrdersSellersMost from './usePopulateOrdersSellersMost';\r\nimport usePopulateOrdersProductsMost from './usePopulateOrdersProductsMost';\r\nimport usePopulateOrderProductPriceExpensive from './usePopulateOrderProductPriceExpensive';\r\n\r\n// Import your child components\r\nimport OrdersSummary from './OrdersSummary';\r\nimport OrdersSellersMost from './OrdersSellersMost';\r\nimport OrdersProductsMost from './OrdersProductsMost';\r\nimport OrderProductPriceExpensive from './OrderProductPriceExpensive';\r\n\r\nconst populate = () =>{\r\n  const queries = useQueries([\r\n    {\r\n      queryKey: 'populateOrdersSummary',\r\n      queryFn: usePopulateOrdersSummary,\r\n    },\r\n    {\r\n      queryKey: 'populateOrdersSellersMost',\r\n      queryFn: usePopulateOrdersSellersMost,\r\n    },\r\n    {\r\n      queryKey: 'populateOrdersProductsMost',\r\n      queryFn: usePopulateOrdersProductsMost,\r\n    },\r\n    {\r\n      queryKey: 'populateOrderProductPriceExpensive',\r\n      queryFn: usePopulateOrderProductPriceExpensive,\r\n    },\r\n  ]);\r\n\r\n  // You can access the data, error, isLoading, and isError states of each query\r\n  // For example, queries[0].data is the data from usePopulateOrdersSummary\r\n  // queries[1].error is the error from usePopulateOrdersSellersMost, and so on\r\n\r\n  return (\r\n    <div>\r\n      {/* Render your child components and pass the query states as props */}\r\n      <OrdersSummary data={queries[0].data} error={queries[0].error} isLoading={queries[0].isLoading} isError={queries[0].isError} />\r\n      <OrdersSellersMost data={queries[1].data} error={queries[1].error} isLoading={queries[1].isLoading} isError={queries[1].isError} />\r\n      <OrdersProductsMost data={queries[2].data} error={queries[2].error} isLoading={queries[2].isLoading} isError={queries[2].isError} />\r\n      <OrderProductPriceExpensive data={queries[3].data} error={queries[3].error} isLoading={queries[3].isLoading} isError={queries[3].isError} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default populate;\r\n\r\n"
        }
    ]
}