{
    "sourceFile": "components/uicomponents/ListCategoryGrouped.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 70,
            "patches": [
                {
                    "date": 1704792969925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704794388893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          navigation.navigate(\"detail\", { item });\r\n+          navigation.navigate(\"orderitem\", { item });\r\n         }}>\r\n           {item.title}\r\n         </ListItem.Title>\r\n         <ListItem.Subtitle >\r\n"
                },
                {
                    "date": 1704872128714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React from 'react';\r\n interface ListItemComponentProps {\r\n   item: category_grouped;\r\n   index: number;\r\n-  // Replace with the type of your theme object\r\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n import { category_grouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n"
                },
                {
                    "date": 1704874349894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,14 @@\n           navigation.navigate(\"orderitem\", { item });\r\n         }}>\r\n           {item.title}\r\n         </ListItem.Title>\r\n+\r\n         <ListItem.Subtitle >\r\n-          Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+             items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n+        <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+        </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n     </ListItem>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1704874519692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,12 @@\n         }}>\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n-        <ListItem.Subtitle >\r\n-             items Count: {item.count}\r\n+        <ListItem.Subtitle onPress={() => {\r\n+          navigation.navigate(\"orderitem\", { item });\r\n+        }} >\r\n+          items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n"
                },
                {
                    "date": 1704874744594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,25 @@\n import React from 'react';\r\n interface ListItemComponentProps {\r\n+  categoryType:string\r\n   item: category_grouped;\r\n   index: number;\r\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n import { category_grouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n \r\n-const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ item, index }) => {\r\n+const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType,item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n-  // Define the detail component\r\n-  const detail = ({ route }) => {\r\n-    // Use the route.params property to get the item that was passed from the previous screen\r\n-    const { item } = route.params;\r\n-    // ... use the item to render the UI of the detail screen\r\n-  };\r\n \r\n+\r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          navigation.navigate(\"orderitem\", { item });\r\n+          navigation.navigate(\"orderitem\", { categoryType });\r\n         }}>\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n"
                },
                {
                    "date": 1704875215401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,18 +8,27 @@\n import { category_grouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n \r\n+ interface SearchParams {\r\n+    categoryType:string,\r\n+    allOrderItems:boolean\r\n+  }\r\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType,item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n+ \r\n+  const searchParamsInstance: SearchParams = {\r\n+    categoryType: categoryType,\r\n+    allOrderItems: true\r\n+  };\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          navigation.navigate(\"orderitem\", { categoryType });\r\n+          navigation.navigate(\"orderitem\", {searchParamsInstance});\r\n         }}>\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n"
                },
                {
                    "date": 1704875446762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React from 'react';\r\n interface ListItemComponentProps {\r\n   categoryType:string\r\n-  item: category_grouped;\r\n+  categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n import { category_grouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n"
                },
                {
                    "date": 1704876446239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n-import { category_grouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n+import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n \r\n  interface SearchParams {\r\n"
                },
                {
                    "date": 1704876629996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,24 @@\n import React from 'react';\r\n interface ListItemComponentProps {\r\n-  categoryType:string\r\n+  categoryType: string\r\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n \r\n- interface SearchParams {\r\n-    categoryType:string,\r\n-    allOrderItems:boolean\r\n-  }\r\n-const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType,item, index }) => {\r\n+interface SearchParams {\r\n+  categoryType: string,\r\n+  allOrderItems: boolean\r\n+}\r\n+const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n- \r\n+\r\n   const searchParamsInstance: SearchParams = {\r\n     categoryType: categoryType,\r\n     allOrderItems: true\r\n   };\r\n@@ -26,15 +26,16 @@\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          navigation.navigate(\"orderitem\", {searchParamsInstance});\r\n+          navigation.navigate(\"orderitem\", { searchParamsInstance });\r\n         }}>\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n-          navigation.navigate(\"orderitem\", { item });\r\n+          searchParamsInstance.allOrderItems = false;\r\n+          navigation.navigate(\"orderitem\", { searchParamsInstance });\r\n         }} >\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n"
                },
                {
                    "date": 1704876664684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n           navigation.navigate(\"orderitem\", { searchParamsInstance });\r\n         }}>\r\n+          {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n"
                },
                {
                    "date": 1704876817084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,8 @@\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n \r\n-interface SearchParams {\r\n-  categoryType: string,\r\n-  allOrderItems: boolean\r\n-}\r\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n"
                },
                {
                    "date": 1704876887582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,17 @@\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n+import { SearchParamsOrderItem } from '../entity/SearchQueries';\r\n \r\n \r\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n \r\n-  const searchParamsInstance: SearchParams = {\r\n+  const searchParamsInstance: SearchParamsOrderItem = {\r\n     categoryType: categoryType,\r\n     allOrderItems: true\r\n   };\r\n \r\n"
                },
                {
                    "date": 1704878128116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n \r\n   const searchParamsInstance: SearchParamsOrderItem = {\r\n     categoryType: categoryType,\r\n-    allOrderItems: true\r\n+    allOrderItems: true,\r\n   };\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n"
                },
                {
                    "date": 1704878207338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,17 +23,17 @@\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          navigation.navigate(\"orderitem\", { searchParamsInstance });\r\n+          navigation.navigate(\"orderitem\",  searchParamsInstance );\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n           searchParamsInstance.allOrderItems = false;\r\n-          navigation.navigate(\"orderitem\", { searchParamsInstance });\r\n+          navigation.navigate(\"orderitem\",  searchParamsInstance );\r\n         }} >\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n"
                },
                {
                    "date": 1704878830699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,12 @@\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n \r\n-  const searchParamsInstance: SearchParamsOrderItem = {\r\n+  const searchParamsInstance: createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n     allOrderItems: true,\r\n-  };\r\n+ )}\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n"
                },
                {
                    "date": 1704878864483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,17 +6,17 @@\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n-import { SearchParamsOrderItem } from '../entity/SearchQueries';\r\n+import { SearchParamsOrderItem ,createSearchParamsOrderItem} from '../entity/SearchQueries';\r\n \r\n \r\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n \r\n-  const searchParamsInstance: createSearchParamsOrderItem({\r\n+  const searchParamsInstance= createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n     allOrderItems: true,\r\n  )}\r\n \r\n"
                },
                {
                    "date": 1704878912259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,34 +6,34 @@\n }\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n-import { SearchParamsOrderItem ,createSearchParamsOrderItem} from '../entity/SearchQueries';\r\n+import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n \r\n \r\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n \r\n-  const searchParamsInstance= createSearchParamsOrderItem({\r\n+  const searchParamsInstance = createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n     allOrderItems: true,\r\n- )}\r\n+  })\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          navigation.navigate(\"orderitem\",  searchParamsInstance );\r\n+          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n           searchParamsInstance.allOrderItems = false;\r\n-          navigation.navigate(\"orderitem\",  searchParamsInstance );\r\n+          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n"
                },
                {
                    "date": 1704879533383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n           searchParamsInstance.allOrderItems = false;\r\n+          searchParamsInstance.quantity = {item.count} ;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1704879546299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n           searchParamsInstance.allOrderItems = false;\r\n-          searchParamsInstance.quantity = {item.count} ;\r\n+          searchParamsInstance.quantity = item.count ;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1704880071294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n \r\n \r\n   const searchParamsInstance = createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n+    item_category2: categoryType===\"item_category2\" ? null : item.item_category2,\r\n+    item_category3:categoryType===\"item_category3\" ? null :  item.item_category3,\r\n     allOrderItems: true,\r\n   })\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1704880122703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n \r\n \r\n   const searchParamsInstance = createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n-    item_category2: categoryType===\"item_category2\" ? null : item.item_category2,\r\n-    item_category3:categoryType===\"item_category3\" ? null :  item.item_category3,\r\n+    item_category2: categoryType===\"item_category2\" ? null : item.title,\r\n+    item_category3:categoryType===\"item_category3\" ? null :  item.title,\r\n     allOrderItems: true,\r\n   })\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1704880261783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n-\r\n+debugger;\r\n   const searchParamsInstance = createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n     item_category2: categoryType===\"item_category2\" ? null : item.title,\r\n     item_category3:categoryType===\"item_category3\" ? null :  item.title,\r\n"
                },
                {
                    "date": 1704880360438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,27 +13,29 @@\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n-debugger;\r\n+\r\n   const searchParamsInstance = createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n-    item_category2: categoryType===\"item_category2\" ? null : item.title,\r\n+    i\r\n     item_category3:categoryType===\"item_category3\" ? null :  item.title,\r\n     allOrderItems: true,\r\n   })\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n+          searchParamsInstance.item_category2= categoryType===\"item_category2\" ? null : item.title\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n+            searchParamsInstance.item_category3= categoryType===\"item_category3\" ? null : item.title\r\n           searchParamsInstance.allOrderItems = false;\r\n           searchParamsInstance.quantity = item.count ;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n"
                },
                {
                    "date": 1704880384019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,28 +16,26 @@\n \r\n \r\n   const searchParamsInstance = createSearchParamsOrderItem({\r\n     categoryType: categoryType,\r\n-    i\r\n-    item_category3:categoryType===\"item_category3\" ? null :  item.title,\r\n     allOrderItems: true,\r\n   })\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          searchParamsInstance.item_category2= categoryType===\"item_category2\" ? null : item.title\r\n+          searchParamsInstance.item_category2 = categoryType === \"item_category2\" ? null : item.title\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n-            searchParamsInstance.item_category3= categoryType===\"item_category3\" ? null : item.title\r\n+          searchParamsInstance.item_category3 = categoryType === \"item_category3\" ? null : item.title\r\n           searchParamsInstance.allOrderItems = false;\r\n-          searchParamsInstance.quantity = item.count ;\r\n+          searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1704880419709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,17 +23,17 @@\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          searchParamsInstance.item_category2 = categoryType === \"item_category2\" ? null : item.title\r\n+          searchParamsInstance.item_category2 =  item.title\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n-          searchParamsInstance.item_category3 = categoryType === \"item_category3\" ? null : item.title\r\n+          searchParamsInstance.item_category3 = item.title//categoryType === \"item_category3\" ? null : \r\n           searchParamsInstance.allOrderItems = false;\r\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n"
                },
                {
                    "date": 1704880568185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,17 +23,18 @@\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          searchParamsInstance.item_category2 =  item.title\r\n+          searchParamsInstance.item_category2 =  categoryType === \"item_category3\" ? null :item.title\r\n+          searchParamsInstance.item_category3 = categoryType === \"item_category2\" ? null :item.title\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n-          searchParamsInstance.item_category3 = item.title//categoryType === \"item_category3\" ? null : \r\n+        \r\n           searchParamsInstance.allOrderItems = false;\r\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n"
                },
                {
                    "date": 1704881712011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,18 +23,19 @@\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n-          searchParamsInstance.item_category2 =  categoryType === \"item_category3\" ? null :item.title\r\n-          searchParamsInstance.item_category3 = categoryType === \"item_category2\" ? null :item.title\r\n+          // Use a computed property name to set the property based on the categoryType value\r\n+          searchParamsInstance[categoryType] = item.title;\r\n+\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         <ListItem.Subtitle onPress={() => {\r\n-        \r\n+\r\n           searchParamsInstance.allOrderItems = false;\r\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} >\r\n"
                },
                {
                    "date": 1704885519396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,15 @@\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n-        <ListItem.Subtitle onPress={() => {\r\n+        {/* <ListItem.Subtitle onPress={() => {\r\n \r\n           searchParamsInstance.allOrderItems = false;\r\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-        }} >\r\n+        }} > */}\r\n+          <ListItem.Subtitle onPress={handleClick}>\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1704885544840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,21 @@\n     categoryType: categoryType,\r\n     allOrderItems: true,\r\n   })\r\n \r\n+  const handleClick = () => {\r\n+    // Update the searchParamsInstance state variable with the new values\r\n+    setSearchParamsInstance((prevState) => ({\r\n+      ...prevState,\r\n+      allOrderItems: false,\r\n+      quantity: item.count,\r\n+    }));\r\n+\r\n+    // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n+    navigation.navigate('orderitem', searchParamsInstance);\r\n+  };\r\n+\r\n+\r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n"
                },
                {
                    "date": 1704885616276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\r\n+import React, { useEffect, useState } from 'react';\r\n interface ListItemComponentProps {\r\n   categoryType: string\r\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n@@ -14,12 +14,28 @@\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n \r\n-  const searchParamsInstance = createSearchParamsOrderItem({\r\n-    categoryType: categoryType,\r\n-    allOrderItems: true,\r\n-  })\r\n+  // const searchParamsInstance = createSearchParamsOrderItem({\r\n+  //   categoryType: categoryType,\r\n+  //   allOrderItems: true,\r\n+  // })\r\n+  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    createSearchParamsOrderItem({\r\n+      categoryType: categoryType,\r\n+      allOrderItems: true,\r\n+    })\r\n+  );\r\n+  useEffect(() => {\r\n+    // Check if the categoryType prop is not null or undefined\r\n+    if (categoryType != null) {\r\n+      // Set the searchParamsInstance[categoryType] property to the item.title value\r\n+      setSearchParamsInstance((prevState) => ({\r\n+        ...prevState,\r\n+        [categoryType]: item.title,\r\n+      }));\r\n+    }\r\n+  }, [categoryType]);\r\n \r\n   const handleClick = () => {\r\n     // Update the searchParamsInstance state variable with the new values\r\n     setSearchParamsInstance((prevState) => ({\r\n@@ -37,11 +53,11 @@\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n           // Use a computed property name to set the property based on the categoryType value\r\n-          searchParamsInstance[categoryType] = item.title;\r\n+          //searchParamsInstance[categoryType] = item.title;\r\n \r\n-          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+         // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n@@ -51,9 +67,9 @@\n           searchParamsInstance.allOrderItems = false;\r\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n-          <ListItem.Subtitle onPress={handleClick}>\r\n+        <ListItem.Subtitle onPress={handleClick}>\r\n           items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1704885835479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,11 +68,11 @@\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-          items Count: {item.count}\r\n+          items Count: {item.count}| Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n-        <ListItem.Subtitle > Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+        <ListItem.Subtitle > Max Price: {item.maxPrice} \r\n         </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n     </ListItem>\r\n   );\r\n"
                },
                {
                    "date": 1704886044067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n         }} > */}\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n           items Count: {item.count}| Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n-        <ListItem.Subtitle > Max Price: {item.maxPrice} \r\n+        <ListItem.Subtitle >Max Price: {item.maxPrice} \r\n         </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n     </ListItem>\r\n   );\r\n"
                },
                {
                    "date": 1704886782371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n   categoryType: string\r\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n }\r\n-import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n+\r\n+import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n \r\n@@ -55,9 +56,9 @@\n         <ListItem.Title onPress={() => {\r\n           // Use a computed property name to set the property based on the categoryType value\r\n           //searchParamsInstance[categoryType] = item.title;\r\n \r\n-         // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+          // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n           {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n@@ -68,11 +69,29 @@\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-          items Count: {item.count}| Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+\r\n+          <Button\r\n+            title={`items Count: ${item.count}`}\r\n+            onPress={handleCountClick}\r\n+          />\r\n+          {/* items Count: {item.count} */}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+          | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+\r\n+\r\n         </ListItem.Subtitle>\r\n-        <ListItem.Subtitle >Max Price: {item.maxPrice} \r\n+        <ListItem.Subtitle onPress={handleClick}>\r\n+\r\n+          Max Price: {item.maxPrice}\r\n         </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n     </ListItem>\r\n   );\r\n"
                },
                {
                    "date": 1704886789401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,19 +72,14 @@\n         <ListItem.Subtitle onPress={handleClick}>\r\n \r\n           <Button\r\n             title={`items Count: ${item.count}`}\r\n-            onPress={handleCountClick}\r\n+            onPress={handleClick}\r\n           />\r\n           {/* items Count: {item.count} */}\r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n           | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n \r\n \r\n         </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1704886845321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         }} > */}\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n \r\n           <Button\r\n-            title={`items Count: ${item.count}`}\r\n+            title={`Count: 😏 ${item.count}`}\r\n             onPress={handleClick}\r\n           />\r\n           {/* items Count: {item.count} */}\r\n \r\n@@ -83,10 +83,12 @@\n \r\n \r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-\r\n-          Max Price: {item.maxPrice}\r\n+        <Button\r\n+            title={`Max Paid 🤐: ${item.maxPrice}`}\r\n+            onPress={handleClick}\r\n+          />\r\n         </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n     </ListItem>\r\n   );\r\n"
                },
                {
                    "date": 1704886868546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,20 +69,14 @@\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-\r\n+        Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={handleClick}\r\n           />\r\n           {/* items Count: {item.count} */}\r\n-\r\n-\r\n-\r\n-          | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-\r\n-\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n         <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n"
                },
                {
                    "date": 1704886888143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,17 +69,18 @@\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-        Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={handleClick}\r\n           />\r\n+          Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+\r\n           {/* items Count: {item.count} */}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-        <Button\r\n+          <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n             onPress={handleClick}\r\n           />\r\n         </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1704886949362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n   categoryType: string\r\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n }\r\n+import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n@@ -69,18 +70,18 @@\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n+        Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+        <Divider style={styles.dataDivider} />\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={handleClick}\r\n           />\r\n-          Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-\r\n           {/* items Count: {item.count} */}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-          <Button\r\n+        <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n             onPress={handleClick}\r\n           />\r\n         </ListItem.Subtitle>\r\n@@ -88,5 +89,34 @@\n     </ListItem>\r\n   );\r\n };\r\n \r\n+// Define the styles for the component using StyleSheet\r\n+const styles = StyleSheet.create({\r\n+  container: {\r\n+      flex: 1,\r\n+      alignItems: \"center\",\r\n+      justifyContent: \"center\",\r\n+  },\r\n+  loading: {\r\n+      fontSize: 20,\r\n+      fontWeight: \"bold\",\r\n+  },\r\n+  error: {\r\n+      fontSize: 20,\r\n+      fontWeight: \"bold\",\r\n+  },\r\n+  dataContainer: {\r\n+      margin: 10,\r\n+  },\r\n+  dataTitle: {\r\n+      fontSize: 18,\r\n+      fontWeight: \"bold\",\r\n+      marginVertical: 5,\r\n+  },\r\n+  dataDivider: {\r\n+      marginVertical: 5,\r\n+  },\r\n+});\r\n+\r\n+\r\n export default ListCategoryGrouped;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704886973941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,8 @@\n           //searchParamsInstance[categoryType] = item.title;\r\n \r\n           // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n-          {searchParamsInstance.categoryType}\r\n           {item.title}\r\n         </ListItem.Title>\r\n \r\n         {/* <ListItem.Subtitle onPress={() => {\r\n"
                },
                {
                    "date": 1704887081999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,12 @@\n           searchParamsInstance.allOrderItems = false;\r\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n+        <ListItem.Subtitle >\r\n+           Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+        </ListItem.Subtitle>\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-        Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         <Divider style={styles.dataDivider} />\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={handleClick}\r\n"
                },
                {
                    "date": 1704887176916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,14 @@\n           //searchParamsInstance[categoryType] = item.title;\r\n \r\n           // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }}>\r\n-          {item.title}\r\n+\r\n+          <Button\r\n+            title={`🥵 ${item.title}`}\r\n+            onPress={handleClick}\r\n+          />\r\n+\r\n         </ListItem.Title>\r\n \r\n         {/* <ListItem.Subtitle onPress={() => {\r\n \r\n@@ -69,20 +74,20 @@\n           searchParamsInstance.quantity = item.count;\r\n           navigation.navigate(\"orderitem\", searchParamsInstance);\r\n         }} > */}\r\n         <ListItem.Subtitle >\r\n-           Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+          Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-        <Divider style={styles.dataDivider} />\r\n+          <Divider style={styles.dataDivider} />\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={handleClick}\r\n           />\r\n           {/* items Count: {item.count} */}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle onPress={handleClick}>\r\n-        <Button\r\n+          <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n             onPress={handleClick}\r\n           />\r\n         </ListItem.Subtitle>\r\n@@ -93,30 +98,30 @@\n \r\n // Define the styles for the component using StyleSheet\r\n const styles = StyleSheet.create({\r\n   container: {\r\n-      flex: 1,\r\n-      alignItems: \"center\",\r\n-      justifyContent: \"center\",\r\n+    flex: 1,\r\n+    alignItems: \"center\",\r\n+    justifyContent: \"center\",\r\n   },\r\n   loading: {\r\n-      fontSize: 20,\r\n-      fontWeight: \"bold\",\r\n+    fontSize: 20,\r\n+    fontWeight: \"bold\",\r\n   },\r\n   error: {\r\n-      fontSize: 20,\r\n-      fontWeight: \"bold\",\r\n+    fontSize: 20,\r\n+    fontWeight: \"bold\",\r\n   },\r\n   dataContainer: {\r\n-      margin: 10,\r\n+    margin: 10,\r\n   },\r\n   dataTitle: {\r\n-      fontSize: 18,\r\n-      fontWeight: \"bold\",\r\n-      marginVertical: 5,\r\n+    fontSize: 18,\r\n+    fontWeight: \"bold\",\r\n+    marginVertical: 5,\r\n   },\r\n   dataDivider: {\r\n-      marginVertical: 5,\r\n+    marginVertical: 5,\r\n   },\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1704887376284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,13 @@\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n-\r\n+// Define a generic type that represents the property name and value\r\n+type UpdateParams = {\r\n+  prop: keyof SearchParamsOrderItem;\r\n+  value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n+};\r\n   // const searchParamsInstance = createSearchParamsOrderItem({\r\n   //   categoryType: categoryType,\r\n   //   allOrderItems: true,\r\n   // })\r\n"
                },
                {
                    "date": 1704887390938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,20 +41,30 @@\n       }));\r\n     }\r\n   }, [categoryType]);\r\n \r\n-  const handleClick = () => {\r\n-    // Update the searchParamsInstance state variable with the new values\r\n-    setSearchParamsInstance((prevState) => ({\r\n-      ...prevState,\r\n-      allOrderItems: false,\r\n-      quantity: item.count,\r\n-    }));\r\n+  // const handleClick = () => {\r\n+  //   // Update the searchParamsInstance state variable with the new values\r\n+  //   setSearchParamsInstance((prevState) => ({\r\n+  //     ...prevState,\r\n+  //     allOrderItems: false,\r\n+  //     quantity: item.count,\r\n+  //   }));\r\n \r\n-    // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n-    navigation.navigate('orderitem', searchParamsInstance);\r\n-  };\r\n+  //   // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n+  //   navigation.navigate('orderitem', searchParamsInstance);\r\n+  // };\r\n+// Define a function that handles the click event on both buttons\r\n+const handleClick = (updateParams: UpdateParams) => {\r\n+  // Update the searchParamsInstance state variable with the property name and value\r\n+  setSearchParamsInstance((prevState) => ({\r\n+    ...prevState,\r\n+    [updateParams.prop]: updateParams.value,\r\n+  }));\r\n \r\n+  // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n+  navigation.navigate('orderitem', searchParamsInstance);\r\n+};\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n"
                },
                {
                    "date": 1704887397413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n-// Define a generic type that represents the property name and value\r\n-type UpdateParams = {\r\n-  prop: keyof SearchParamsOrderItem;\r\n-  value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n-};\r\n+  // Define a generic type that represents the property name and value\r\n+  type UpdateParams = {\r\n+    prop: keyof SearchParamsOrderItem;\r\n+    value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n+  };\r\n   // const searchParamsInstance = createSearchParamsOrderItem({\r\n   //   categoryType: categoryType,\r\n   //   allOrderItems: true,\r\n   // })\r\n@@ -52,19 +52,19 @@\n \r\n   //   // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n   //   navigation.navigate('orderitem', searchParamsInstance);\r\n   // };\r\n-// Define a function that handles the click event on both buttons\r\n-const handleClick = (updateParams: UpdateParams) => {\r\n-  // Update the searchParamsInstance state variable with the property name and value\r\n-  setSearchParamsInstance((prevState) => ({\r\n-    ...prevState,\r\n-    [updateParams.prop]: updateParams.value,\r\n-  }));\r\n+  // Define a function that handles the click event on both buttons\r\n+  const handleClick = (updateParams: UpdateParams) => {\r\n+    // Update the searchParamsInstance state variable with the property name and value\r\n+    setSearchParamsInstance((prevState) => ({\r\n+      ...prevState,\r\n+      [updateParams.prop]: updateParams.value,\r\n+    }));\r\n \r\n-  // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n-  navigation.navigate('orderitem', searchParamsInstance);\r\n-};\r\n+    // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n+    navigation.navigate('orderitem', searchParamsInstance);\r\n+  };\r\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n"
                },
                {
                    "date": 1704887437716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,8 @@\n       ...prevState,\r\n       [updateParams.prop]: updateParams.value,\r\n     }));\r\n \r\n-    // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n     navigation.navigate('orderitem', searchParamsInstance);\r\n   };\r\n \r\n   return (\r\n@@ -90,17 +89,17 @@\n         }} > */}\r\n         <ListItem.Subtitle >\r\n           Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n-        <ListItem.Subtitle onPress={handleClick}>\r\n+        <ListItem.Subtitle >\r\n           <Divider style={styles.dataDivider} />\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={handleClick}\r\n           />\r\n           {/* items Count: {item.count} */}\r\n         </ListItem.Subtitle>\r\n-        <ListItem.Subtitle onPress={handleClick}>\r\n+        <ListItem.Subtitle>\r\n           <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n             onPress={handleClick}\r\n           />\r\n"
                },
                {
                    "date": 1704887538801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,17 +93,17 @@\n         <ListItem.Subtitle >\r\n           <Divider style={styles.dataDivider} />\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n-            onPress={handleClick}\r\n-          />\r\n+            onPress={() => handleClick({ prop: 'quantity', value: item.count })}\r\n+            />\r\n           {/* items Count: {item.count} */}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle>\r\n           <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n-            onPress={handleClick}\r\n-          />\r\n+            onPress={() => handleClick({ prop: 'selling_price', value: item.maxPrice })}\r\n+            />\r\n         </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n     </ListItem>\r\n   );\r\n"
                },
                {
                    "date": 1704887926041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   // Define a function that handles the click event on both buttons\r\n   const handleClick = (updateParams: UpdateParams) => {\r\n     // Update the searchParamsInstance state variable with the property name and value\r\n     setSearchParamsInstance((prevState) => ({\r\n-      ...prevState,\r\n+     // ...prevState,\r\n       [updateParams.prop]: updateParams.value,\r\n     }));\r\n \r\n     navigation.navigate('orderitem', searchParamsInstance);\r\n"
                },
                {
                    "date": 1704888039171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   // Define a function that handles the click event on both buttons\r\n   const handleClick = (updateParams: UpdateParams) => {\r\n     // Update the searchParamsInstance state variable with the property name and value\r\n     setSearchParamsInstance((prevState) => ({\r\n-     // ...prevState,\r\n+      ...prevState,\r\n       [updateParams.prop]: updateParams.value,\r\n     }));\r\n \r\n     navigation.navigate('orderitem', searchParamsInstance);\r\n"
                },
                {
                    "date": 1704888214841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,17 @@\n       ...prevState,\r\n       [updateParams.prop]: updateParams.value,\r\n     }));\r\n \r\n+    // navigation.navigate('orderitem', searchParamsInstance);\r\n+  };\r\n+  // when the searchParamsInstance state changes\r\n+  useEffect(() => {\r\n+   \r\n     navigation.navigate('orderitem', searchParamsInstance);\r\n-  };\r\n+  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n \r\n+\r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n         <ListItem.Title onPress={() => {\r\n@@ -94,16 +100,16 @@\n           <Divider style={styles.dataDivider} />\r\n           <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={() => handleClick({ prop: 'quantity', value: item.count })}\r\n-            />\r\n+          />\r\n           {/* items Count: {item.count} */}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle>\r\n           <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n             onPress={() => handleClick({ prop: 'selling_price', value: item.maxPrice })}\r\n-            />\r\n+          />\r\n         </ListItem.Subtitle>\r\n       </ListItem.Content>\r\n     </ListItem>\r\n   );\r\n"
                },
                {
                    "date": 1704892222617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,12 +97,12 @@\n           Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle >\r\n           <Divider style={styles.dataDivider} />\r\n-          <Button\r\n+          {/* <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={() => handleClick({ prop: 'quantity', value: item.count })}\r\n-          />\r\n+          /> */}\r\n           {/* items Count: {item.count} */}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle>\r\n           <Button\r\n"
                },
                {
                    "date": 1704892410851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n           {/* <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={() => handleClick({ prop: 'quantity', value: item.count })}\r\n           /> */}\r\n-          {/* items Count: {item.count} */}\r\n+          items Count: {item.count}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle>\r\n           <Button\r\n             title={`Max Paid 🤐: ${item.maxPrice}`}\r\n"
                },
                {
                    "date": 1704892502650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,9 @@\n   type UpdateParams = {\r\n     prop: keyof SearchParamsOrderItem;\r\n     value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n   };\r\n-  // const searchParamsInstance = createSearchParamsOrderItem({\r\n-  //   categoryType: categoryType,\r\n-  //   allOrderItems: true,\r\n-  // })\r\n+\r\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n       categoryType: categoryType,\r\n       allOrderItems: true,\r\n@@ -41,32 +38,19 @@\n       }));\r\n     }\r\n   }, [categoryType]);\r\n \r\n-  // const handleClick = () => {\r\n-  //   // Update the searchParamsInstance state variable with the new values\r\n-  //   setSearchParamsInstance((prevState) => ({\r\n-  //     ...prevState,\r\n-  //     allOrderItems: false,\r\n-  //     quantity: item.count,\r\n-  //   }));\r\n-\r\n-  //   // Navigate to the orderitem screen with the searchParamsInstance state variable\r\n-  //   navigation.navigate('orderitem', searchParamsInstance);\r\n-  // };\r\n   // Define a function that handles the click event on both buttons\r\n   const handleClick = (updateParams: UpdateParams) => {\r\n     // Update the searchParamsInstance state variable with the property name and value\r\n     setSearchParamsInstance((prevState) => ({\r\n       ...prevState,\r\n       [updateParams.prop]: updateParams.value,\r\n     }));\r\n \r\n-    // navigation.navigate('orderitem', searchParamsInstance);\r\n   };\r\n   // when the searchParamsInstance state changes\r\n   useEffect(() => {\r\n-   \r\n     navigation.navigate('orderitem', searchParamsInstance);\r\n   }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n \r\n \r\n"
                },
                {
                    "date": 1704892542240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,28 +56,14 @@\n \r\n   return (\r\n     <ListItem key={index} bottomDivider>\r\n       <ListItem.Content>\r\n-        <ListItem.Title onPress={() => {\r\n-          // Use a computed property name to set the property based on the categoryType value\r\n-          //searchParamsInstance[categoryType] = item.title;\r\n-\r\n-          // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-        }}>\r\n-\r\n+        <ListItem.Title >\r\n           <Button\r\n             title={`🥵 ${item.title}`}\r\n             onPress={handleClick}\r\n           />\r\n-\r\n         </ListItem.Title>\r\n-\r\n-        {/* <ListItem.Subtitle onPress={() => {\r\n-\r\n-          searchParamsInstance.allOrderItems = false;\r\n-          searchParamsInstance.quantity = item.count;\r\n-          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-        }} > */}\r\n         <ListItem.Subtitle >\r\n           Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n         </ListItem.Subtitle>\r\n         <ListItem.Subtitle >\r\n"
                },
                {
                    "date": 1704892618106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n import { useNavigation } from \"@react-navigation/native\";\r\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n \r\n \r\n-const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, item, index }) => {\r\n+const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, categoryGrouped, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n   const navigation = useNavigation();\r\n \r\n   // Define a generic type that represents the property name and value\r\n@@ -54,35 +54,38 @@\n   }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n \r\n \r\n   return (\r\n-    <ListItem key={index} bottomDivider>\r\n-      <ListItem.Content>\r\n-        <ListItem.Title >\r\n-          <Button\r\n-            title={`🥵 ${item.title}`}\r\n-            onPress={handleClick}\r\n-          />\r\n-        </ListItem.Title>\r\n-        <ListItem.Subtitle >\r\n-          Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-        </ListItem.Subtitle>\r\n-        <ListItem.Subtitle >\r\n-          <Divider style={styles.dataDivider} />\r\n-          {/* <Button\r\n+    <>\r\n+      <ListCategoryGrouped key={index} categoryType='item_category2' item={item} index={index} />\r\n+      <ListItem key={index} bottomDivider>\r\n+        <ListItem.Content>\r\n+          <ListItem.Title >\r\n+            <Button\r\n+              title={`🥵 ${item.title}`}\r\n+              onPress={handleClick}\r\n+            />\r\n+          </ListItem.Title>\r\n+          <ListItem.Subtitle >\r\n+            Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+          </ListItem.Subtitle>\r\n+          <ListItem.Subtitle >\r\n+            <Divider style={styles.dataDivider} />\r\n+            {/* <Button\r\n             title={`Count: 😏 ${item.count}`}\r\n             onPress={() => handleClick({ prop: 'quantity', value: item.count })}\r\n           /> */}\r\n-          items Count: {item.count}\r\n-        </ListItem.Subtitle>\r\n-        <ListItem.Subtitle>\r\n-          <Button\r\n-            title={`Max Paid 🤐: ${item.maxPrice}`}\r\n-            onPress={() => handleClick({ prop: 'selling_price', value: item.maxPrice })}\r\n-          />\r\n-        </ListItem.Subtitle>\r\n-      </ListItem.Content>\r\n-    </ListItem>\r\n+            items Count: {item.count}\r\n+          </ListItem.Subtitle>\r\n+          <ListItem.Subtitle>\r\n+            <Button\r\n+              title={`Max Paid 🤐: ${item.maxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: item.maxPrice })}\r\n+            />\r\n+          </ListItem.Subtitle>\r\n+        </ListItem.Content>\r\n+      </ListItem>\r\n+    </>\r\n   );\r\n };\r\n \r\n // Define the styles for the component using StyleSheet\r\n"
                },
                {
                    "date": 1704892657968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,12 @@\n   );\r\n   useEffect(() => {\r\n     // Check if the categoryType prop is not null or undefined\r\n     if (categoryType != null) {\r\n-      // Set the searchParamsInstance[categoryType] property to the item.title value\r\n+      // Set the searchParamsInstance[categoryType] property to the categoryGroupedtitle value\r\n       setSearchParamsInstance((prevState) => ({\r\n         ...prevState,\r\n-        [categoryType]: item.title,\r\n+        [categoryType]: categoryGroupedtitle,\r\n       }));\r\n     }\r\n   }, [categoryType]);\r\n \r\n@@ -60,27 +60,27 @@\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n-              title={`🥵 ${item.title}`}\r\n+              title={`🥵 ${categoryGroupedtitle}`}\r\n               onPress={handleClick}\r\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n-            Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+            Avg Price: {categoryGroupedavgPrice} | Total Price: {categoryGroupedtotalPrice} | Avg Discount: {categoryGroupedavgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n             <Divider style={styles.dataDivider} />\r\n             {/* <Button\r\n-            title={`Count: 😏 ${item.count}`}\r\n-            onPress={() => handleClick({ prop: 'quantity', value: item.count })}\r\n+            title={`Count: 😏 ${categoryGroupedcount}`}\r\n+            onPress={() => handleClick({ prop: 'quantity', value: categoryGroupedcount })}\r\n           /> */}\r\n-            items Count: {item.count}\r\n+            items Count: {categoryGroupedcount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle>\r\n             <Button\r\n-              title={`Max Paid 🤐: ${item.maxPrice}`}\r\n-              onPress={() => handleClick({ prop: 'selling_price', value: item.maxPrice })}\r\n+              title={`Max Paid 🤐: ${categoryGroupedmaxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: categoryGroupedmaxPrice })}\r\n             />\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n"
                },
                {
                    "date": 1704892669932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,12 @@\n   );\r\n   useEffect(() => {\r\n     // Check if the categoryType prop is not null or undefined\r\n     if (categoryType != null) {\r\n-      // Set the searchParamsInstance[categoryType] property to the categoryGroupedtitle value\r\n+      // Set the searchParamsInstance[categoryType] property to the categoryGrouped.title value\r\n       setSearchParamsInstance((prevState) => ({\r\n         ...prevState,\r\n-        [categoryType]: categoryGroupedtitle,\r\n+        [categoryType]: categoryGrouped.title,\r\n       }));\r\n     }\r\n   }, [categoryType]);\r\n \r\n@@ -60,27 +60,27 @@\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n-              title={`🥵 ${categoryGroupedtitle}`}\r\n+              title={`🥵 ${categoryGrouped.title}`}\r\n               onPress={handleClick}\r\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n-            Avg Price: {categoryGroupedavgPrice} | Total Price: {categoryGroupedtotalPrice} | Avg Discount: {categoryGroupedavgDiscount}\r\n+            Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n             <Divider style={styles.dataDivider} />\r\n             {/* <Button\r\n-            title={`Count: 😏 ${categoryGroupedcount}`}\r\n-            onPress={() => handleClick({ prop: 'quantity', value: categoryGroupedcount })}\r\n+            title={`Count: 😏 ${categoryGrouped.count}`}\r\n+            onPress={() => handleClick({ prop: 'quantity', value: categoryGrouped.count })}\r\n           /> */}\r\n-            items Count: {categoryGroupedcount}\r\n+            items Count: {categoryGrouped.count}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle>\r\n             <Button\r\n-              title={`Max Paid 🤐: ${categoryGroupedmaxPrice}`}\r\n-              onPress={() => handleClick({ prop: 'selling_price', value: categoryGroupedmaxPrice })}\r\n+              title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n"
                },
                {
                    "date": 1704892722297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n \r\n   return (\r\n     <>\r\n-      <ListCategoryGrouped key={index} categoryType='item_category2' item={item} index={index} />\r\n+      <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} />\r\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n"
                },
                {
                    "date": 1704892763191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n \r\n   return (\r\n     <>\r\n-      <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} />\r\n+      {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} /> */}\r\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n"
                },
                {
                    "date": 1704892819194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n \r\n   return (\r\n     <>\r\n-      {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} /> */}\r\n+      <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} />\r\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n"
                },
                {
                    "date": 1704892917160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n \r\n   return (\r\n     <>\r\n-      <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} />\r\n+  \r\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n"
                },
                {
                    "date": 1704950258722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n+import CategoryTitles from './CategoryTitles';\r\n \r\n \r\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, categoryGrouped, index }) => {\r\n   // Use the useNavigation hook to get the navigation object\r\n@@ -52,9 +53,13 @@\n   useEffect(() => {\r\n     navigation.navigate('orderitem', searchParamsInstance);\r\n   }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n \r\n-\r\n+  const categoryTitles = [\r\n+    { id: 1, name: 'Item 1' },\r\n+    { id: 2, name: 'Item 2' },\r\n+    { id: 3, name: 'Item 3' }\r\n+  ];\r\n   return (\r\n     <>\r\n   \r\n       <ListItem key={index} bottomDivider>\r\n@@ -65,8 +70,11 @@\n               onPress={handleClick}\r\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n+            <ListItem.Subtitle>\r\n+            <CategoryTitles items={categoryTitles} />\r\n+            </ListItem.Subtitle>\r\n             Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n             <Divider style={styles.dataDivider} />\r\n@@ -81,8 +89,14 @@\n               title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle>\r\n+          <ListItem.Subtitle>\r\n+            <Button\r\n+              title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n+            />\r\n+          </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1704951901415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n             <ListItem.Subtitle>\r\n-            <CategoryTitles items={categoryTitles} />\r\n+            <CategoryTitles parent={categoryGrouped.parent_category} />\r\n             </ListItem.Subtitle>\r\n             Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n"
                },
                {
                    "date": 1704952138658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,13 +53,9 @@\n   useEffect(() => {\r\n     navigation.navigate('orderitem', searchParamsInstance);\r\n   }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n \r\n-  const categoryTitles = [\r\n-    { id: 1, name: 'Item 1' },\r\n-    { id: 2, name: 'Item 2' },\r\n-    { id: 3, name: 'Item 3' }\r\n-  ];\r\n+\r\n   return (\r\n     <>\r\n   \r\n       <ListItem key={index} bottomDivider>\r\n@@ -71,9 +67,9 @@\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n             <ListItem.Subtitle>\r\n-            <CategoryTitles parent={categoryGrouped.parent_category} />\r\n+            <CategoryTitles parent={categoryGrouped.parent} />\r\n             </ListItem.Subtitle>\r\n             Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n"
                },
                {
                    "date": 1704953609365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n             <ListItem.Subtitle>\r\n-            <CategoryTitles parent={categoryGrouped.parent} />\r\n+            <CategoryTitles childs={categoryGrouped.childs} />\r\n             </ListItem.Subtitle>\r\n             Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n"
                },
                {
                    "date": 1704955842049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n             <ListItem.Subtitle>\r\n-            <CategoryTitles childs={categoryGrouped.childs} />\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n             </ListItem.Subtitle>\r\n             Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n"
                },
                {
                    "date": 1704957790983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n-              title={`🥵 ${categoryGrouped.title}`}\r\n+              title={`🥵 ${categoryGrouped.title} (${categoryGrouped.count})`}\r\n               onPress={handleClick}\r\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n@@ -77,9 +77,9 @@\n             {/* <Button\r\n             title={`Count: 😏 ${categoryGrouped.count}`}\r\n             onPress={() => handleClick({ prop: 'quantity', value: categoryGrouped.count })}\r\n           /> */}\r\n-            items Count: {categoryGrouped.count}\r\n+\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle>\r\n             <Button\r\n               title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n"
                },
                {
                    "date": 1704957815760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,20 +66,11 @@\n               onPress={handleClick}\r\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n-            <ListItem.Subtitle>\r\n-            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n-            </ListItem.Subtitle>\r\n             Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n-            <Divider style={styles.dataDivider} />\r\n-            {/* <Button\r\n-            title={`Count: 😏 ${categoryGrouped.count}`}\r\n-            onPress={() => handleClick({ prop: 'quantity', value: categoryGrouped.count })}\r\n-          /> */}\r\n-\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle>\r\n             <Button\r\n               title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n@@ -91,8 +82,11 @@\n               title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle>\r\n+          <ListItem.Subtitle>\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n+            </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1704958126643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \r\n \r\n   return (\r\n     <>\r\n-  \r\n+\r\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n           <ListItem.Title >\r\n             <Button\r\n@@ -66,9 +66,15 @@\n               onPress={handleClick}\r\n             />\r\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n-            Avg Price: {categoryGrouped.avgPrice} | Total Price: {categoryGrouped.totalPrice} | Avg Discount: {categoryGrouped.avgDiscount}\r\n+          \r\n+            <Card>\r\n+              {/* Render the properties of the categoryGrouped object */}\r\n+              <Card.Title>Avg Price: {categoryGrouped.avgPrice}</Card.Title>\r\n+              <Card.Title>Total Price: {categoryGrouped.totalPrice}</Card.Title>\r\n+              <Card.Title>Avg Discount: {categoryGrouped.avgDiscount}</Card.Title>\r\n+            </Card>\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle>\r\n@@ -84,9 +90,9 @@\n             />\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle>\r\n             <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n-            </ListItem.Subtitle>\r\n+          </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1704959091412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import CategoryTitles from './CategoryTitles';\r\n \r\n \r\n const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ categoryType, categoryGrouped, index }) => {\r\n-  // Use the useNavigation hook to get the navigation object\r\n+\r\n   const navigation = useNavigation();\r\n \r\n   // Define a generic type that represents the property name and value\r\n   type UpdateParams = {\r\n@@ -68,9 +68,9 @@\n           </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n           \r\n             <Card>\r\n-              {/* Render the properties of the categoryGrouped object */}\r\n+  \r\n               <Card.Title>Avg Price: {categoryGrouped.avgPrice}</Card.Title>\r\n               <Card.Title>Total Price: {categoryGrouped.totalPrice}</Card.Title>\r\n               <Card.Title>Avg Discount: {categoryGrouped.avgDiscount}</Card.Title>\r\n             </Card>\r\n@@ -97,9 +97,9 @@\n     </>\r\n   );\r\n };\r\n \r\n-// Define the styles for the component using StyleSheet\r\n+\r\n const styles = StyleSheet.create({\r\n   container: {\r\n     flex: 1,\r\n     alignItems: \"center\",\r\n"
                },
                {
                    "date": 1705119631776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,14 +82,14 @@\n               title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle>\r\n-          <ListItem.Subtitle>\r\n+          {/* <ListItem.Subtitle>\r\n             <Button\r\n               title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n-          </ListItem.Subtitle>\r\n+          </ListItem.Subtitle> */}\r\n           <ListItem.Subtitle>\r\n             <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n"
                }
            ],
            "date": 1704792969925,
            "name": "Commit-0",
            "content": "import React from 'react';\r\ninterface ListItemComponentProps {\r\n  item: category_grouped;\r\n  index: number;\r\n  // Replace with the type of your theme object\r\n}\r\nimport { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\nimport { category_grouped } from '../entity/OrdersProductsCategoriesInfo ';\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\n\r\nconst ListCategoryGrouped: React.FC<ListItemComponentProps> = ({ item, index }) => {\r\n  // Use the useNavigation hook to get the navigation object\r\n  const navigation = useNavigation();\r\n  // Define the detail component\r\n  const detail = ({ route }) => {\r\n    // Use the route.params property to get the item that was passed from the previous screen\r\n    const { item } = route.params;\r\n    // ... use the item to render the UI of the detail screen\r\n  };\r\n\r\n  return (\r\n    <ListItem key={index} bottomDivider>\r\n      <ListItem.Content>\r\n        <ListItem.Title onPress={() => {\r\n          navigation.navigate(\"detail\", { item });\r\n        }}>\r\n          {item.title}\r\n        </ListItem.Title>\r\n        <ListItem.Subtitle >\r\n          Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n        </ListItem.Subtitle>\r\n      </ListItem.Content>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default ListCategoryGrouped;"
        }
    ]
}