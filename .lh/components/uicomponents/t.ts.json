{
    "sourceFile": "components/uicomponents/t.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1705499747134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1705499747134,
            "name": "Commit-0",
            "content": "// Parent component\r\ninterface OrdersProductsCategoriesProps {\r\n    categoriesValue: CategorySearchParams;\r\n  }\r\n  \r\n  const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({\r\n    categoriesValue,\r\n  }) => {\r\n    // Use the useTheme hook to get the theme object from RNEUI\r\n    const { theme } = useTheme();\r\n  \r\n    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(\r\n      categoriesValue\r\n    );\r\n  \r\n    \r\n    return (\r\n      <View style={styles.container}>\r\n        {isLoading && (\r\n          <Text style={[styles.loading, { color: theme.colors.primary }]}>\r\n            Loading...\r\n          </Text>\r\n        )}\r\n        {isError && (\r\n          <Text style={[styles.error, { color: theme.colors.error }]}>\r\n            Error: {error.message}\r\n          </Text>\r\n        )}\r\n        {data && (\r\n          <>\r\n            {data.orderGroupedCategory_2.map((item, index) => (\r\n              <ListItem.Subtitle\r\n                style={{ borderWidth: 1, borderColor: \"black\" }}\r\n              >\r\n                {/* Pass the searchParamsInstance and handleClick as props to the child component */}\r\n                <ListCategoryGrouped\r\n                  categoryData={item}\r\n                  index={index}\r\n                  key={index}\r\n                  searchParamsInstance={searchParamsInstance}\r\n                  handleClick={handleClick}\r\n                />\r\n              </ListItem.Subtitle>\r\n            ))}\r\n          </>\r\n        )}\r\n      </View>\r\n    );\r\n  };\r\n  \r\n  // Child component\r\n  interface ListItemComponentProps {\r\n    categoryData: any;\r\n    index: number;\r\n    // Add the searchParamsInstance and handleClick as props\r\n    searchParamsInstance: SearchParamsOrderItem;\r\n    handleClick: (\r\n      event: React.MouseEvent,\r\n      updateParams: {\r\n        prop: keyof SearchParamsOrderItem;\r\n        value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n      }\r\n    ) => void;\r\n  }\r\n  \r\n  const ListCategoryGrouped: React.FC<ListItemComponentProps> = ({\r\n    categoryData,\r\n    index,\r\n    // Destructure the searchParamsInstance and handleClick from props\r\n    searchParamsInstance,\r\n    handleClick,\r\n  }) => {\r\n    // Remove the navigation, UpdateParams, searchParamsInstance, handleClick, and useEffect from the child component\r\n  \r\n    return (\r\n      // Use the searchParamsInstance and handleClick from props\r\n      <View>\r\n        <Text>{categoryData.name}</Text>\r\n        <Text>{categoryData.title}</Text>\r\n        <Button\r\n          onPress={(event) =>\r\n            handleClick(event, {\r\n              prop: \"categoryType\",\r\n              value: categoryData.name,\r\n            })\r\n          }\r\n        >\r\n          Set category type\r\n        </Button>\r\n        <Button\r\n          onPress={(event) =>\r\n            handleClick(event, {\r\n              prop: categoryData.name,\r\n              value: categoryData.title,\r\n            })\r\n          }\r\n        >\r\n          Set category value\r\n        </Button>\r\n        <Button\r\n          onPress={(event) =>\r\n            handleClick(event, {\r\n              prop: \"categorySearchParams\",\r\n              value: { item_category2: categoryData.title } as CategorySearchParams,\r\n            })\r\n          }\r\n        >\r\n          Set category search params\r\n        </Button>\r\n      </View>\r\n    );\r\n  };"
        }
    ]
}