{
    "sourceFile": "components/uicomponents/ListCategoryGrouped2.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1705388172259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705388332174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,17 +84,9 @@\n               title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle>\r\n-          {/* <ListItem.Subtitle>\r\n-            <Button\r\n-              title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n-              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n-            />\r\n-          </ListItem.Subtitle> */}\r\n-          <ListItem.Subtitle>\r\n-            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n-          </ListItem.Subtitle>\r\n+         \r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1705388361351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,14 +61,9 @@\n     <>\r\n \r\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n-          <ListItem.Title >\r\n-            <Button\r\n-              title={`🥵 ${categoryGrouped.title} (${categoryGrouped.count})`}\r\n-              onPress={(event) => handleClick(event, { prop: 'item_category2', value: categoryGrouped.title })}\r\n-              />\r\n-          </ListItem.Title>\r\n+         \r\n           <ListItem.Subtitle >\r\n           \r\n             <Card>\r\n \r\n@@ -78,15 +73,10 @@\n             </Card>\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n           </ListItem.Subtitle>\r\n-          <ListItem.Subtitle>\r\n-            <Button\r\n-              title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n-              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n-            />\r\n-          </ListItem.Subtitle>\r\n          \r\n+         \r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1705388375416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,15 +49,9 @@\n       [updateParams.prop]: updateParams.value,\r\n     }));\r\n \r\n   };\r\n-  // when the searchParamsInstance state changes\r\n-  useLayoutEffect(() => {\r\n-    console.log(searchParamsInstance);\r\n-    navigation.navigate('orderitem', searchParamsInstance);\r\n-  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n-\r\n-\r\n+ \r\n   return (\r\n     <>\r\n \r\n       <ListItem key={index} bottomDivider>\r\n"
                },
                {
                    "date": 1705388650609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,15 @@\n       [updateParams.prop]: updateParams.value,\r\n     }));\r\n \r\n   };\r\n- \r\n+  // when the searchParamsInstance state changes\r\n+  useLayoutEffect(() => {\r\n+   // console.log(searchParamsInstance);\r\n+    navigation.navigate('orderitem', searchParamsInstance);\r\n+  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+\r\n+\r\n   return (\r\n     <>\r\n \r\n       <ListItem key={index} bottomDivider>\r\n"
                },
                {
                    "date": 1705388675661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,8 @@\n     }));\r\n \r\n   };\r\n   // when the searchParamsInstance state changes\r\n-  useLayoutEffect(() => {\r\n-   // console.log(searchParamsInstance);\r\n-    navigation.navigate('orderitem', searchParamsInstance);\r\n-  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n \r\n \r\n   return (\r\n     <>\r\n"
                },
                {
                    "date": 1705389052969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n       categoryType: categoryType,\r\n-      allOrderItems: true,\r\n+    //  allOrderItems: true,\r\n     })\r\n   );\r\n   useEffect(() => {\r\n     // Check if the categoryType prop is not null or undefined\r\n@@ -50,8 +50,12 @@\n     }));\r\n \r\n   };\r\n   // when the searchParamsInstance state changes\r\n+  useLayoutEffect(() => {\r\n+    console.log(searchParamsInstance);\r\n+    navigation.navigate('orderitem', searchParamsInstance);\r\n+  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n \r\n \r\n   return (\r\n     <>\r\n"
                },
                {
                    "date": 1705389064980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   };\r\n \r\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n-      categoryType: categoryType,\r\n+      //categoryType: categoryType,\r\n     //  allOrderItems: true,\r\n     })\r\n   );\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1705389111754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n   };\r\n \r\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n-      //categoryType: categoryType,\r\n-    //  allOrderItems: true,\r\n+      categoryType: categoryType,\r\n+      allOrderItems: true,\r\n     })\r\n   );\r\n   useEffect(() => {\r\n     // Check if the categoryType prop is not null or undefined\r\n"
                },
                {
                    "date": 1705389192643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n interface ListItemComponentProps {\r\n   categoryType: string\r\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n+  item_category2:string;\r\n }\r\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n@@ -12,9 +13,9 @@\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n import CategoryTitles from './CategoryTitles';\r\n \r\n \r\n-const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType, categoryGrouped, index }) => {\r\n+const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,item_category2 categoryGrouped, index }) => {\r\n \r\n   const navigation = useNavigation();\r\n \r\n   // Define a generic type that represents the property name and value\r\n"
                },
                {
                    "date": 1705389236326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n import CategoryTitles from './CategoryTitles';\r\n \r\n \r\n-const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,item_category2 categoryGrouped, index }) => {\r\n+const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,item_category2 ,categoryGrouped, index }) => {\r\n \r\n   const navigation = useNavigation();\r\n \r\n   // Define a generic type that represents the property name and value\r\n@@ -26,8 +26,9 @@\n \r\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n       categoryType: categoryType,\r\n+      item_category2:item_category2,\r\n       allOrderItems: true,\r\n     })\r\n   );\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1705389318230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,20 @@\n interface ListItemComponentProps {\r\n   categoryType: string\r\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n-  item_category2:string;\r\n+  ordersProductsCategories:CategorySearchParams;\r\n }\r\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n-import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n+import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n import CategoryTitles from './CategoryTitles';\r\n \r\n \r\n-const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,item_category2 ,categoryGrouped, index }) => {\r\n+const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,ordersProductsCategories ,categoryGrouped, index }) => {\r\n \r\n   const navigation = useNavigation();\r\n \r\n   // Define a generic type that represents the property name and value\r\n"
                },
                {
                    "date": 1705389476347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \r\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n       categoryType: categoryType,\r\n-      item_category2:item_category2,\r\n+      item_category2:ordersProductsCategories.item_category2,\r\n       allOrderItems: true,\r\n     })\r\n   );\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1705389493600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n       categoryType: categoryType,\r\n       item_category2:ordersProductsCategories.item_category2,\r\n+      item_category3:ordersProductsCategories.item_category3,\r\n       allOrderItems: true,\r\n     })\r\n   );\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1705389581125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n }\r\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n-import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\n+import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n import CategoryTitles from './CategoryTitles';\r\n \r\n"
                },
                {
                    "date": 1705391055680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,14 @@\n     <>\r\n \r\n       <ListItem key={index} bottomDivider>\r\n         <ListItem.Content>\r\n-         \r\n+          <ListItem.Title >\r\n+            <Button\r\n+              title={`🥵 ${categoryGrouped.title} (${categoryGrouped.count})`}\r\n+              onPress={(event) => handleClick(event, { prop: 'item_category2', value: categoryGrouped.title })}\r\n+              />\r\n+          </ListItem.Title>\r\n           <ListItem.Subtitle >\r\n           \r\n             <Card>\r\n \r\n@@ -76,10 +81,23 @@\n             </Card>\r\n           </ListItem.Subtitle>\r\n           <ListItem.Subtitle >\r\n           </ListItem.Subtitle>\r\n-         \r\n-         \r\n+          <ListItem.Subtitle>\r\n+            <Button\r\n+              title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n+            />\r\n+          </ListItem.Subtitle>\r\n+          {/* <ListItem.Subtitle>\r\n+            <Button\r\n+              title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n+            />\r\n+          </ListItem.Subtitle> */}\r\n+          <ListItem.Subtitle>\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n+          </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1705391068497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,11 +93,9 @@\n               title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle> */}\r\n-          <ListItem.Subtitle>\r\n-            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n-          </ListItem.Subtitle>\r\n+          \r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1705391145362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,11 @@\n               title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle> */}\r\n-          \r\n+          <ListItem.Subtitle>\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n+          </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n   );\r\n"
                },
                {
                    "date": 1705391186008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle> */}\r\n           <ListItem.Subtitle>\r\n-            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n+            {/* <CategoryTitles categoryTitles={categoryGrouped.childs} /> */}\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n"
                },
                {
                    "date": 1705391197590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle> */}\r\n           <ListItem.Subtitle>\r\n-            {/* <CategoryTitles categoryTitles={categoryGrouped.childs} /> */}\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n"
                },
                {
                    "date": 1705397841972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n import CategoryTitles from './CategoryTitles';\r\n \r\n \r\n-const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,ordersProductsCategories ,categoryGrouped, index }) => {\r\n+const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,categoryValues ,categoryGrouped, index }) => {\r\n \r\n   const navigation = useNavigation();\r\n \r\n   // Define a generic type that represents the property name and value\r\n@@ -27,9 +27,9 @@\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n       categoryType: categoryType,\r\n       item_category2:ordersProductsCategories.item_category2,\r\n-      item_category3:ordersProductsCategories.item_category3,\r\n+      categorySearchParams:categoryValues,\r\n       allOrderItems: true,\r\n     })\r\n   );\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1705397860522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n interface ListItemComponentProps {\r\n   categoryType: string\r\n   categoryGrouped: CategoryGrouped;\r\n   index: number;\r\n-  ordersProductsCategories:CategorySearchParams;\r\n+  categoryValues:CategorySearchParams;\r\n }\r\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n@@ -26,9 +26,9 @@\n \r\n   const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n     createSearchParamsOrderItem({\r\n       categoryType: categoryType,\r\n-      item_category2:ordersProductsCategories.item_category2,\r\n+     // item_category2:categoryValues.item_category2,\r\n       categorySearchParams:categoryValues,\r\n       allOrderItems: true,\r\n     })\r\n   );\r\n"
                },
                {
                    "date": 1705397880611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+import React, { useEffect, useLayoutEffect, useState } from 'react';\r\n+interface ListItemComponentProps {\r\n+  categoryType: string\r\n+  categoryGrouped: CategoryGrouped;\r\n+  index: number;\r\n+  categoryValues:CategorySearchParams;\r\n+}\r\n+import { View, Text, StyleSheet } from 'react-native';\r\n+\r\n+import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n+import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo';\r\n+import { useNavigation } from \"@react-navigation/native\";\r\n+import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n+import CategoryTitles from './CategoryTitles';\r\n+\r\n+\r\n+const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,categoryValues ,categoryGrouped, index }) => {\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  // Define a generic type that represents the property name and value\r\n+  type UpdateParams = {\r\n+    prop: keyof SearchParamsOrderItem;\r\n+    value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n+  };\r\n+\r\n+  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    createSearchParamsOrderItem({\r\n+      categoryType: categoryType,\r\n+      item_category2:categoryValues.item_category2,\r\n+      categorySearchParams:categoryValues,\r\n+      allOrderItems: true,\r\n+    })\r\n+  );\r\n+  useEffect(() => {\r\n+    // Check if the categoryType prop is not null or undefined\r\n+    if (categoryType != null) {\r\n+      // Set the searchParamsInstance[categoryType] property to the categoryGrouped.title value\r\n+      setSearchParamsInstance((prevState) => ({\r\n+        ...prevState,\r\n+        [categoryType]: categoryGrouped.title,\r\n+      }));\r\n+    }\r\n+  }, [categoryType]);\r\n+\r\n+  // Define a function that handles the click event on both buttons\r\n+  const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n+    event.preventDefault(); // Add this line to prevent the default behavior of the event\r\n+    // Update the searchParamsInstance state variable with the property name and value\r\n+    setSearchParamsInstance((prevState) => ({\r\n+      ...prevState,\r\n+      [updateParams.prop]: updateParams.value,\r\n+    }));\r\n+\r\n+  };\r\n+  // when the searchParamsInstance state changes\r\n+  useLayoutEffect(() => {\r\n+    console.log(searchParamsInstance);\r\n+    navigation.navigate('orderitem', searchParamsInstance);\r\n+  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+\r\n+\r\n+  return (\r\n+    <>\r\n+\r\n+      <ListItem key={index} bottomDivider>\r\n+        <ListItem.Content>\r\n+          <ListItem.Title >\r\n+            <Button\r\n+              title={`🥵 ${categoryGrouped.title} (${categoryGrouped.count})`}\r\n+              onPress={(event) => handleClick(event, { prop: 'item_category2', value: categoryGrouped.title })}\r\n+              />\r\n+          </ListItem.Title>\r\n+          <ListItem.Subtitle >\r\n+          \r\n+            <Card>\r\n+\r\n+              <Card.Title>Avg Price: {categoryGrouped.avgPrice}</Card.Title>\r\n+              <Card.Title>Total Price: {categoryGrouped.totalPrice}</Card.Title>\r\n+              <Card.Title>Avg Discount: {categoryGrouped.avgDiscount}</Card.Title>\r\n+            </Card>\r\n+          </ListItem.Subtitle>\r\n+          <ListItem.Subtitle >\r\n+          </ListItem.Subtitle>\r\n+          <ListItem.Subtitle>\r\n+            <Button\r\n+              title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n+            />\r\n+          </ListItem.Subtitle>\r\n+          {/* <ListItem.Subtitle>\r\n+            <Button\r\n+              title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n+              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n+            />\r\n+          </ListItem.Subtitle> */}\r\n+          <ListItem.Subtitle>\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n+          </ListItem.Subtitle>\r\n+        </ListItem.Content>\r\n+      </ListItem>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: {\r\n+    flex: 1,\r\n+    alignItems: \"center\",\r\n+    justifyContent: \"center\",\r\n+  },\r\n+  loading: {\r\n+    fontSize: 20,\r\n+    fontWeight: \"bold\",\r\n+  },\r\n+  error: {\r\n+    fontSize: 20,\r\n+    fontWeight: \"bold\",\r\n+  },\r\n+  dataContainer: {\r\n+    margin: 10,\r\n+  },\r\n+  dataTitle: {\r\n+    fontSize: 18,\r\n+    fontWeight: \"bold\",\r\n+    marginVertical: 5,\r\n+  },\r\n+  dataDivider: {\r\n+    marginVertical: 5,\r\n+  },\r\n+});\r\n+\r\n+\r\n+export default ListCategoryGrouped2;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1705397918720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle> */}\r\n           <ListItem.Subtitle>\r\n-            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n+            {/* <CategoryTitles categoryTitles={categoryGrouped.childs} /> */}\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n@@ -131,140 +131,5 @@\n   },\r\n });\r\n \r\n \r\n-export default ListCategoryGrouped2;\n-import React, { useEffect, useLayoutEffect, useState } from 'react';\r\n-interface ListItemComponentProps {\r\n-  categoryType: string\r\n-  categoryGrouped: CategoryGrouped;\r\n-  index: number;\r\n-  categoryValues:CategorySearchParams;\r\n-}\r\n-import { View, Text, StyleSheet } from 'react-native';\r\n-\r\n-import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n-import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo';\r\n-import { useNavigation } from \"@react-navigation/native\";\r\n-import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n-import CategoryTitles from './CategoryTitles';\r\n-\r\n-\r\n-const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,categoryValues ,categoryGrouped, index }) => {\r\n-\r\n-  const navigation = useNavigation();\r\n-\r\n-  // Define a generic type that represents the property name and value\r\n-  type UpdateParams = {\r\n-    prop: keyof SearchParamsOrderItem;\r\n-    value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n-  };\r\n-\r\n-  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-    createSearchParamsOrderItem({\r\n-      categoryType: categoryType,\r\n-     // item_category2:categoryValues.item_category2,\r\n-      categorySearchParams:categoryValues,\r\n-      allOrderItems: true,\r\n-    })\r\n-  );\r\n-  useEffect(() => {\r\n-    // Check if the categoryType prop is not null or undefined\r\n-    if (categoryType != null) {\r\n-      // Set the searchParamsInstance[categoryType] property to the categoryGrouped.title value\r\n-      setSearchParamsInstance((prevState) => ({\r\n-        ...prevState,\r\n-        [categoryType]: categoryGrouped.title,\r\n-      }));\r\n-    }\r\n-  }, [categoryType]);\r\n-\r\n-  // Define a function that handles the click event on both buttons\r\n-  const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n-    event.preventDefault(); // Add this line to prevent the default behavior of the event\r\n-    // Update the searchParamsInstance state variable with the property name and value\r\n-    setSearchParamsInstance((prevState) => ({\r\n-      ...prevState,\r\n-      [updateParams.prop]: updateParams.value,\r\n-    }));\r\n-\r\n-  };\r\n-  // when the searchParamsInstance state changes\r\n-  useLayoutEffect(() => {\r\n-    console.log(searchParamsInstance);\r\n-    navigation.navigate('orderitem', searchParamsInstance);\r\n-  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n-\r\n-\r\n-  return (\r\n-    <>\r\n-\r\n-      <ListItem key={index} bottomDivider>\r\n-        <ListItem.Content>\r\n-          <ListItem.Title >\r\n-            <Button\r\n-              title={`🥵 ${categoryGrouped.title} (${categoryGrouped.count})`}\r\n-              onPress={(event) => handleClick(event, { prop: 'item_category2', value: categoryGrouped.title })}\r\n-              />\r\n-          </ListItem.Title>\r\n-          <ListItem.Subtitle >\r\n-          \r\n-            <Card>\r\n-\r\n-              <Card.Title>Avg Price: {categoryGrouped.avgPrice}</Card.Title>\r\n-              <Card.Title>Total Price: {categoryGrouped.totalPrice}</Card.Title>\r\n-              <Card.Title>Avg Discount: {categoryGrouped.avgDiscount}</Card.Title>\r\n-            </Card>\r\n-          </ListItem.Subtitle>\r\n-          <ListItem.Subtitle >\r\n-          </ListItem.Subtitle>\r\n-          <ListItem.Subtitle>\r\n-            <Button\r\n-              title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n-              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n-            />\r\n-          </ListItem.Subtitle>\r\n-          {/* <ListItem.Subtitle>\r\n-            <Button\r\n-              title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n-              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n-            />\r\n-          </ListItem.Subtitle> */}\r\n-          <ListItem.Subtitle>\r\n-            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n-          </ListItem.Subtitle>\r\n-        </ListItem.Content>\r\n-      </ListItem>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-const styles = StyleSheet.create({\r\n-  container: {\r\n-    flex: 1,\r\n-    alignItems: \"center\",\r\n-    justifyContent: \"center\",\r\n-  },\r\n-  loading: {\r\n-    fontSize: 20,\r\n-    fontWeight: \"bold\",\r\n-  },\r\n-  error: {\r\n-    fontSize: 20,\r\n-    fontWeight: \"bold\",\r\n-  },\r\n-  dataContainer: {\r\n-    margin: 10,\r\n-  },\r\n-  dataTitle: {\r\n-    fontSize: 18,\r\n-    fontWeight: \"bold\",\r\n-    marginVertical: 5,\r\n-  },\r\n-  dataDivider: {\r\n-    marginVertical: 5,\r\n-  },\r\n-});\r\n-\r\n-\r\n export default ListCategoryGrouped2;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1705397968469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle> */}\r\n           <ListItem.Subtitle>\r\n-            {/* <CategoryTitles categoryTitles={categoryGrouped.childs} /> */}\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} categoryValues={categorySearchParams} />\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n"
                },
                {
                    "date": 1705397990940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n               onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n             />\r\n           </ListItem.Subtitle> */}\r\n           <ListItem.Subtitle>\r\n-            <CategoryTitles categoryTitles={categoryGrouped.childs} categoryValues={categorySearchParams} />\r\n+            <CategoryTitles categoryTitles={categoryGrouped.childs} categoryValues={categoryValues} />\r\n           </ListItem.Subtitle>\r\n         </ListItem.Content>\r\n       </ListItem>\r\n     </>\r\n"
                },
                {
                    "date": 1705398173626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   }, [categoryType]);\r\n \r\n   // Define a function that handles the click event on both buttons\r\n   const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n-    event.preventDefault(); // Add this line to prevent the default behavior of the event\r\n+    event.preventDefault();\r\n     // Update the searchParamsInstance state variable with the property name and value\r\n     setSearchParamsInstance((prevState) => ({\r\n       ...prevState,\r\n       [updateParams.prop]: updateParams.value,\r\n"
                },
                {
                    "date": 1705483264181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n-import CategoryTitles from './CategoryTitles';\r\n+import CategoryTitles from './CategoryChilds';\r\n \r\n \r\n const ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType,categoryValues ,categoryGrouped, index }) => {\r\n \r\n"
                }
            ],
            "date": 1705388172259,
            "name": "Commit-0",
            "content": "import React, { useEffect, useLayoutEffect, useState } from 'react';\r\ninterface ListItemComponentProps {\r\n  categoryType: string\r\n  categoryGrouped: CategoryGrouped;\r\n  index: number;\r\n}\r\nimport { View, Text, StyleSheet } from 'react-native';\r\n\r\nimport { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\nimport { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo ';\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\nimport CategoryTitles from './CategoryTitles';\r\n\r\n\r\nconst ListCategoryGrouped2: React.FC<ListItemComponentProps> = ({ categoryType, categoryGrouped, index }) => {\r\n\r\n  const navigation = useNavigation();\r\n\r\n  // Define a generic type that represents the property name and value\r\n  type UpdateParams = {\r\n    prop: keyof SearchParamsOrderItem;\r\n    value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n  };\r\n\r\n  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n    createSearchParamsOrderItem({\r\n      categoryType: categoryType,\r\n      allOrderItems: true,\r\n    })\r\n  );\r\n  useEffect(() => {\r\n    // Check if the categoryType prop is not null or undefined\r\n    if (categoryType != null) {\r\n      // Set the searchParamsInstance[categoryType] property to the categoryGrouped.title value\r\n      setSearchParamsInstance((prevState) => ({\r\n        ...prevState,\r\n        [categoryType]: categoryGrouped.title,\r\n      }));\r\n    }\r\n  }, [categoryType]);\r\n\r\n  // Define a function that handles the click event on both buttons\r\n  const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n    event.preventDefault(); // Add this line to prevent the default behavior of the event\r\n    // Update the searchParamsInstance state variable with the property name and value\r\n    setSearchParamsInstance((prevState) => ({\r\n      ...prevState,\r\n      [updateParams.prop]: updateParams.value,\r\n    }));\r\n\r\n  };\r\n  // when the searchParamsInstance state changes\r\n  useLayoutEffect(() => {\r\n    console.log(searchParamsInstance);\r\n    navigation.navigate('orderitem', searchParamsInstance);\r\n  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <ListItem key={index} bottomDivider>\r\n        <ListItem.Content>\r\n          <ListItem.Title >\r\n            <Button\r\n              title={`🥵 ${categoryGrouped.title} (${categoryGrouped.count})`}\r\n              onPress={(event) => handleClick(event, { prop: 'item_category2', value: categoryGrouped.title })}\r\n              />\r\n          </ListItem.Title>\r\n          <ListItem.Subtitle >\r\n          \r\n            <Card>\r\n\r\n              <Card.Title>Avg Price: {categoryGrouped.avgPrice}</Card.Title>\r\n              <Card.Title>Total Price: {categoryGrouped.totalPrice}</Card.Title>\r\n              <Card.Title>Avg Discount: {categoryGrouped.avgDiscount}</Card.Title>\r\n            </Card>\r\n          </ListItem.Subtitle>\r\n          <ListItem.Subtitle >\r\n          </ListItem.Subtitle>\r\n          <ListItem.Subtitle>\r\n            <Button\r\n              title={`Max Paid 🤐: ${categoryGrouped.maxPrice}`}\r\n              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n            />\r\n          </ListItem.Subtitle>\r\n          {/* <ListItem.Subtitle>\r\n            <Button\r\n              title={`Max Repeat Repeat 🤐: ${categoryGrouped.maxPrice}`}\r\n              onPress={() => handleClick({ prop: 'selling_price', value: categoryGrouped.maxPrice })}\r\n            />\r\n          </ListItem.Subtitle> */}\r\n          <ListItem.Subtitle>\r\n            <CategoryTitles categoryTitles={categoryGrouped.childs} />\r\n          </ListItem.Subtitle>\r\n        </ListItem.Content>\r\n      </ListItem>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  loading: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n  },\r\n  error: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n  },\r\n  dataContainer: {\r\n    margin: 10,\r\n  },\r\n  dataTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    marginVertical: 5,\r\n  },\r\n  dataDivider: {\r\n    marginVertical: 5,\r\n  },\r\n});\r\n\r\n\r\nexport default ListCategoryGrouped2;"
        }
    ]
}