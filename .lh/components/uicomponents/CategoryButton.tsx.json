{
    "sourceFile": "components/uicomponents/CategoryButton.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1705405992805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705406401318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,17 @@\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n \r\n+\r\n+const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    createSearchParamsOrderItem({\r\n+        categoryType: \"item_category2\",//categoryType,\r\n+      item_category2:categoryValues.item_category2,\r\n+      categorySearchParams:categoryValues,\r\n+      allOrderItems: true,\r\n+    })\r\n+  );\r\n // Define the props for the custom component\r\n interface CategoryButtonProps {\r\n   title: string;\r\n   count: number;\r\n"
                },
                {
                    "date": 1705406410056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,16 +5,9 @@\n \r\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n \r\n \r\n-const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-    createSearchParamsOrderItem({\r\n-        categoryType: \"item_category2\",//categoryType,\r\n-      item_category2:categoryValues.item_category2,\r\n-      categorySearchParams:categoryValues,\r\n-      allOrderItems: true,\r\n-    })\r\n-  );\r\n+\r\n // Define the props for the custom component\r\n interface CategoryButtonProps {\r\n   title: string;\r\n   count: number;\r\n"
                },
                {
                    "date": 1705406731647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   }, [searchParamsInstance]);\r\n \r\n   // Return the JSX element for the button\r\n   return (\r\n-    <Button\r\n+    <Button key={}\r\n       title={`ðŸ¥µ ${title} (${count})`}\r\n       onPress={handleClick}\r\n     />\r\n   );\r\n"
                },
                {
                    "date": 1705482786744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,61 @@\n // Import React and other libraries\r\n-import React, { useEffect, useState } from 'react';\r\n+import React, { useEffect, useLayoutEffect, useState } from 'react';\r\n import { Button } from '@rneui/themed';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n+import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo';\r\n \r\n \r\n \r\n // Define the props for the custom component\r\n interface CategoryButtonProps {\r\n-  title: string;\r\n-  count: number;\r\n-  categoryType: keyof SearchParamsOrderItem;\r\n-  categoryValue: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n-  categoryValues: SearchParamsOrderItem;\r\n+    categoryData: CategoryGrouped;\r\n }\r\n \r\n // Define the custom component named CategoryButton\r\n-const CategoryButton: React.FC<CategoryButtonProps> = ({ title, count, categoryType, categoryValue, categoryValues }) => {\r\n-  // Get the navigation object from the hook\r\n-  const navigation = useNavigation();\r\n+const CategoryButton: React.FC<CategoryButtonProps> = ({categoryData }) => {\r\n \r\n-  // Initialize the state variable for the search parameters\r\n-  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-    createSearchParamsOrderItem({\r\n-      categoryType: categoryType,\r\n-      [categoryType]: categoryValue,\r\n-      categorySearchParams: categoryValues,\r\n-      allOrderItems: true,\r\n-    })\r\n-  );\r\n+    const navigation = useNavigation();\r\n \r\n-  // Define the handler function for the button press\r\n-  const handleClick = (event: React.MouseEvent) => {\r\n-    event.preventDefault();\r\n-    // Update the search parameters with the category type and value\r\n-    setSearchParamsInstance((prevState) => ({\r\n-      ...prevState,\r\n-      [categoryType]: categoryValue,\r\n-    }));\r\n-  };\r\n-\r\n-  // When the search parameters change, navigate to the orderitem screen\r\n-  useEffect(() => {\r\n-    navigation.navigate('orderitem', searchParamsInstance);\r\n-  }, [searchParamsInstance]);\r\n-\r\n+    // Define a generic type that represents the property name and value\r\n+    type UpdateParams = {\r\n+      prop: keyof SearchParamsOrderItem;\r\n+      value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n+    };\r\n+  \r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+      createSearchParamsOrderItem({\r\n+        categoryType: categoryData.name,\r\n+        categorySearchParams : { item_category2: categoryData.title} as CategorySearchParams,\r\n+      })\r\n+    );\r\n+    useEffect(() => {\r\n+      // Check if the categoryData.name prop is not null or undefined\r\n+      if (categoryData.name != null) {\r\n+        setSearchParamsInstance((prevState) => ({\r\n+          ...prevState,\r\n+          [categoryData.name]: categoryData.title,\r\n+        }));\r\n+      }\r\n+    }, [categoryData.name]);\r\n+  \r\n+    // Define a function that handles the click event on both buttons\r\n+    const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n+      event.preventDefault(); \r\n+      setSearchParamsInstance((prevState) => ({\r\n+        ...prevState,\r\n+        [updateParams.prop]: updateParams.value,\r\n+      }));\r\n+    };\r\n+    // when the searchParamsInstance state changes\r\n+    useLayoutEffect(() => {\r\n+      console.log(searchParamsInstance);\r\n+      navigation.navigate('orderitem', searchParamsInstance);\r\n+    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+  \r\n+  \r\n   // Return the JSX element for the button\r\n   return (\r\n     <Button key={}\r\n       title={`ðŸ¥µ ${title} (${count})`}\r\n"
                },
                {
                    "date": 1705482817516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import React, { useEffect, useLayoutEffect, useState } from 'react';\r\n import { Button } from '@rneui/themed';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n-import { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n+import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo';\r\n \r\n \r\n \r\n@@ -56,12 +56,12 @@\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n-    <Button key={}\r\n-      title={`ðŸ¥µ ${title} (${count})`}\r\n-      onPress={handleClick}\r\n-    />\r\n+    <Button\r\n+              title={`ðŸ¥µ ${categoryData.title} (${categoryData.count})`}\r\n+              onPress={(event) => handleClick(event, { prop: 'item_category2', value: categoryData.title })}\r\n+              />\r\n   );\r\n };\r\n \r\n // Export the custom component\r\n"
                },
                {
                    "date": 1705483489239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n import { Button } from '@rneui/themed';\r\n import { useNavigation } from \"@react-navigation/native\";\r\n \r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n-import { CategoryGrouped } from '../entity/OrdersProductsCategoriesInfo';\r\n+import { CategoryGrouped, ICategoryChilds } from '../entity/OrdersProductsCategoriesInfo';\r\n \r\n \r\n \r\n // Define the props for the custom component\r\n interface CategoryButtonProps {\r\n-    categoryData: CategoryGrouped;\r\n+    categoryData: ICategoryChilds;\r\n }\r\n \r\n // Define the custom component named CategoryButton\r\n const CategoryButton: React.FC<CategoryButtonProps> = ({categoryData }) => {\r\n"
                },
                {
                    "date": 1705483641031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   // Return the JSX element for the button\r\n   return (\r\n     <Button\r\n               title={`ðŸ¥µ ${categoryData.title} (${categoryData.count})`}\r\n-              onPress={(event) => handleClick(event, { prop: 'item_category2', value: categoryData.title })}\r\n+              onPress={(event) => handleClick(event, { prop: 'item_category3', value: categoryData.title })}\r\n               />\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1705483749272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n       createSearchParamsOrderItem({\r\n         categoryType: categoryData.name,\r\n-        categorySearchParams : { item_category2: categoryData.title} as CategorySearchParams,\r\n+        categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n       })\r\n     );\r\n     useEffect(() => {\r\n       // Check if the categoryData.name prop is not null or undefined\r\n"
                },
                {
                    "date": 1705487765210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n     useLayoutEffect(() => {\r\n-      console.log(searchParamsInstance);\r\n+     // console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                },
                {
                    "date": 1705487784521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n     useLayoutEffect(() => {\r\n-     // console.log(searchParamsInstance);\r\n+      console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                },
                {
                    "date": 1705488645255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,9 @@\n           [categoryData.name]: categoryData.title,\r\n         }));\r\n       }\r\n     }, [categoryData.name]);\r\n-  \r\n-    // Define a function that handles the click event on both buttons\r\n+\r\n     const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n       event.preventDefault(); \r\n       setSearchParamsInstance((prevState) => ({\r\n         ...prevState,\r\n"
                },
                {
                    "date": 1705488734153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n     useLayoutEffect(() => {\r\n-      console.log(searchParamsInstance);\r\n+      //console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                },
                {
                    "date": 1705488749343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n     useLayoutEffect(() => {\r\n-      //console.log(searchParamsInstance);\r\n+      console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                },
                {
                    "date": 1705488857671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,17 @@\n         categoryType: categoryData.name,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n       })\r\n     );\r\n-    useEffect(() => {\r\n-      // Check if the categoryData.name prop is not null or undefined\r\n-      if (categoryData.name != null) {\r\n-        setSearchParamsInstance((prevState) => ({\r\n-          ...prevState,\r\n-          [categoryData.name]: categoryData.title,\r\n-        }));\r\n-      }\r\n-    }, [categoryData.name]);\r\n+    // useEffect(() => {\r\n+    //   // Check if the categoryData.name prop is not null or undefined\r\n+    //   if (categoryData.name != null) {\r\n+    //     setSearchParamsInstance((prevState) => ({\r\n+    //       ...prevState,\r\n+    //       [categoryData.name]: categoryData.title,\r\n+    //     }));\r\n+    //   }\r\n+    // }, [categoryData.name]);\r\n \r\n     const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n       event.preventDefault(); \r\n       setSearchParamsInstance((prevState) => ({\r\n"
                },
                {
                    "date": 1705489703796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n       createSearchParamsOrderItem({\r\n         categoryType: categoryData.name,\r\n+        [categoryData.name]: categoryData.title,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n       })\r\n     );\r\n     // useEffect(() => {\r\n"
                },
                {
                    "date": 1705489760408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,17 @@\n         [categoryData.name]: categoryData.title,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n       })\r\n     );\r\n-    // useEffect(() => {\r\n-    //   // Check if the categoryData.name prop is not null or undefined\r\n-    //   if (categoryData.name != null) {\r\n-    //     setSearchParamsInstance((prevState) => ({\r\n-    //       ...prevState,\r\n-    //       [categoryData.name]: categoryData.title,\r\n-    //     }));\r\n-    //   }\r\n-    // }, [categoryData.name]);\r\n+    useEffect(() => {\r\n+      // Check if the categoryData.name prop is not null or undefined\r\n+      if (categoryData.name != null) {\r\n+        setSearchParamsInstance((prevState) => ({\r\n+          ...prevState,\r\n+          [categoryData.name]: categoryData.title,\r\n+        }));\r\n+      }\r\n+    }, [categoryData.name]);\r\n \r\n     const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n       event.preventDefault(); \r\n       setSearchParamsInstance((prevState) => ({\r\n"
                },
                {
                    "date": 1705489787122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,17 @@\n         [categoryData.name]: categoryData.title,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n       })\r\n     );\r\n-    useEffect(() => {\r\n-      // Check if the categoryData.name prop is not null or undefined\r\n-      if (categoryData.name != null) {\r\n-        setSearchParamsInstance((prevState) => ({\r\n-          ...prevState,\r\n-          [categoryData.name]: categoryData.title,\r\n-        }));\r\n-      }\r\n-    }, [categoryData.name]);\r\n+    // useEffect(() => {\r\n+    //   // Check if the categoryData.name prop is not null or undefined\r\n+    //   if (categoryData.name != null) {\r\n+    //     setSearchParamsInstance((prevState) => ({\r\n+    //       ...prevState,\r\n+    //       [categoryData.name]: categoryData.title,\r\n+    //     }));\r\n+    //   }\r\n+    // }, [categoryData.name]);\r\n \r\n     const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n       event.preventDefault(); \r\n       setSearchParamsInstance((prevState) => ({\r\n"
                },
                {
                    "date": 1705489901759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n       prop: keyof SearchParamsOrderItem;\r\n       value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n   \r\n-    const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    const [searchParamsInstance_3, setSearchParamsInstance_3] = useState(\r\n       createSearchParamsOrderItem({\r\n         categoryType: categoryData.name,\r\n         [categoryData.name]: categoryData.title,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n@@ -33,27 +33,27 @@\n     );\r\n     // useEffect(() => {\r\n     //   // Check if the categoryData.name prop is not null or undefined\r\n     //   if (categoryData.name != null) {\r\n-    //     setSearchParamsInstance((prevState) => ({\r\n+    //     setSearchParamsInstance_3((prevState) => ({\r\n     //       ...prevState,\r\n     //       [categoryData.name]: categoryData.title,\r\n     //     }));\r\n     //   }\r\n     // }, [categoryData.name]);\r\n \r\n     const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n       event.preventDefault(); \r\n-      setSearchParamsInstance((prevState) => ({\r\n+      setSearchParamsInstance_3((prevState) => ({\r\n         ...prevState,\r\n         [updateParams.prop]: updateParams.value,\r\n       }));\r\n     };\r\n-    // when the searchParamsInstance state changes\r\n+    // when the searchParamsInstance_3 state changes\r\n     useLayoutEffect(() => {\r\n-      console.log(searchParamsInstance);\r\n-      navigation.navigate('orderitem', searchParamsInstance);\r\n-    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+      console.log(searchParamsInstance_3);\r\n+      navigation.navigate('orderitem', searchParamsInstance_3);\r\n+    }, [searchParamsInstance_3]); // Pass the searchParamsInstance_3 state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n"
                },
                {
                    "date": 1705489934013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n       prop: keyof SearchParamsOrderItem;\r\n       value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n   \r\n-    const [searchParamsInstance_3, setSearchParamsInstance_3] = useState(\r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n       createSearchParamsOrderItem({\r\n         categoryType: categoryData.name,\r\n         [categoryData.name]: categoryData.title,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n@@ -33,27 +33,27 @@\n     );\r\n     // useEffect(() => {\r\n     //   // Check if the categoryData.name prop is not null or undefined\r\n     //   if (categoryData.name != null) {\r\n-    //     setSearchParamsInstance_3((prevState) => ({\r\n+    //     setSearchParamsInstance((prevState) => ({\r\n     //       ...prevState,\r\n     //       [categoryData.name]: categoryData.title,\r\n     //     }));\r\n     //   }\r\n     // }, [categoryData.name]);\r\n \r\n     const handleClick = (event: React.MouseEvent, updateParams: UpdateParams) => {\r\n       event.preventDefault(); \r\n-      setSearchParamsInstance_3((prevState) => ({\r\n+      setSearchParamsInstance((prevState) => ({\r\n         ...prevState,\r\n         [updateParams.prop]: updateParams.value,\r\n       }));\r\n     };\r\n-    // when the searchParamsInstance_3 state changes\r\n+    // when the searchParamsInstance state changes\r\n     useLayoutEffect(() => {\r\n-      console.log(searchParamsInstance_3);\r\n-      navigation.navigate('orderitem', searchParamsInstance_3);\r\n-    }, [searchParamsInstance_3]); // Pass the searchParamsInstance_3 state as a dependency\r\n+      console.log(searchParamsInstance);\r\n+      navigation.navigate('orderitem', searchParamsInstance);\r\n+    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n"
                },
                {
                    "date": 1705489978240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,12 +10,13 @@\n \r\n // Define the props for the custom component\r\n interface CategoryButtonProps {\r\n     categoryData: ICategoryChilds;\r\n+    key:number\r\n }\r\n \r\n // Define the custom component named CategoryButton\r\n-const CategoryButton: React.FC<CategoryButtonProps> = ({categoryData }) => {\r\n+const CategoryButton: React.FC<CategoryButtonProps> = ({categoryData,key }) => {\r\n \r\n     const navigation = useNavigation();\r\n \r\n     // Define a generic type that represents the property name and value\r\n"
                },
                {
                    "date": 1705489989138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n-    <Button\r\n+    <Button key={key}\r\n               title={`ðŸ¥µ ${categoryData.title} (${categoryData.count})`}\r\n               onPress={(event) => handleClick(event, { prop: 'item_category3', value: categoryData.title })}\r\n               />\r\n   );\r\n"
                },
                {
                    "date": 1705490250831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n     useLayoutEffect(() => {\r\n-      console.log(searchParamsInstance);\r\n+      //console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                },
                {
                    "date": 1705490368969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \r\n // Define the props for the custom component\r\n interface CategoryButtonProps {\r\n     categoryData: ICategoryChilds;\r\n-    key:number\r\n+    key:string\r\n }\r\n \r\n // Define the custom component named CategoryButton\r\n const CategoryButton: React.FC<CategoryButtonProps> = ({categoryData,key }) => {\r\n"
                },
                {
                    "date": 1705490398389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n     useLayoutEffect(() => {\r\n-      //console.log(searchParamsInstance);\r\n+      console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                },
                {
                    "date": 1705490426682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,15 @@\n       prop: keyof SearchParamsOrderItem;\r\n       value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n   \r\n-    const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-      createSearchParamsOrderItem({\r\n-        categoryType: categoryData.name,\r\n-        [categoryData.name]: categoryData.title,\r\n-        categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n-      })\r\n-    );\r\n+    // const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    //   createSearchParamsOrderItem({\r\n+    //     categoryType: categoryData.name,\r\n+    //     [categoryData.name]: categoryData.title,\r\n+    //     categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n+    //   })\r\n+    // );\r\n     // useEffect(() => {\r\n     //   // Check if the categoryData.name prop is not null or undefined\r\n     //   if (categoryData.name != null) {\r\n     //     setSearchParamsInstance((prevState) => ({\r\n"
                },
                {
                    "date": 1705490478085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       prop: keyof SearchParamsOrderItem;\r\n       value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n   \r\n-    // const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState()\r\n     //   createSearchParamsOrderItem({\r\n     //     categoryType: categoryData.name,\r\n     //     [categoryData.name]: categoryData.title,\r\n     //     categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n"
                },
                {
                    "date": 1705490589154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,14 @@\n       value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n   \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState()\r\n-    //   createSearchParamsOrderItem({\r\n-    //     categoryType: categoryData.name,\r\n-    //     [categoryData.name]: categoryData.title,\r\n-    //     categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n-    //   })\r\n-    // );\r\n+      createSearchParamsOrderItem({\r\n+        categoryType: categoryData.name,\r\n+        [categoryData.name]: categoryData.title,\r\n+        categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n+      })\r\n+    );\r\n     // useEffect(() => {\r\n     //   // Check if the categoryData.name prop is not null or undefined\r\n     //   if (categoryData.name != null) {\r\n     //     setSearchParamsInstance((prevState) => ({\r\n"
                },
                {
                    "date": 1705490594511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       prop: keyof SearchParamsOrderItem;\r\n       value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n   \r\n-    const [searchParamsInstance, setSearchParamsInstance] = useState()\r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n       createSearchParamsOrderItem({\r\n         categoryType: categoryData.name,\r\n         [categoryData.name]: categoryData.title,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n"
                },
                {
                    "date": 1705490759659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,12 @@\n         [updateParams.prop]: updateParams.value,\r\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n-    useLayoutEffect(() => {\r\n+    useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n+      return () => {}\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n"
                },
                {
                    "date": 1705490764871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     // when the searchParamsInstance state changes\r\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n-      return () => {}\r\n+      return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n"
                },
                {
                    "date": 1705490796883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     // when the searchParamsInstance state changes\r\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n-      return () => {};\r\n+     // return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n"
                },
                {
                    "date": 1705491380643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n     };\r\n     // when the searchParamsInstance state changes\r\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n+      if(navigation.canGoBack())\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n      // return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n"
                },
                {
                    "date": 1705491424442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     };\r\n     // when the searchParamsInstance state changes\r\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n-      if(navigation.canGoBack())\r\n+      //if(navigation.canGoBack())\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n      // return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n"
                },
                {
                    "date": 1705491943614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       //if(navigation.canGoBack())\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n-     // return () => {};\r\n+      return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n"
                },
                {
                    "date": 1705491982440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       //if(navigation.canGoBack())\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n-      return () => {};\r\n+     // return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n"
                },
                {
                    "date": 1705492098405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,14 +49,14 @@\n         [updateParams.prop]: updateParams.value,\r\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n-    useEffect(() => {\r\n-      console.log(searchParamsInstance);\r\n-      //if(navigation.canGoBack())\r\n-      navigation.navigate('orderitem', searchParamsInstance);\r\n-     // return () => {};\r\n-    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+    // useEffect(() => {\r\n+    //   console.log(searchParamsInstance);\r\n+    //   //if(navigation.canGoBack())\r\n+    //   navigation.navigate('orderitem', searchParamsInstance);\r\n+    //  // return () => {};\r\n+    // }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n"
                },
                {
                    "date": 1705492111755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,14 +49,14 @@\n         [updateParams.prop]: updateParams.value,\r\n       }));\r\n     };\r\n     // when the searchParamsInstance state changes\r\n-    // useEffect(() => {\r\n-    //   console.log(searchParamsInstance);\r\n-    //   //if(navigation.canGoBack())\r\n-    //   navigation.navigate('orderitem', searchParamsInstance);\r\n-    //  // return () => {};\r\n-    // }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+    useEffect(() => {\r\n+      console.log(searchParamsInstance);\r\n+      //if(navigation.canGoBack())\r\n+      navigation.navigate('orderitem', searchParamsInstance);\r\n+     // return () => {};\r\n+    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n"
                },
                {
                    "date": 1705492315823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,10 @@\n         [categoryData.name]: categoryData.title,\r\n         categorySearchParams : { item_category3: categoryData.title} as CategorySearchParams,\r\n       })\r\n     );\r\n+    const [buttonClicked, setButtonClicked] = useState(false);\r\n+\r\n     // useEffect(() => {\r\n     //   // Check if the categoryData.name prop is not null or undefined\r\n     //   if (categoryData.name != null) {\r\n     //     setSearchParamsInstance((prevState) => ({\r\n"
                },
                {
                    "date": 1705492335986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,16 +49,17 @@\n       setSearchParamsInstance((prevState) => ({\r\n         ...prevState,\r\n         [updateParams.prop]: updateParams.value,\r\n       }));\r\n+      setButtonClicked(true);\r\n     };\r\n     // when the searchParamsInstance state changes\r\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       //if(navigation.canGoBack())\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n      // return () => {};\r\n-    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+    }, [buttonClicked]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n"
                },
                {
                    "date": 1705492442566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n       console.log(searchParamsInstance);\r\n       //if(navigation.canGoBack())\r\n       navigation.navigate('orderitem', searchParamsInstance);\r\n      // return () => {};\r\n-    }, [buttonClicked]); // Pass the searchParamsInstance state as a dependency\r\n+    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n   // Return the JSX element for the button\r\n   return (\r\n"
                },
                {
                    "date": 1705495214282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     // when the searchParamsInstance state changes\r\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       //if(navigation.canGoBack())\r\n-      navigation.navigate('orderitem', searchParamsInstance);\r\n+   //   navigation.navigate('orderitem', searchParamsInstance);\r\n      // return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                },
                {
                    "date": 1705495275548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     // when the searchParamsInstance state changes\r\n     useEffect(() => {\r\n       console.log(searchParamsInstance);\r\n       //if(navigation.canGoBack())\r\n-   //   navigation.navigate('orderitem', searchParamsInstance);\r\n+      navigation.navigate('orderitem', searchParamsInstance);\r\n      // return () => {};\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n   \r\n   \r\n"
                }
            ],
            "date": 1705405992805,
            "name": "Commit-0",
            "content": "// Import React and other libraries\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button } from '@rneui/themed';\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\nimport { SearchParamsOrderItem, createSearchParamsOrderItem } from '../entity/SearchQueries';\r\n\r\n// Define the props for the custom component\r\ninterface CategoryButtonProps {\r\n  title: string;\r\n  count: number;\r\n  categoryType: keyof SearchParamsOrderItem;\r\n  categoryValue: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n  categoryValues: SearchParamsOrderItem;\r\n}\r\n\r\n// Define the custom component named CategoryButton\r\nconst CategoryButton: React.FC<CategoryButtonProps> = ({ title, count, categoryType, categoryValue, categoryValues }) => {\r\n  // Get the navigation object from the hook\r\n  const navigation = useNavigation();\r\n\r\n  // Initialize the state variable for the search parameters\r\n  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n    createSearchParamsOrderItem({\r\n      categoryType: categoryType,\r\n      [categoryType]: categoryValue,\r\n      categorySearchParams: categoryValues,\r\n      allOrderItems: true,\r\n    })\r\n  );\r\n\r\n  // Define the handler function for the button press\r\n  const handleClick = (event: React.MouseEvent) => {\r\n    event.preventDefault();\r\n    // Update the search parameters with the category type and value\r\n    setSearchParamsInstance((prevState) => ({\r\n      ...prevState,\r\n      [categoryType]: categoryValue,\r\n    }));\r\n  };\r\n\r\n  // When the search parameters change, navigate to the orderitem screen\r\n  useEffect(() => {\r\n    navigation.navigate('orderitem', searchParamsInstance);\r\n  }, [searchParamsInstance]);\r\n\r\n  // Return the JSX element for the button\r\n  return (\r\n    <Button\r\n      title={`ðŸ¥µ ${title} (${count})`}\r\n      onPress={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\n// Export the custom component\r\nexport default CategoryButton;\r\n"
        }
    ]
}