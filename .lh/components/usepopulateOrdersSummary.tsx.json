{
    "sourceFile": "components/usepopulateOrdersSummary.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1704281028883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704281509044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,25 @@\n import { useQuery } from '@tanstack/react-query';\r\n \r\n // Define a custom hook to fetch the data from the API\r\n function usePopulateOrdersSummary() {\r\n-  // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n-  const { isLoading, isError, data, error } = useQuery(\r\n-    ['populateOrdersSummary'], // The query key\r\n-    fetchNotes // The query function\r\n-  );\r\n \r\n-  // Return the query object\r\n-  return { isLoading, isError, data, error };\r\n-}\r\n+    const { isPending, error, data, isFetching } = useQuery({\r\n+        queryKey: ['repoData'],\r\n+        queryFn: () =>\r\n \r\n-// Define the query function\r\n-function fetchNotes() {\r\n-  return fetch('http://localhost:3001/notes')\r\n-    .then((response) => response.json())\r\n-    .then(({ success, data }) => {\r\n-      if (!success) {\r\n-        throw new Error('An error occurred while fetching notes');\r\n-      }\r\n-      return data;\r\n-    });\r\n+            fetch('http://localhost:3001/notes')\r\n+                .then((response) => response.json())\r\n+                .then(({ success, data }) => {\r\n+                    if (!success) {\r\n+                        throw new Error('An error occurred while fetching notes');\r\n+                    }\r\n+                    return data;\r\n+                })\r\n+    })\r\n+    if (isPending) return 'Loading...'\r\n+\r\n+    if (error) return 'An error has occurred: ' + error.message\r\n }\r\n \r\n // Export the custom hook as the default export\r\n export default usePopulateOrdersSummary;\r\n"
                },
                {
                    "date": 1704281638683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     const { isPending, error, data, isFetching } = useQuery({\r\n         queryKey: ['repoData'],\r\n         queryFn: () =>\r\n \r\n-            fetch('http://localhost:3001/notes')\r\n+            fetch('http://localhost:3222/hamechidun/populate_orders_summary')\r\n                 .then((response) => response.json())\r\n                 .then(({ success, data }) => {\r\n                     if (!success) {\r\n                         throw new Error('An error occurred while fetching notes');\r\n"
                },
                {
                    "date": 1704281792890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n // Define a custom hook to fetch the data from the API\r\n function usePopulateOrdersSummary() {\r\n \r\n     const { isPending, error, data, isFetching } = useQuery({\r\n-        queryKey: ['repoData'],\r\n+        queryKey: ['populateOrdersSummary'],\r\n         queryFn: () =>\r\n \r\n             fetch('http://localhost:3222/hamechidun/populate_orders_summary')\r\n                 .then((response) => response.json())\r\n"
                },
                {
                    "date": 1704281834671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,26 @@\n import { useQuery } from '@tanstack/react-query';\r\n \r\n // Define a custom hook to fetch the data from the API\r\n function usePopulateOrdersSummary() {\r\n+  // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n+  const { data, error, isLoading, isError } = useQuery({\r\n+    queryKey: ['populateOrdersSummary'], // The query key\r\n+    queryFn: () => // The query function\r\n+      fetch('http://localhost:3222/hamechidun/populate_orders_summary')\r\n+        .then((response) => response.json())\r\n+        .then(({ success, data }) => {\r\n+          if (!success) {\r\n+            throw new Error('An error occurred while fetching notes');\r\n+          }\r\n+          return data;\r\n+        }),\r\n+    // Optionally, use the enabled option to control when to fetch the data\r\n+    // enabled: queryKey !== null && queryKey !== undefined,\r\n+  });\r\n \r\n-    const { isPending, error, data, isFetching } = useQuery({\r\n-        queryKey: ['populateOrdersSummary'],\r\n-        queryFn: () =>\r\n-\r\n-            fetch('http://localhost:3222/hamechidun/populate_orders_summary')\r\n-                .then((response) => response.json())\r\n-                .then(({ success, data }) => {\r\n-                    if (!success) {\r\n-                        throw new Error('An error occurred while fetching notes');\r\n-                    }\r\n-                    return data;\r\n-                })\r\n-    })\r\n-    if (isPending) return 'Loading...'\r\n-\r\n-    if (error) return 'An error has occurred: ' + error.message\r\n+  // Return the query object\r\n+  return { data, error, isLoading, isError };\r\n }\r\n \r\n // Export the custom hook as the default export\r\n export default usePopulateOrdersSummary;\r\n"
                },
                {
                    "date": 1704282294809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,25 @@\n import { useQuery } from '@tanstack/react-query';\r\n \r\n // Define a custom hook to fetch the data from the API\r\n function usePopulateOrdersSummary() {\r\n-  // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n-  const { data, error, isLoading, isError } = useQuery({\r\n-    queryKey: ['populateOrdersSummary'], // The query key\r\n-    queryFn: () => // The query function\r\n-      fetch('http://localhost:3222/hamechidun/populate_orders_summary')\r\n-        .then((response) => response.json())\r\n-        .then(({ success, data }) => {\r\n-          if (!success) {\r\n-            throw new Error('An error occurred while fetching notes');\r\n-          }\r\n-          return data;\r\n-        }),\r\n-    // Optionally, use the enabled option to control when to fetch the data\r\n-    // enabled: queryKey !== null && queryKey !== undefined,\r\n-  });\r\n+    // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n+    const { data, error, isLoading, isError } = useQuery({\r\n+        queryKey: ['populateOrdersSummary'], // The query key\r\n+        queryFn: async() => // The query function\r\n+        {\r\n \r\n-  // Return the query object\r\n-  return { data, error, isLoading, isError };\r\n+            const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n+            // Parse the response as JSON\r\n+            const data = await response.json();\r\n+            return data\r\n+        }\r\n+        // Optionally, use the enabled option to control when to fetch the data\r\n+        // enabled: queryKey !== null && queryKey !== undefined,\r\n+    });\r\n+\r\n+    // Return the query object\r\n+    return { data, error, isLoading, isError };\r\n }\r\n \r\n // Export the custom hook as the default export\r\n export default usePopulateOrdersSummary;\r\n"
                },
                {
                    "date": 1704282364364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,37 @@\n import { useQuery } from '@tanstack/react-query';\r\n \r\n // Define a custom hook to fetch the data from the API\r\n function usePopulateOrdersSummary() {\r\n-    // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n-    const { data, error, isLoading, isError } = useQuery({\r\n-        queryKey: ['populateOrdersSummary'], // The query key\r\n-        queryFn: async() => // The query function\r\n-        {\r\n-\r\n-            const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n-            // Parse the response as JSON\r\n-            const data = await response.json();\r\n-            return data\r\n+  // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n+  const { data, error, isLoading, isError } = useQuery({\r\n+    queryKey: ['populateOrdersSummary'], // The query key\r\n+    queryFn: async () => { // The query function with the async keyword\r\n+      try {\r\n+        // Fetch the data from the API\r\n+        const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n+        // Check the response status\r\n+        if (!response.ok) {\r\n+          // Throw an error with the status and message from the response\r\n+          throw { status: response.status, message: response.statusText };\r\n         }\r\n-        // Optionally, use the enabled option to control when to fetch the data\r\n-        // enabled: queryKey !== null && queryKey !== undefined,\r\n-    });\r\n+        // Parse the response as JSON\r\n+        const data = await response.json();\r\n+        // Return the data\r\n+        return data;\r\n+      } catch (error) {\r\n+        // Throw the error object\r\n+        throw error;\r\n+      }\r\n+    },\r\n+    // Optionally, use the enabled option to control when to fetch the data\r\n+    // enabled: queryKey !== null && queryKey !== undefined,\r\n+    // Optionally, use the staleTime option to specify how long the data will be considered fresh\r\n+    // staleTime: 1000 * 60 * 5, // 5 minutes\r\n+  });\r\n \r\n-    // Return the query object\r\n-    return { data, error, isLoading, isError };\r\n+  // Return the query object\r\n+  return { data, error, isLoading, isError };\r\n }\r\n \r\n // Export the custom hook as the default export\r\n export default usePopulateOrdersSummary;\r\n"
                },
                {
                    "date": 1704282376957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n         // Fetch the data from the API\r\n         const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n         // Check the response status\r\n         if (!response.ok) {\r\n-          // Throw an error with the status and message from the response\r\n           throw { status: response.status, message: response.statusText };\r\n         }\r\n         // Parse the response as JSON\r\n         const data = await response.json();\r\n"
                },
                {
                    "date": 1704282757241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,26 @@\n import { useQuery } from '@tanstack/react-query';\r\n \r\n-// Define a custom hook to fetch the data from the API\r\n function usePopulateOrdersSummary() {\r\n-  // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n-  const { data, error, isLoading, isError } = useQuery({\r\n-    queryKey: ['populateOrdersSummary'], // The query key\r\n-    queryFn: async () => { // The query function with the async keyword\r\n-      try {\r\n-        // Fetch the data from the API\r\n-        const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n-        // Check the response status\r\n-        if (!response.ok) {\r\n-          throw { status: response.status, message: response.statusText };\r\n-        }\r\n-        // Parse the response as JSON\r\n-        const data = await response.json();\r\n-        // Return the data\r\n-        return data;\r\n-      } catch (error) {\r\n-        // Throw the error object\r\n-        throw error;\r\n-      }\r\n-    },\r\n-    // Optionally, use the enabled option to control when to fetch the data\r\n-    // enabled: queryKey !== null && queryKey !== undefined,\r\n-    // Optionally, use the staleTime option to specify how long the data will be considered fresh\r\n-    // staleTime: 1000 * 60 * 5, // 5 minutes\r\n-  });\r\n-\r\n-  // Return the query object\r\n-  return { data, error, isLoading, isError };\r\n+    const { data, error, isLoading, isError } = useQuery({\r\n+        queryKey: ['populateOrdersSummary'], // The query key\r\n+        queryFn: async () => { // The query function with the async keyword\r\n+            try {\r\n+                const response = await fetch(\"http://localhost:3222/hamechidun/populate_orders_summary\");\r\n+                if (!response.ok) {\r\n+                    throw { status: response.status, message: response.statusText };\r\n+                }\r\n+                const data = await response.json();\r\n+                return data;\r\n+            } catch (error) {\r\n+                // Throw the error object\r\n+                throw error;\r\n+            }\r\n+        },\r\n+        // Optionally, use the enabled option to control when to fetch the data\r\n+        // enabled: queryKey !== null && queryKey !== undefined,\r\n+        // Optionally, use the staleTime option to specify how long the data will be considered fresh\r\n+        // staleTime: 1000 * 60 * 5, // 5 minutes\r\n+    });\r\n+    return { data, error, isLoading, isError };\r\n }\r\n-\r\n-// Export the custom hook as the default export\r\n export default usePopulateOrdersSummary;\r\n"
                }
            ],
            "date": 1704281028883,
            "name": "Commit-0",
            "content": "import { useQuery } from '@tanstack/react-query';\r\n\r\n// Define a custom hook to fetch the data from the API\r\nfunction usePopulateOrdersSummary() {\r\n  // Use the useQuery hook from @tanstack/react-query to fetch the data\r\n  const { isLoading, isError, data, error } = useQuery(\r\n    ['populateOrdersSummary'], // The query key\r\n    fetchNotes // The query function\r\n  );\r\n\r\n  // Return the query object\r\n  return { isLoading, isError, data, error };\r\n}\r\n\r\n// Define the query function\r\nfunction fetchNotes() {\r\n  return fetch('http://localhost:3001/notes')\r\n    .then((response) => response.json())\r\n    .then(({ success, data }) => {\r\n      if (!success) {\r\n        throw new Error('An error occurred while fetching notes');\r\n      }\r\n      return data;\r\n    });\r\n}\r\n\r\n// Export the custom hook as the default export\r\nexport default usePopulateOrdersSummary;\r\n"
        }
    ]
}