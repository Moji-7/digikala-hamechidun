{
    "sourceFile": "components/Orderitem.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1704794305889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704794320498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,16 @@\n import React from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n+import usecat from './hooks/usecat';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n     const { item } = route.params;\r\n     // Use the custom hook to fetch the data from the API based on the item.title\r\n-    const { data, error, isLoading, isError } = useFetchDataByTitle(item.title);\r\n+    const { data, error, isLoading, isError } = usecat(item.title);\r\n     // Render the UI of the detail screen\r\n     return (\r\n       <View style={styles.container}>\r\n         {isLoading && (\r\n"
                },
                {
                    "date": 1704794339334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import usecat from './hooks/usecat';\r\n+import { useTheme } from '@rneui/themed';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n"
                },
                {
                    "date": 1704798850487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,12 +26,11 @@\n           </Text>\r\n         )}\r\n         {data && (\r\n           <View style={styles.dataContainer}>\r\n-            <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n-             ali\r\n-            </Text>\r\n-            {/* ... render the rest of the data as you wish */}\r\n+           \r\n+             showing data.map base on DTO\r\n+            {/* ... render the data  */}\r\n           </View>\r\n         )}\r\n       </View>\r\n     );\r\n"
                },
                {
                    "date": 1704798956533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,13 +24,14 @@\n           <Text style={[styles.error, { color: theme.colors.error }]}>\r\n             Error: {error.message}\r\n           </Text>\r\n         )}\r\n-        {data && (\r\n-          <View style={styles.dataContainer}>\r\n-           \r\n-             showing data.map base on DTO\r\n-            {/* ... render the data  */}\r\n+        {data.map((item, index) => (\r\n+        <View key={index} style={styles.dataItem}>\r\n+          {/* Use the Text component to display the data */}\r\n+          <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n+            {item.product_title_fa}\r\n+          </Text>\r\n           </View>\r\n         )}\r\n       </View>\r\n     );\r\n"
                },
                {
                    "date": 1704799056052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,58 +13,61 @@\n     // Use the custom hook to fetch the data from the API based on the item.title\r\n     const { data, error, isLoading, isError } = usecat(item.title);\r\n     // Render the UI of the detail screen\r\n     return (\r\n-      <View style={styles.container}>\r\n-        {isLoading && (\r\n-          <Text style={[styles.loading, { color: theme.colors.primary }]}>\r\n-            Loading...\r\n-          </Text>\r\n-        )}\r\n-        {isError && (\r\n-          <Text style={[styles.error, { color: theme.colors.error }]}>\r\n-            Error: {error.message}\r\n-          </Text>\r\n-        )}\r\n-        {data.map((item, index) => (\r\n-        <View key={index} style={styles.dataItem}>\r\n-          {/* Use the Text component to display the data */}\r\n-          <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n-            {item.product_title_fa}\r\n-          </Text>\r\n-          </View>\r\n-        )}\r\n-      </View>\r\n+        <View style={styles.container}>\r\n+            {isLoading && (\r\n+                <Text style={[styles.loading, { color: theme.colors.primary }]}>\r\n+                    Loading...\r\n+                </Text>\r\n+            )}\r\n+            {isError && (\r\n+                <Text style={[styles.error, { color: theme.colors.error }]}>\r\n+                    Error: {error.message}\r\n+                </Text>\r\n+            )}\r\n+             {data && (\r\n+            {data.map((item, index) => (\r\n+                <View key={index} style={styles.dataItem}>\r\n+                    {/* Use the Text component to display the data */}\r\n+                    <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n+                        {item.product_title_fa}\r\n+                    </Text>\r\n+                </View>\r\n+            )}\r\n+            )}\r\n+            \r\n+        </View>\r\n     );\r\n-  };\r\n-  \r\n-  // Define the styles for the component using StyleSheet\r\n-  const styles = StyleSheet.create({\r\n+};\r\n+\r\n+// Define the styles for the component using StyleSheet\r\n+const styles = StyleSheet.create({\r\n     container: {\r\n-      flex: 1,\r\n\\ No newline at end of file\n-      alignItems: \"center\",\r\n-      justifyContent: \"center\",\r\n+        flex: 1,\r\n+        alignItems: \"center\",\r\n+        justifyContent: \"center\",\r\n     },\r\n     loading: {\r\n-      fontSize: 20,\r\n-      fontWeight: \"bold\",\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n     },\r\n     error: {\r\n-      fontSize: 20,\r\n-      fontWeight: \"bold\",\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n     },\r\n     dataContainer: {\r\n-      margin: 10,\r\n+        margin: 10,\r\n     },\r\n     dataTitle: {\r\n-      fontSize: 18,\r\n-      fontWeight: \"bold\",\r\n-      marginVertical: 5,\r\n+        fontSize: 18,\r\n+        fontWeight: \"bold\",\r\n+        marginVertical: 5,\r\n     },\r\n     dataSubtitle: {\r\n-      fontSize: 16,\r\n-      marginVertical: 5,\r\n+        fontSize: 16,\r\n+        marginVertical: 5,\r\n     },\r\n-  });\r\n-  \r\n-  // Export the component\r\n-  export default Detail;\n+});\r\n+\r\n+// Export the component\r\n+export default Detail;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704799171871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import usecat from './hooks/usecat';\r\n-import { useTheme } from '@rneui/themed';\r\n+import { Card, useTheme } from '@rneui/themed';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n@@ -24,50 +24,53 @@\n                 <Text style={[styles.error, { color: theme.colors.error }]}>\r\n                     Error: {error.message}\r\n                 </Text>\r\n             )}\r\n-             {data && (\r\n-            {data.map((item, index) => (\r\n-                <View key={index} style={styles.dataItem}>\r\n-                    {/* Use the Text component to display the data */}\r\n-                    <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n-                        {item.product_title_fa}\r\n-                    </Text>\r\n-                </View>\r\n-            )}\r\n-            )}\r\n-            \r\n-        </View>\r\n-    );\r\n+            {data && (\r\n+\r\n+                <Card>\r\n+                    <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n+                    <Card.Divider />\r\n+                    {data.map((item, index) => (\r\n+\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n+                            {item.product_title_fa}\r\n+                        </Text>\r\n+                    )}\r\n+                    </Card>\r\n+                    )}\r\n+\r\n+\r\n+            );\r\n };\r\n \r\n-// Define the styles for the component using StyleSheet\r\n-const styles = StyleSheet.create({\r\n-    container: {\r\n-        flex: 1,\r\n-        alignItems: \"center\",\r\n-        justifyContent: \"center\",\r\n+            // Define the styles for the component using StyleSheet\r\n+            const styles = StyleSheet.create({\r\n+                container: {\r\n+                flex: 1,\r\n+            alignItems: \"center\",\r\n+            justifyContent: \"center\",\r\n     },\r\n-    loading: {\r\n-        fontSize: 20,\r\n\\ No newline at end of file\n-        fontWeight: \"bold\",\r\n+            loading: {\r\n+                fontSize: 20,\r\n+            fontWeight: \"bold\",\r\n     },\r\n-    error: {\r\n-        fontSize: 20,\r\n-        fontWeight: \"bold\",\r\n+            error: {\r\n+                fontSize: 20,\r\n+            fontWeight: \"bold\",\r\n     },\r\n-    dataContainer: {\r\n-        margin: 10,\r\n+            dataContainer: {\r\n+                margin: 10,\r\n     },\r\n-    dataTitle: {\r\n-        fontSize: 18,\r\n-        fontWeight: \"bold\",\r\n-        marginVertical: 5,\r\n+            dataTitle: {\r\n+                fontSize: 18,\r\n+            fontWeight: \"bold\",\r\n+            marginVertical: 5,\r\n     },\r\n-    dataSubtitle: {\r\n-        fontSize: 16,\r\n-        marginVertical: 5,\r\n+            dataSubtitle: {\r\n+                fontSize: 16,\r\n+            marginVertical: 5,\r\n     },\r\n });\r\n \r\n-// Export the component\r\n-export default Detail;\n+            // Export the component\r\n+            export default Detail;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704799255900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,52 +25,49 @@\n                     Error: {error.message}\r\n                 </Text>\r\n             )}\r\n             {data && (\r\n-\r\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n+                        <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n                             {item.product_title_fa}\r\n                         </Text>\r\n-                    )}\r\n-                    </Card>\r\n-                    )}\r\n+                    ))}\r\n+                </Card>\r\n+            )}\r\n \r\n-\r\n-            );\r\n+        </View>\r\n+    );\r\n };\r\n-\r\n-            // Define the styles for the component using StyleSheet\r\n-            const styles = StyleSheet.create({\r\n-                container: {\r\n-                flex: 1,\r\n-            alignItems: \"center\",\r\n-            justifyContent: \"center\",\r\n+// Define the styles for the component using StyleSheet\r\n+const styles = StyleSheet.create({\r\n+    container: {\r\n+        flex: 1,\r\n+        alignItems: \"center\",\r\n+        justifyContent: \"center\",\r\n     },\r\n-            loading: {\r\n-                fontSize: 20,\r\n-            fontWeight: \"bold\",\r\n+    loading: {\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n     },\r\n-            error: {\r\n-                fontSize: 20,\r\n-            fontWeight: \"bold\",\r\n+    error: {\r\n+        fontSize: 20,\r\n\\ No newline at end of file\n+        fontWeight: \"bold\",\r\n     },\r\n-            dataContainer: {\r\n-                margin: 10,\r\n+    dataContainer: {\r\n+        margin: 10,\r\n     },\r\n-            dataTitle: {\r\n-                fontSize: 18,\r\n-            fontWeight: \"bold\",\r\n-            marginVertical: 5,\r\n+    dataTitle: {\r\n+        fontSize: 18,\r\n+        fontWeight: \"bold\",\r\n+        marginVertical: 5,\r\n     },\r\n-            dataSubtitle: {\r\n-                fontSize: 16,\r\n-            marginVertical: 5,\r\n+    dataSubtitle: {\r\n+        fontSize: 16,\r\n+        marginVertical: 5,\r\n     },\r\n });\r\n \r\n-            // Export the component\r\n-            export default Detail;\n+// Export the component\r\n+export default Detail;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704870037871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import usecat from './hooks/usecat';\r\n import { Card, useTheme } from '@rneui/themed';\r\n+import OrderItemOne from './uicomponents/OrderItemOne';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n@@ -29,11 +30,9 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n-                            {item.product_title_fa}\r\n-                        </Text>\r\n+                        <OrderItemOne  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n \r\n"
                },
                {
                    "date": 1704870072238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        <OrderItemOne  orderItem={item} />\r\n+                        <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n \r\n"
                },
                {
                    "date": 1704870323190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,11 @@\n             {data && (\r\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n-                    {data.map((item, index) => (\r\n+                    {/* {data.map((item, index) => (\r\n                         <OrderItemOne key={index}  orderItem={item} />\r\n-                    ))}\r\n+                    ))} */}\r\n                 </Card>\r\n             )}\r\n \r\n         </View>\r\n"
                },
                {
                    "date": 1704870339072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,11 @@\n             {data && (\r\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n-                    {/* {data.map((item, index) => (\r\n+                    {data.map((item, index) => (\r\n                         <OrderItemOne key={index}  orderItem={item} />\r\n-                    ))} */}\r\n+                    ))}\r\n                 </Card>\r\n             )}\r\n \r\n         </View>\r\n"
                },
                {
                    "date": 1704870353690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        <OrderItemOne key={index}  orderItem={item} />\r\n+                        {item}\r\n+                        // <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n \r\n"
                },
                {
                    "date": 1704870376142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        {item}\r\n+                        {item.brand}\r\n                         // <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704870424068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import usecat from './hooks/usecat';\r\n import { Card, useTheme } from '@rneui/themed';\r\n-import OrderItemOne from './uicomponents/OrderItemOne';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n@@ -30,10 +29,11 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        {item.brand}\r\n-                        // <OrderItemOne key={index}  orderItem={item} />\r\n+                        <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n+                            {item.product_title_fa}\r\n+                        </Text>\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n \r\n"
                },
                {
                    "date": 1704870610532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n                     {data.map((item, index) => (\r\n                         <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n                             {item.product_title_fa}\r\n                         </Text>\r\n+                         // <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n \r\n"
                },
                {
                    "date": 1704870638707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n                         <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n-                            {item.product_title_fa}\r\n+                            {item.product_title_fa} | {item.title_en}\r\n                         </Text>\r\n                          // <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n"
                },
                {
                    "date": 1704870654513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,12 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n-                            {item.product_title_fa} | {item.title_en}\r\n-                        </Text>\r\n-                         // <OrderItemOne key={index}  orderItem={item} />\r\n+                        // <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n+                        //     {item.product_title_fa} | {item.title_en}\r\n+                        // </Text>\r\n+                         <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n \r\n"
                },
                {
                    "date": 1704870726001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import usecat from './hooks/usecat';\r\n import { Card, useTheme } from '@rneui/themed';\r\n+import OrderItemOne from './uicomponents/OrderItemOne';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n"
                },
                {
                    "date": 1704871726177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,8 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        // <Text key={index} style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n-                        //     {item.product_title_fa} | {item.title_en}\r\n-                        // </Text>\r\n                          <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704871990928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,11 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n+                        <Text key={index} >\r\n+                            {item.product_title_fa} \r\n+                        </Text>\r\n                          <OrderItemOne key={index}  orderItem={item} />\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704872010256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,14 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n-                        <Text key={index} >\r\n-                            {item.product_title_fa} \r\n-                        </Text>\r\n-                         <OrderItemOne key={index}  orderItem={item} />\r\n+                        <>\r\n+                            <Text key={index} >\r\n+                                {item.product_title_fa}\r\n+                            </Text>\r\n+                            <OrderItemOne key={index} orderItem={item} />\r\n+                        </>\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n \r\n"
                },
                {
                    "date": 1704872154170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                         <>\r\n                             <Text key={index} >\r\n                                 {item.product_title_fa}\r\n                             </Text>\r\n-                            <OrderItemOne key={index} orderItem={item} />\r\n+                            <OrderItemOne key={index} item={item} />\r\n                         </>\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704872180439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                         <>\r\n                             <Text key={index} >\r\n                                 {item.product_title_fa}\r\n                             </Text>\r\n-                            <OrderItemOne key={index} item={item} />\r\n+                            <OrderItemOne key={index} orderItem={item} />\r\n                         </>\r\n                     ))}\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704872213323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,8 @@\n                     <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {data.map((item, index) => (\r\n                         <>\r\n-                            <Text key={index} >\r\n-                                {item.product_title_fa}\r\n-                            </Text>\r\n                             <OrderItemOne key={index} orderItem={item} />\r\n                         </>\r\n                     ))}\r\n                 </Card>\r\n"
                },
                {
                    "date": 1704873305253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,16 @@\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n     const { item } = route.params;\r\n     // Use the custom hook to fetch the data from the API based on the item.title\r\n-    const { data, error, isLoading, isError } = usecat(item.title);\r\n+    const params = {\r\n+        product_title_fa: '100',\r\n+        quantity: '2',\r\n+        seller_title: 'ÿØ€åÿ¨€å‚Äå⁄©ÿßŸÑÿß',\r\n+        sortColumn: 'quantity',\r\n+        sortType: 'DESC',\r\n+      };\r\n+    const { data, error, isLoading, isError } = usecat(params);\r\n     // Render the UI of the detail screen\r\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && (\r\n"
                },
                {
                    "date": 1704873488058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import React from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-import usecat from './hooks/usecat';\r\n+import {useCat} from './hooks/usecat';\r\n import { Card, useTheme } from '@rneui/themed';\r\n import OrderItemOne from './uicomponents/OrderItemOne';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n@@ -18,9 +18,9 @@\n         seller_title: 'ÿØ€åÿ¨€å‚Äå⁄©ÿßŸÑÿß',\r\n         sortColumn: 'quantity',\r\n         sortType: 'DESC',\r\n       };\r\n-    const { data, error, isLoading, isError } = usecat(params);\r\n+    const { data, error, isLoading, isError } = useCat(params);\r\n     // Render the UI of the detail screen\r\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && (\r\n"
                },
                {
                    "date": 1704874519691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,12 @@\n     // Use the route.params property to get the item that was passed from the previous screen\r\n     const { item } = route.params;\r\n     // Use the custom hook to fetch the data from the API based on the item.title\r\n     const params = {\r\n-        product_title_fa: '100',\r\n-        quantity: '2',\r\n-        seller_title: 'ÿØ€åÿ¨€å‚Äå⁄©ÿßŸÑÿß',\r\n+        // product_title_fa: '100',\r\n+        // quantity: '2',\r\n+        // seller_title: 'ÿØ€åÿ¨€å‚Äå⁄©ÿßŸÑÿß',\r\n+        \r\n         sortColumn: 'quantity',\r\n         sortType: 'DESC',\r\n       };\r\n     const { data, error, isLoading, isError } = useCat(params);\r\n"
                },
                {
                    "date": 1704877608406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,22 +5,23 @@\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import {useCat} from './hooks/usecat';\r\n import { Card, useTheme } from '@rneui/themed';\r\n import OrderItemOne from './uicomponents/OrderItemOne';\r\n+import { SearchParamsOrderItem } from './entity/SearchQueries';\r\n const Detail = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n-    const { item } = route.params;\r\n-    // Use the custom hook to fetch the data from the API based on the item.title\r\n-    const params = {\r\n-        // product_title_fa: '100',\r\n-        // quantity: '2',\r\n-        // seller_title: 'ÿØ€åÿ¨€å‚Äå⁄©ÿßŸÑÿß',\r\n-        \r\n-        sortColumn: 'quantity',\r\n-        sortType: 'DESC',\r\n-      };\r\n+    const params = route.params  as SearchParamsOrderItem;;\r\n+\r\n+   \r\n+    // const params: SearchParamsOrderItem = {\r\n+    //     categoryType: categoryType,\r\n+    //     allOrderItems: true,\r\n+    //      sortColumn: 'quantity',\r\n+    //     sortType: 'DESC',\r\n+    //   };\r\n+\r\n     const { data, error, isLoading, isError } = useCat(params);\r\n     // Render the UI of the detail screen\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1704877915404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,16 +12,8 @@\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n     const params = route.params  as SearchParamsOrderItem;;\r\n \r\n-   \r\n-    // const params: SearchParamsOrderItem = {\r\n-    //     categoryType: categoryType,\r\n-    //     allOrderItems: true,\r\n-    //      sortColumn: 'quantity',\r\n-    //     sortType: 'DESC',\r\n-    //   };\r\n-\r\n     const { data, error, isLoading, isError } = useCat(params);\r\n     // Render the UI of the detail screen\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1704877984490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n     const params = route.params  as SearchParamsOrderItem;;\r\n-\r\n+debugger\r\n     const { data, error, isLoading, isError } = useCat(params);\r\n     // Render the UI of the detail screen\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1704878283676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n     const params = route.params  as SearchParamsOrderItem;;\r\n-debugger\r\n+\r\n     const { data, error, isLoading, isError } = useCat(params);\r\n     // Render the UI of the detail screen\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1704887860441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import {useCat} from './hooks/usecat';\r\n import { Card, useTheme } from '@rneui/themed';\r\n import OrderItemOne from './uicomponents/OrderItemOne';\r\n import { SearchParamsOrderItem } from './entity/SearchQueries';\r\n-const Detail = ({ route }) => {\r\n+const OrderItem = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n     const params = route.params  as SearchParamsOrderItem;;\r\n@@ -71,5 +71,5 @@\n     },\r\n });\r\n \r\n // Export the component\r\n-export default Detail;\n\\ No newline at end of file\n+export default OrderItem;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704893168354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,22 +2,27 @@\n import React from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n \r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-import {useCat} from './hooks/usecat';\r\n+import { useCat } from './hooks/usecat';\r\n import { Card, useTheme } from '@rneui/themed';\r\n import OrderItemOne from './uicomponents/OrderItemOne';\r\n import { SearchParamsOrderItem } from './entity/SearchQueries';\r\n const OrderItem = ({ route }) => {\r\n     // Use the useTheme hook to get the theme object\r\n     const { theme } = useTheme();\r\n     // Use the route.params property to get the item that was passed from the previous screen\r\n-    const params = route.params  as SearchParamsOrderItem;;\r\n+    const params = route.params as SearchParamsOrderItem;;\r\n \r\n     const { data, error, isLoading, isError } = useCat(params);\r\n     // Render the UI of the detail screen\r\n     return (\r\n+\r\n         <View style={styles.container}>\r\n+            <Card>\r\n+                <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n+                <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} />\r\n+            </Card>\r\n             {isLoading && (\r\n                 <Text style={[styles.loading, { color: theme.colors.primary }]}>\r\n                     Loading...\r\n                 </Text>\r\n"
                },
                {
                    "date": 1704949331905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \r\n         <View style={styles.container}>\r\n             <Card>\r\n                 <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n-                <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} />\r\n+                {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} /> */}\r\n             </Card>\r\n             {isLoading && (\r\n                 <Text style={[styles.loading, { color: theme.colors.primary }]}>\r\n                     Loading...\r\n"
                },
                {
                    "date": 1704949384031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     return (\r\n \r\n         <View style={styles.container}>\r\n             <Card>\r\n-                <Card.Title style={{ color: theme.colors.text }}> Order Item (category 2 & 3) üõíüêæ</Card.Title>\r\n+                <Card.Title style={{ color: theme.colors.text }}> Category {params.categoryType} üõíüêæ</Card.Title>\r\n                 {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={categoryGrouped} index={index} /> */}\r\n             </Card>\r\n             {isLoading && (\r\n                 <Text style={[styles.loading, { color: theme.colors.primary }]}>\r\n"
                }
            ],
            "date": 1704794305889,
            "name": "Commit-0",
            "content": "// Import the necessary modules\r\nimport React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\n\r\nimport ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\nconst Detail = ({ route }) => {\r\n    // Use the useTheme hook to get the theme object\r\n    const { theme } = useTheme();\r\n    // Use the route.params property to get the item that was passed from the previous screen\r\n    const { item } = route.params;\r\n    // Use the custom hook to fetch the data from the API based on the item.title\r\n    const { data, error, isLoading, isError } = useFetchDataByTitle(item.title);\r\n    // Render the UI of the detail screen\r\n    return (\r\n      <View style={styles.container}>\r\n        {isLoading && (\r\n          <Text style={[styles.loading, { color: theme.colors.primary }]}>\r\n            Loading...\r\n          </Text>\r\n        )}\r\n        {isError && (\r\n          <Text style={[styles.error, { color: theme.colors.error }]}>\r\n            Error: {error.message}\r\n          </Text>\r\n        )}\r\n        {data && (\r\n          <View style={styles.dataContainer}>\r\n            <Text style={[styles.dataTitle, { color: theme.colors.text }]}>\r\n             ali\r\n            </Text>\r\n            {/* ... render the rest of the data as you wish */}\r\n          </View>\r\n        )}\r\n      </View>\r\n    );\r\n  };\r\n  \r\n  // Define the styles for the component using StyleSheet\r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n    loading: {\r\n      fontSize: 20,\r\n      fontWeight: \"bold\",\r\n    },\r\n    error: {\r\n      fontSize: 20,\r\n      fontWeight: \"bold\",\r\n    },\r\n    dataContainer: {\r\n      margin: 10,\r\n    },\r\n    dataTitle: {\r\n      fontSize: 18,\r\n      fontWeight: \"bold\",\r\n      marginVertical: 5,\r\n    },\r\n    dataSubtitle: {\r\n      fontSize: 16,\r\n      marginVertical: 5,\r\n    },\r\n  });\r\n  \r\n  // Export the component\r\n  export default Detail;"
        }
    ]
}