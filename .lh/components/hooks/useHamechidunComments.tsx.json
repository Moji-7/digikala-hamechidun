{
    "sourceFile": "components/hooks/useHamechidunComments.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1707125563869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707133505966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,38 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n+type DataAndMetadata = [data: any, metadata: { count: number, sum: number, max: number, avg: number }];\r\n \r\n export const useHamechidunComments = (params: string) => {\r\n-    // Use the useQuery hook to fetch the data from the API\r\n-    const { data, error, isLoading, isError } = useQuery({\r\n-        // Specify the query key as the item.title\r\n-        queryKey: ['useHamechidunComments', params],\r\n-        // Specify the query function as an async arrow function that uses fetch to make the request\r\n-        queryFn: async () => {\r\n-            // Try to fetch the data from the API\r\n-            try {\r\n+  const { data, error, isLoading, isError } = useQuery<DataAndMetadata>({\r\n+    queryKey: ['useHamechidunComments', params],\r\n+    queryFn: async () => {\r\n+      try {\r\n+        const response = await fetch(\"http://localhost:3222/hamechidun/commentsdataset?\" + params, {\r\n+          method: \"GET\",\r\n+          headers: {\r\n+            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n+          },\r\n+        });\r\n \r\n-                //const queryString = objectToQueryString(params);\r\n-                const searchParams = new URLSearchParams(params);\r\n-                //?productId=197421?\r\n-                const url = \"http://localhost:3222/hamechidun/commentsdataset\"// + searchParams;\r\n-                const response = await fetch(url, {\r\n-                    method: \"GET\",\r\n-                    headers: {\r\n-                        \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n-                    },\r\n-                });\r\n+        if (!response.ok) {\r\n+          throw { status: response.status, message: response.statusText };\r\n+        }\r\n \r\n-                // If the response is not OK, throw an error object with the status and message\r\n-                if (!response.ok) {\r\n-                    throw { status: response.status, message: response.statusText };\r\n-                }\r\n-                // Parse the response data as JSON and return it\r\n-                const data: any = await response.json();\r\n-                return data;\r\n-            } catch (error) {\r\n-                // If there is an error, throw it\r\n-                throw error;\r\n-            }\r\n-        },\r\n-        staleTime: 1000 * 60 * 5,\r\n-    });\r\n-    // Return an object with the data, error, isLoading, and isError properties from the query\r\n-    return { data, error, isLoading, isError };\r\n-}\r\n+        const data = await response.json();\r\n+        const metadata = {\r\n+          count: data.length,\r\n+          sum: data.reduce((acc, curr) => acc + curr.likes, 0),\r\n+          max: Math.max(...data.map(item => item.likes)),\r\n+          avg: data.reduce((acc, curr) => acc + curr.likes / data.length, 0),\r\n+        };\r\n \r\n+        return [data, metadata];\r\n+      } catch (error) {\r\n+        throw error;\r\n+      }\r\n+    },\r\n+    staleTime: 1000 * 60 * 5,\r\n+  });\r\n+\r\n+  return { data, error, isLoading, isError };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707134199710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,42 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n-type DataAndMetadata = [data: any, metadata: { count: number, sum: number, max: number, avg: number }];\r\n \r\n export const useHamechidunComments = (params: string) => {\r\n-  const { data, error, isLoading, isError } = useQuery<DataAndMetadata>({\r\n-    queryKey: ['useHamechidunComments', params],\r\n-    queryFn: async () => {\r\n-      try {\r\n-        const response = await fetch(\"http://localhost:3222/hamechidun/commentsdataset?\" + params, {\r\n-          method: \"GET\",\r\n-          headers: {\r\n-            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n-          },\r\n-        });\r\n+    // Use the useQuery hook to fetch the data from the API\r\n+    const { data, error, isLoading, isError } = useQuery({\r\n+        // Specify the query key as the item.title\r\n+        queryKey: ['useHamechidunComments', params],\r\n+        // Specify the query function as an async arrow function that uses fetch to make the request\r\n+        queryFn: async () => {\r\n+            // Try to fetch the data from the API\r\n+            try {\r\n \r\n-        if (!response.ok) {\r\n-          throw { status: response.status, message: response.statusText };\r\n-        }\r\n+                //const queryString = objectToQueryString(params);\r\n+                const searchParams = new URLSearchParams(params);\r\n+                //?productId=197421?\r\n+                const url = \"http://localhost:3222/hamechidun/commentsdataset\"// + searchParams;\r\n+                const response = await fetch(url, {\r\n+                    method: \"GET\",\r\n+                    headers: {\r\n+                        \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n+                    },\r\n+                });\r\n \r\n\\ No newline at end of file\n-        const data = await response.json();\r\n-        const metadata = {\r\n-          count: data.length,\r\n-          sum: data.reduce((acc, curr) => acc + curr.likes, 0),\r\n-          max: Math.max(...data.map(item => item.likes)),\r\n-          avg: data.reduce((acc, curr) => acc + curr.likes / data.length, 0),\r\n-        };\r\n+                // If the response is not OK, throw an error object with the status and message\r\n+                if (!response.ok) {\r\n+                    throw { status: response.status, message: response.statusText };\r\n+                }\r\n+                // Parse the response data as JSON and return it\r\n+                const data: any = await response.json();\r\n+                return data;\r\n+            } catch (error) {\r\n+                // If there is an error, throw it\r\n+                throw error;\r\n+            }\r\n+        },\r\n+        staleTime: 1000 * 60 * 5,\r\n+    });\r\n+    // Return an object with the data, error, isLoading, and isError properties from the query\r\n+    return { data, error, isLoading, isError };\r\n+}\r\n \r\n-        return [data, metadata];\r\n-      } catch (error) {\r\n-        throw error;\r\n-      }\r\n-    },\r\n-    staleTime: 1000 * 60 * 5,\r\n-  });\r\n-\r\n-  return { data, error, isLoading, isError };\r\n-};\n"
                },
                {
                    "date": 1707147037988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \r\n                 //const queryString = objectToQueryString(params);\r\n                 const searchParams = new URLSearchParams(params);\r\n                 //?productId=197421?\r\n-                const url = \"http://localhost:3222/hamechidun/commentsdataset\"// + searchParams;\r\n+                const url = \"http://localhost:3222/hamechidun/commentsdataset\" + searchParams;\r\n                 const response = await fetch(url, {\r\n                     method: \"GET\",\r\n                     headers: {\r\n                         \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n@@ -38,4 +38,5 @@\n     });\r\n     // Return an object with the data, error, isLoading, and isError properties from the query\r\n     return { data, error, isLoading, isError };\r\n }\r\n+\r\n"
                }
            ],
            "date": 1707125563869,
            "name": "Commit-0",
            "content": "import { useQuery } from \"@tanstack/react-query\";\r\n\r\n\r\nexport const useHamechidunComments = (params: string) => {\r\n    // Use the useQuery hook to fetch the data from the API\r\n    const { data, error, isLoading, isError } = useQuery({\r\n        // Specify the query key as the item.title\r\n        queryKey: ['useHamechidunComments', params],\r\n        // Specify the query function as an async arrow function that uses fetch to make the request\r\n        queryFn: async () => {\r\n            // Try to fetch the data from the API\r\n            try {\r\n\r\n                //const queryString = objectToQueryString(params);\r\n                const searchParams = new URLSearchParams(params);\r\n                //?productId=197421?\r\n                const url = \"http://localhost:3222/hamechidun/commentsdataset\"// + searchParams;\r\n                const response = await fetch(url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n                    },\r\n                });\r\n\r\n                // If the response is not OK, throw an error object with the status and message\r\n                if (!response.ok) {\r\n                    throw { status: response.status, message: response.statusText };\r\n                }\r\n                // Parse the response data as JSON and return it\r\n                const data: any = await response.json();\r\n                return data;\r\n            } catch (error) {\r\n                // If there is an error, throw it\r\n                throw error;\r\n            }\r\n        },\r\n        staleTime: 1000 * 60 * 5,\r\n    });\r\n    // Return an object with the data, error, isLoading, and isError properties from the query\r\n    return { data, error, isLoading, isError };\r\n}\r\n\r\n"
        }
    ]
}