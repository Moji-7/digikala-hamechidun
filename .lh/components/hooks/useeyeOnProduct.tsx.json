{
    "sourceFile": "components/hooks/useeyeOnProduct.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1708324731653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708345500203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,12 @@\n             throw { status: response.status, message: response.statusText };\r\n           }\r\n           return response.json();\r\n         },\r\n-        onSettled: () => {\r\n-            // Invalidate the query keys that depend on the eye product data\r\n-            queryClient.invalidateQueries(\"useEyeProduct\");\r\n-          },\r\n+        // onSettled: () => {\r\n+        //     // Invalidate the query keys that depend on the eye product data\r\n+        //     queryClient.invalidateQueries(\"useEyeProduct\");\r\n+        //   },\r\n       });\r\n        const addMutation = useMutation({\r\n         mutationFn: async (eyeProduct: EyeProduct) => {\r\n           const response = await fetch(`http://localhost:3222/eye/EyeProduct`, {\r\n"
                },
                {
                    "date": 1708347076174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n     const deleteMutation = useMutation({\r\n         mutationFn: async (productId: number) => {\r\n-          const response = await fetch(`http://localhost:3222/eye/?productId=${productId}`, {\r\n+          const response = await fetch(`http://localhost:3222/eye/${productId}`, {\r\n             method: \"DELETE\",\r\n           });\r\n           if (!response.ok) {\r\n             throw { status: response.status, message: response.statusText };\r\n"
                }
            ],
            "date": 1708324731653,
            "name": "Commit-0",
            "content": "import { QueryClient, useMutation, useQuery } from \"@tanstack/react-query\";\r\nimport { SearchParamsOrderItem } from \"../entity/SearchQueries\";\r\n;\r\nimport { EyeProduct, EyeProductParams } from \"../entity/Eye.dto\";\r\n\r\nexport const useEyeProduct = (params?: EyeProductParams , queryClient: QueryClient) => {\r\n\r\n    // Use the useQuery hook to fetch the data from the API\r\n    const { data, error, isLoading, isError } = useQuery({\r\n        // Specify the query key as the item.title\r\n        queryKey: ['useEyeProduct', params],\r\n        // Specify the query function as an async arrow function that uses fetch to make the request\r\n        queryFn: async () => {\r\n            // Try to fetch the data from the API\r\n            try {\r\n\r\n                //const queryString = objectToQueryString(params);\r\n                const searchParams = new URLSearchParams(params);\r\n                const url = \"http://localhost:3222/eye/?page=1&length=10\" + searchParams;\r\n                const response = await fetch(url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n                    },\r\n                });\r\n                if (!response.ok) {\r\n                    throw { status: response.status, message: response.statusText };\r\n                }\r\n                const data: any = await response.json();\r\n                return data;\r\n            } catch (error) {\r\n                throw error;\r\n            }\r\n        },\r\n        staleTime: 1000 * 60 * 5,\r\n    });\r\n    const deleteMutation = useMutation({\r\n        mutationFn: async (productId: number) => {\r\n          const response = await fetch(`http://localhost:3222/eye/?productId=${productId}`, {\r\n            method: \"DELETE\",\r\n          });\r\n          if (!response.ok) {\r\n            throw { status: response.status, message: response.statusText };\r\n          }\r\n          return response.json();\r\n        },\r\n        onSettled: () => {\r\n            // Invalidate the query keys that depend on the eye product data\r\n            queryClient.invalidateQueries(\"useEyeProduct\");\r\n          },\r\n      });\r\n       const addMutation = useMutation({\r\n        mutationFn: async (eyeProduct: EyeProduct) => {\r\n          const response = await fetch(`http://localhost:3222/eye/EyeProduct`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(eyeProduct),\r\n          });\r\n          if (!response.ok) {\r\n            throw { status: response.status, message: response.statusText };\r\n          }\r\n          return response.json();\r\n        },\r\n        onSettled: () => {\r\n            // Invalidate the query keys that depend on the eye product data\r\n            queryClient.invalidateQueries(\"useEyeProduct\");\r\n          },\r\n      });\r\n      \r\n    \r\n      return { data, error, isLoading, isError,  deleteMutation,addMutation };\r\n}\r\n\r\n"
        }
    ]
}