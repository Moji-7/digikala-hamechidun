{
    "sourceFile": "components/hooks/usePopulateOrdersProductsCategoriesInfo.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1704779531748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704782453240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as an array with the API URL\r\n         queryKey: ['http://localhost:3222/hamechidun/populate_orders_products_categories_info'],\r\n         // Specify the query function as an async arrow function that uses fetch to make the request\r\n-        queryFn: async () => {\r\n+        queryFn: async ([queryKey]) => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n                 // Make a GET request to the API URL and store the response\r\n                 const response = await fetch(queryKey[0]);\r\n"
                },
                {
                    "date": 1704782781133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,9 @@\n         queryFn: async ([queryKey]) => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n                 // Make a GET request to the API URL and store the response\r\n-                const response = await fetch(queryKey[0]);\r\n-                // If the response is not OK, throw an error object with the status and message\r\n+                const response = await fetch('http://localhost:3222/hamechidun/populate_orders_products_categories_info');\r\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 // Parse the response data as JSON and return it\r\n"
                },
                {
                    "date": 1704782808765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,13 @@\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as an array with the API URL\r\n         queryKey: ['http://localhost:3222/hamechidun/populate_orders_products_categories_info'],\r\n         // Specify the query function as an async arrow function that uses fetch to make the request\r\n-        queryFn: async ([queryKey]) => {\r\n+        queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n-                // Make a GET request to the API URL and store the response\r\n                 const response = await fetch('http://localhost:3222/hamechidun/populate_orders_products_categories_info');\r\n+\r\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 // Parse the response data as JSON and return it\r\n"
                },
                {
                    "date": 1704782815557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n function usePopulateOrdersProductsCategoriesInfo() {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as an array with the API URL\r\n-        queryKey: ['http://localhost:3222/hamechidun/populate_orders_products_categories_info'],\r\n+        queryKey: [''],\r\n         // Specify the query function as an async arrow function that uses fetch to make the request\r\n         queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n"
                },
                {
                    "date": 1704782874087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n function usePopulateOrdersProductsCategoriesInfo() {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as an array with the API URL\r\n-        queryKey: [''],\r\n+        queryKey: ['PopulateOrdersProductsCategoriesInfo'],\r\n         // Specify the query function as an async arrow function that uses fetch to make the request\r\n         queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n"
                },
                {
                    "date": 1704782894861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n function usePopulateOrdersProductsCategoriesInfo() {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as an array with the API URL\r\n-        queryKey: ['PopulateOrdersProductsCategoriesInfo'],\r\n+        queryKey: ['populateOrdersProductsCategoriesInfo'],\r\n         // Specify the query function as an async arrow function that uses fetch to make the request\r\n         queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n"
                },
                {
                    "date": 1704783372206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n // Import the useQuery hook from React Query\r\n import { useQuery } from '@tanstack/react-query';\r\n \r\n-// Define the custom hook for calling the API\r\n function usePopulateOrdersProductsCategoriesInfo() {\r\n-    // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as an array with the API URL\r\n         queryKey: ['populateOrdersProductsCategoriesInfo'],\r\n         // Specify the query function as an async arrow function that uses fetch to make the request\r\n@@ -23,13 +21,10 @@\n                 // If there is an error, throw it\r\n                 throw error;\r\n             }\r\n         },\r\n-        // Optionally, specify some query options, such as staleTime, refetchOnWindowFocus, etc.\r\n-        // For example, you can set the staleTime to 5 minutes, so that the data will not be refetched unless it is older than 5 minutes\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    // Return an object with the data, error, isLoading, and isError properties from the query\r\n     return { data, error, isLoading, isError };\r\n }\r\n \r\n // Export the custom hook\r\n"
                },
                {
                    "date": 1704783609659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,30 +2,23 @@\n import { useQuery } from '@tanstack/react-query';\r\n \r\n function usePopulateOrdersProductsCategoriesInfo() {\r\n     const { data, error, isLoading, isError } = useQuery({\r\n-        // Specify the query key as an array with the API URL\r\n         queryKey: ['populateOrdersProductsCategoriesInfo'],\r\n-        // Specify the query function as an async arrow function that uses fetch to make the request\r\n         queryFn: async () => {\r\n-            // Try to fetch the data from the API\r\n             try {\r\n                 const response = await fetch('http://localhost:3222/hamechidun/populate_orders_products_categories_info');\r\n \r\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n-                // Parse the response data as JSON and return it\r\n                 const data = await response.json();\r\n                 return data;\r\n             } catch (error) {\r\n-                // If there is an error, throw it\r\n                 throw error;\r\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n     return { data, error, isLoading, isError };\r\n }\r\n-\r\n-// Export the custom hook\r\n export default usePopulateOrdersProductsCategoriesInfo;\r\n"
                },
                {
                    "date": 1704783959603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-// Import the useQuery hook from React Query\r\n import { useQuery } from '@tanstack/react-query';\r\n \r\n+\r\n function usePopulateOrdersProductsCategoriesInfo() {\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         queryKey: ['populateOrdersProductsCategoriesInfo'],\r\n         queryFn: async () => {\r\n@@ -10,15 +10,41 @@\n \r\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n-                const data = await response.json();\r\n-                return data;\r\n+                const rawData = await response.json();\r\n+\r\n+                // Map the received JSON data to match the entity model\r\n+                const mappedData = {\r\n+                    orderItemGrouping: rawData.order_item_grouping.map(item => ({\r\n+                        itemCategory2: item.item_category2,\r\n+                        itemCategory3: item.item_category3,\r\n+                        count: item.count,\r\n+                        maxPrice: item.max_price,\r\n+                        avgPrice: item.avg_price,\r\n+                        totalPrice: item.total_price,\r\n+                        avgDiscount: item.avg_discount\r\n+                    })),\r\n+                    ordersGrouping: Object.keys(rawData.orders_grouping).reduce((acc, key) => {\r\n+                        acc[key] = {\r\n+                            count: rawData.orders_grouping[key].count,\r\n+                            maxPrice: rawData.orders_grouping[key].max_price,\r\n+                            avgPrice: rawData.orders_grouping[key].avg_price,\r\n+                            totalPrice: rawData.orders_grouping[key].total_price,\r\n+                            avgDiscount: rawData.orders_grouping[key].avg_discount\r\n+                        };\r\n+                        return acc;\r\n+                    }, {})\r\n+                };\r\n+\r\n+                return mappedData;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n+\r\n     return { data, error, isLoading, isError };\r\n }\r\n+\r\n export default usePopulateOrdersProductsCategoriesInfo;\r\n"
                },
                {
                    "date": 1704784500722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,18 @@\n                             maxPrice: rawData.orders_grouping[key].max_price,\r\n                             avgPrice: rawData.orders_grouping[key].avg_price,\r\n                             totalPrice: rawData.orders_grouping[key].total_price,\r\n                             avgDiscount: rawData.orders_grouping[key].avg_discount\r\n+                            title: rawData.orders_grouping[key].title,\r\n+                            count: rawData.orders_grouping[key].count,\r\n+                            maxPrice: rawData.orders_grouping[key].max_price,\r\n+                            avgPrice: rawData.orders_grouping[key].avg_price,\r\n+                            totalPrice: rawData.orders_grouping[key].total_price,\r\n+                            avgDiscount: rawData.orders_grouping[key].avg_discount\r\n                         };\r\n                         return acc;\r\n                     }, {})\r\n+                   \r\n                 };\r\n \r\n                 return mappedData;\r\n             } catch (error) {\r\n"
                },
                {
                    "date": 1704784507634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,8 @@\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n                     ordersGrouping: Object.keys(rawData.orders_grouping).reduce((acc, key) => {\r\n                         acc[key] = {\r\n-                            count: rawData.orders_grouping[key].count,\r\n-                            maxPrice: rawData.orders_grouping[key].max_price,\r\n-                            avgPrice: rawData.orders_grouping[key].avg_price,\r\n-                            totalPrice: rawData.orders_grouping[key].total_price,\r\n-                            avgDiscount: rawData.orders_grouping[key].avg_discount\r\n                             title: rawData.orders_grouping[key].title,\r\n                             count: rawData.orders_grouping[key].count,\r\n                             maxPrice: rawData.orders_grouping[key].max_price,\r\n                             avgPrice: rawData.orders_grouping[key].avg_price,\r\n"
                },
                {
                    "date": 1704784544285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n                         totalPrice: item.total_price,\r\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n                     ordersGrouping: Object.keys(rawData.orders_grouping).reduce((acc, key) => {\r\n-                        acc[key] = {\r\n+                        acc[key:] = {\r\n                             title: rawData.orders_grouping[key].title,\r\n                             count: rawData.orders_grouping[key].count,\r\n                             maxPrice: rawData.orders_grouping[key].max_price,\r\n                             avgPrice: rawData.orders_grouping[key].avg_price,\r\n"
                },
                {
                    "date": 1704784611932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,19 +24,17 @@\n                         totalPrice: item.total_price,\r\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n                     ordersGrouping: Object.keys(rawData.orders_grouping).reduce((acc, key) => {\r\n-                        acc[key:] = {\r\n-                            title: rawData.orders_grouping[key].title,\r\n+                        acc[key] = {\r\n                             count: rawData.orders_grouping[key].count,\r\n                             maxPrice: rawData.orders_grouping[key].max_price,\r\n                             avgPrice: rawData.orders_grouping[key].avg_price,\r\n                             totalPrice: rawData.orders_grouping[key].total_price,\r\n                             avgDiscount: rawData.orders_grouping[key].avg_discount\r\n                         };\r\n                         return acc;\r\n                     }, {})\r\n-                   \r\n                 };\r\n \r\n                 return mappedData;\r\n             } catch (error) {\r\n"
                },
                {
                    "date": 1704784639471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n                     ordersGrouping: Object.keys(rawData.orders_grouping).reduce((acc, key) => {\r\n                         acc[key] = {\r\n+                            title: rawData.orders_grouping[key].title,\r\n                             count: rawData.orders_grouping[key].count,\r\n                             maxPrice: rawData.orders_grouping[key].max_price,\r\n                             avgPrice: rawData.orders_grouping[key].avg_price,\r\n                             totalPrice: rawData.orders_grouping[key].total_price,\r\n"
                },
                {
                    "date": 1704784709988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,19 +23,17 @@\n                         avgPrice: item.avg_price,\r\n                         totalPrice: item.total_price,\r\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n-                    ordersGrouping: Object.keys(rawData.orders_grouping).reduce((acc, key) => {\r\n-                        acc[key] = {\r\n-                            title: rawData.orders_grouping[key].title,\r\n-                            count: rawData.orders_grouping[key].count,\r\n-                            maxPrice: rawData.orders_grouping[key].max_price,\r\n-                            avgPrice: rawData.orders_grouping[key].avg_price,\r\n-                            totalPrice: rawData.orders_grouping[key].total_price,\r\n-                            avgDiscount: rawData.orders_grouping[key].avg_discount\r\n-                        };\r\n-                        return acc;\r\n-                    }, {})\r\n+                    ordersGrouping: rawData.order_item_grouping.map(item => ({\r\n+                      \r\n+                            title: item.title,\r\n+                            count: item.count,\r\n+                            maxPrice: item.max_price,\r\n+                            avgPrice: item.avg_price,\r\n+                            totalPrice: item.total_price,\r\n+                            avgDiscount: item.avg_discount\r\n+                    })),\r\n                 };\r\n \r\n                 return mappedData;\r\n             } catch (error) {\r\n"
                },
                {
                    "date": 1704785829275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,11 @@\n \r\n                 // Map the received JSON data to match the entity model\r\n                 const mappedData = {\r\n                     orderItemGrouping: rawData.order_item_grouping.map(item => ({\r\n-                        itemCategory2: item.item_category2,\r\n-                        itemCategory3: item.item_category3,\r\n+                        // itemCategory2: item.item_category2,\r\n+                        // itemCategory3: item.item_category3,\r\n+                        title: item.title,\r\n                         count: item.count,\r\n                         maxPrice: item.max_price,\r\n                         avgPrice: item.avg_price,\r\n                         totalPrice: item.total_price,\r\n"
                },
                {
                    "date": 1704785946677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n                 }\r\n                 const rawData = await response.json();\r\n \r\n                 // Map the received JSON data to match the entity model\r\n-                const mappedData = {\r\n+                const data = {\r\n                     orderItemGrouping: rawData.order_item_grouping.map(item => ({\r\n                         // itemCategory2: item.item_category2,\r\n                         // itemCategory3: item.item_category3,\r\n                         title: item.title,\r\n@@ -35,9 +35,9 @@\n                             avgDiscount: item.avg_discount\r\n                     })),\r\n                 };\r\n \r\n-                return mappedData;\r\n+                return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n"
                },
                {
                    "date": 1704788351543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n                             avgDiscount: item.avg_discount\r\n                     })),\r\n                 };\r\n \r\n-                return data;\r\n+            \r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n"
                },
                {
                    "date": 1704788385415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n                             avgDiscount: item.avg_discount\r\n                     })),\r\n                 };\r\n \r\n-            \r\n+                return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n"
                },
                {
                    "date": 1704788395637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                             totalPrice: item.total_price,\r\n                             avgDiscount: item.avg_discount\r\n                     })),\r\n                 };\r\n-\r\n+                console.log(data[0])\r\n                 return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n"
                },
                {
                    "date": 1704788413292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n                             totalPrice: item.total_price,\r\n                             avgDiscount: item.avg_discount\r\n                     })),\r\n                 };\r\n-                console.log(data[0])\r\n                 return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n"
                },
                {
                    "date": 1704788516370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n                 const data = {\r\n                     orderItemGrouping: rawData.order_item_grouping.map(item => ({\r\n                         // itemCategory2: item.item_category2,\r\n                         // itemCategory3: item.item_category3,\r\n-                        title: item.title,\r\n+                        title: item.item_category3.title,\r\n                         count: item.count,\r\n                         maxPrice: item.max_price,\r\n                         avgPrice: item.avg_price,\r\n                         totalPrice: item.total_price,\r\n"
                },
                {
                    "date": 1704788614595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n                     ordersGrouping: rawData.order_item_grouping.map(item => ({\r\n                       \r\n-                            title: item.title,\r\n+                            title: item.item_category2.title,\r\n                             count: item.count,\r\n                             maxPrice: item.max_price,\r\n                             avgPrice: item.avg_price,\r\n                             totalPrice: item.total_price,\r\n"
                },
                {
                    "date": 1704788699280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n                         avgPrice: item.avg_price,\r\n                         totalPrice: item.total_price,\r\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n-                    ordersGrouping: rawData.order_item_grouping.map(item => ({\r\n+                    ordersGrouping: rawData.orders_grouping.map(item => ({\r\n                       \r\n                             title: item.item_category2.title,\r\n                             count: item.count,\r\n                             maxPrice: item.max_price,\r\n"
                },
                {
                    "date": 1704789614059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,19 +14,17 @@\n                 const rawData = await response.json();\r\n \r\n                 // Map the received JSON data to match the entity model\r\n                 const data = {\r\n-                    orderItemGrouping: rawData.order_item_grouping.map(item => ({\r\n-                        // itemCategory2: item.item_category2,\r\n-                        // itemCategory3: item.item_category3,\r\n-                        title: item.item_category3.title,\r\n+                    orderGroupedCategory_2: rawData.orderGroupedCategory_2.map(item => ({\r\n+                        title: item.title,\r\n                         count: item.count,\r\n                         maxPrice: item.max_price,\r\n                         avgPrice: item.avg_price,\r\n                         totalPrice: item.total_price,\r\n                         avgDiscount: item.avg_discount\r\n                     })),\r\n-                    ordersGrouping: rawData.orders_grouping.map(item => ({\r\n+                    orderGroupedCategory_3: rawData.orderGroupedCategory_3.map(item => ({\r\n                       \r\n                             title: item.item_category2.title,\r\n                             count: item.count,\r\n                             maxPrice: item.max_price,\r\n"
                },
                {
                    "date": 1704790021254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,51 @@\n-import { useQuery } from '@tanstack/react-query';\r\n+import { useQuery } from \"@tanstack/react-query\";\r\n \r\n-\r\n function usePopulateOrdersProductsCategoriesInfo() {\r\n-    const { data, error, isLoading, isError } = useQuery({\r\n-        queryKey: ['populateOrdersProductsCategoriesInfo'],\r\n-        queryFn: async () => {\r\n-            try {\r\n-                const response = await fetch('http://localhost:3222/hamechidun/populate_orders_products_categories_info');\r\n+  const { data, error, isLoading, isError } = useQuery({\r\n+    queryKey: [\"populateOrdersProductsCategoriesInfo\"],\r\n+    queryFn: async () => {\r\n+      try {\r\n+        const response = await fetch(\r\n+          \"http://localhost:3222/hamechidun/populate_orders_products_categories_info\"\r\n+        );\r\n \r\n-                if (!response.ok) {\r\n-                    throw { status: response.status, message: response.statusText };\r\n-                }\r\n-                const rawData = await response.json();\r\n+        if (!response.ok) {\r\n+          throw { status: response.status, message: response.statusText };\r\n+        }\r\n+        const rawData = await response.json();\r\n \r\n-                // Map the received JSON data to match the entity model\r\n-                const data = {\r\n-                    orderGroupedCategory_2: rawData.orderGroupedCategory_2.map(item => ({\r\n-                        title: item.title,\r\n-                        count: item.count,\r\n-                        maxPrice: item.max_price,\r\n-                        avgPrice: item.avg_price,\r\n-                        totalPrice: item.total_price,\r\n-                        avgDiscount: item.avg_discount\r\n-                    })),\r\n-                    orderGroupedCategory_3: rawData.orderGroupedCategory_3.map(item => ({\r\n-                      \r\n-                            title: item.item_category2.title,\r\n-                            count: item.count,\r\n-                            maxPrice: item.max_price,\r\n-                            avgPrice: item.avg_price,\r\n-                            totalPrice: item.total_price,\r\n-                            avgDiscount: item.avg_discount\r\n-                    })),\r\n-                };\r\n-                return data;\r\n-            } catch (error) {\r\n-                throw error;\r\n-            }\r\n-        },\r\n-        staleTime: 1000 * 60 * 5,\r\n-    });\r\n+        // Map the received JSON data to match the entity model\r\n+        const data = {\r\n+          orderGroupedCategory_2: rawData.orderGroupedCategory_2.map(\r\n+            (item) => ({\r\n+              title: item.title,\r\n+              count: item.count,\r\n+              maxPrice: item.max_price,\r\n+              avgPrice: item.avg_price,\r\n+              totalPrice: item.total_price,\r\n+              avgDiscount: item.avg_discount,\r\n+            })\r\n+          ),\r\n+          orderGroupedCategory_3: rawData.orderGroupedCategory_3.map(\r\n+            (item) => ({\r\n+              title: item.item_category2.title,\r\n+              count: item.count,\r\n+              maxPrice: item.max_price,\r\n+              avgPrice: item.avg_price,\r\n+              totalPrice: item.total_price,\r\n+              avgDiscount: item.avg_discount,\r\n+            })\r\n+          ),\r\n+        };\r\n+        return data;\r\n+      } catch (error) {\r\n+        throw error;\r\n+      }\r\n+    },\r\n+    staleTime: 1000 * 60 * 5,\r\n+  });\r\n \r\n-    return { data, error, isLoading, isError };\r\n+  return { data, error, isLoading, isError };\r\n }\r\n \r\n export default usePopulateOrdersProductsCategoriesInfo;\r\n"
                },
                {
                    "date": 1704790223638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,31 +12,15 @@\n         if (!response.ok) {\r\n           throw { status: response.status, message: response.statusText };\r\n         }\r\n         const rawData = await response.json();\r\n-\r\n+        const orderGroupedCategory2 = mapOrderGroupedCategory(rawData, 'orderGroupedCategory_2');\r\n+        const orderGroupedCategory3 = mapOrderGroupedCategory(rawData, 'orderGroupedCategory_3');\r\n+        \r\n         // Map the received JSON data to match the entity model\r\n         const data = {\r\n-          orderGroupedCategory_2: rawData.orderGroupedCategory_2.map(\r\n-            (item) => ({\r\n-              title: item.title,\r\n-              count: item.count,\r\n-              maxPrice: item.max_price,\r\n-              avgPrice: item.avg_price,\r\n-              totalPrice: item.total_price,\r\n-              avgDiscount: item.avg_discount,\r\n-            })\r\n-          ),\r\n-          orderGroupedCategory_3: rawData.orderGroupedCategory_3.map(\r\n-            (item) => ({\r\n-              title: item.item_category2.title,\r\n-              count: item.count,\r\n-              maxPrice: item.max_price,\r\n-              avgPrice: item.avg_price,\r\n-              totalPrice: item.total_price,\r\n-              avgDiscount: item.avg_discount,\r\n-            })\r\n-          ),\r\n+          orderGroupedCategory_2:orderGroupedCategory2,\r\n+          orderGroupedCategory_3: orderGroupedCategory3\r\n         };\r\n         return data;\r\n       } catch (error) {\r\n         throw error;\r\n@@ -46,6 +30,19 @@\n   });\r\n \r\n   return { data, error, isLoading, isError };\r\n }\r\n-\r\n+const mapOrderGroupedCategory = (rawData, category) => {\r\n+    return rawData[category].map((item) => {\r\n+      const title = category === 'orderGroupedCategory_3' ? item.item_category2.title : item.title;\r\n+      return {\r\n+        title: title,\r\n+        count: item.count,\r\n+        maxPrice: item.max_price,\r\n+        avgPrice: item.avg_price,\r\n+        totalPrice: item.total_price,\r\n+        avgDiscount: item.avg_discount,\r\n+      };\r\n+    });\r\n+  };\r\n+  \r\n export default usePopulateOrdersProductsCategoriesInfo;\r\n"
                },
                {
                    "date": 1704790326277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n   return { data, error, isLoading, isError };\r\n }\r\n const mapOrderGroupedCategory = (rawData, category) => {\r\n     return rawData[category].map((item) => {\r\n-      const title = category === 'orderGroupedCategory_3' ? item.item_category2.title : item.title;\r\n+      //const title = category === 'orderGroupedCategory_3' ? item.item_category2.title : item.title;\r\n       return {\r\n-        title: title,\r\n+        title: item.title,\r\n         count: item.count,\r\n         maxPrice: item.max_price,\r\n         avgPrice: item.avg_price,\r\n         totalPrice: item.total_price,\r\n"
                },
                {
                    "date": 1704790487489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n   return { data, error, isLoading, isError };\r\n }\r\n const mapOrderGroupedCategory = (rawData, category) => {\r\n     return rawData[category].map((item) => {\r\n-      //const title = category === 'orderGroupedCategory_3' ? item.item_category2.title : item.title;\r\n+      //const title = category === 'orderGroupedCategory_3' ? item.item_category2.title : item.category.title;\r\n       return {\r\n-        title: item.title,\r\n-        count: item.count,\r\n-        maxPrice: item.max_price,\r\n-        avgPrice: item.avg_price,\r\n-        totalPrice: item.total_price,\r\n-        avgDiscount: item.avg_discount,\r\n+        title: item.category.title,\r\n+        count: item.category.count,\r\n+        maxPrice: item.category.max_price,\r\n+        avgPrice: item.category.avg_price,\r\n+        totalPrice: item.category.total_price,\r\n+        avgDiscount: item.category.avg_discount,\r\n       };\r\n     });\r\n   };\r\n   \r\n"
                },
                {
                    "date": 1704952062823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,11 @@\n const mapOrderGroupedCategory = (rawData, category) => {\r\n     return rawData[category].map((item) => {\r\n       //const title = category === 'orderGroupedCategory_3' ? item.item_category2.title : item.category.title;\r\n       return {\r\n+        name: item.category.name,\r\n         title: item.category.title,\r\n+        parent: item.category.parent,\r\n         count: item.category.count,\r\n         maxPrice: item.category.max_price,\r\n         avgPrice: item.category.avg_price,\r\n         totalPrice: item.category.total_price,\r\n"
                },
                {
                    "date": 1704953634406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n         maxPrice: item.category.max_price,\r\n         avgPrice: item.category.avg_price,\r\n         totalPrice: item.category.total_price,\r\n         avgDiscount: item.category.avg_discount,\r\n+        childs: item.category.childs,\r\n       };\r\n     });\r\n   };\r\n   \r\n"
                }
            ],
            "date": 1704779531748,
            "name": "Commit-0",
            "content": "// Import the useQuery hook from React Query\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\n// Define the custom hook for calling the API\r\nfunction usePopulateOrdersProductsCategoriesInfo() {\r\n    // Use the useQuery hook to fetch the data from the API\r\n    const { data, error, isLoading, isError } = useQuery({\r\n        // Specify the query key as an array with the API URL\r\n        queryKey: ['http://localhost:3222/hamechidun/populate_orders_products_categories_info'],\r\n        // Specify the query function as an async arrow function that uses fetch to make the request\r\n        queryFn: async () => {\r\n            // Try to fetch the data from the API\r\n            try {\r\n                // Make a GET request to the API URL and store the response\r\n                const response = await fetch(queryKey[0]);\r\n                // If the response is not OK, throw an error object with the status and message\r\n                if (!response.ok) {\r\n                    throw { status: response.status, message: response.statusText };\r\n                }\r\n                // Parse the response data as JSON and return it\r\n                const data = await response.json();\r\n                return data;\r\n            } catch (error) {\r\n                // If there is an error, throw it\r\n                throw error;\r\n            }\r\n        },\r\n        // Optionally, specify some query options, such as staleTime, refetchOnWindowFocus, etc.\r\n        // For example, you can set the staleTime to 5 minutes, so that the data will not be refetched unless it is older than 5 minutes\r\n        staleTime: 1000 * 60 * 5,\r\n    });\r\n    // Return an object with the data, error, isLoading, and isError properties from the query\r\n    return { data, error, isLoading, isError };\r\n}\r\n\r\n// Export the custom hook\r\nexport default usePopulateOrdersProductsCategoriesInfo;\r\n"
        }
    ]
}