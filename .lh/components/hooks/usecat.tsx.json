{
    "sourceFile": "components/hooks/usecat.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1704793655527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704793675081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n // Define the custom hook for calling the API based on the item.title\r\n-function useFetchDataByTitle(title: string) {\r\n+function usecat(title: string) {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n       // Specify the query key as the item.title\r\n       queryKey: title,\r\n@@ -37,5 +37,7 @@\n     });\r\n     // Return an object with the data, error, isLoading, and isError properties from the query\r\n     return { data, error, isLoading, isError };\r\n   }\r\n+  export default usecat;\r\n+\r\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1704793709138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n function usecat(title: string) {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n       // Specify the query key as the item.title\r\n-      queryKey: title,\r\n+      queryKey: ['catcat'],\r\n       // Specify the query function as an async arrow function that uses fetch to make the request\r\n       queryFn: async () => {\r\n         // Try to fetch the data from the API\r\n         try {\r\n"
                },
                {
                    "date": 1704794067556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,16 @@\n         // Try to fetch the data from the API\r\n         try {\r\n           // Make a GET request to the API URL and pass the title as a query header parameter\r\n           const response = await fetch(\r\n-            \"http://localhost:3222/hamechidun/populate_orders_products_categories_info\",\r\n+            \"http://localhost:3222/hamechidun/orderitem\",\r\n             {\r\n               headers: {\r\n-                title: title,\r\n+                product_title_fa:100,\r\n+                quantity:2,\r\n+                seller_title:\"دیجی‌کالا\",\r\n+                sortColumn:\"quantity\",\r\n+                sortType:\"DESC\"\"\r\n               },\r\n             }\r\n           );\r\n           // If the response is not OK, throw an error object with the status and message\r\n"
                },
                {
                    "date": 1704794144570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,19 +11,21 @@\n         // Try to fetch the data from the API\r\n         try {\r\n           // Make a GET request to the API URL and pass the title as a query header parameter\r\n           const response = await fetch(\r\n-            \"http://localhost:3222/hamechidun/orderitem\",\r\n+            \"http://localhost:3222/hamechidun/orderitem?\",\r\n             {\r\n+              method: \"GET\",\r\n               headers: {\r\n-                product_title_fa:100,\r\n-                quantity:2,\r\n-                seller_title:\"دیجی‌کالا\",\r\n-                sortColumn:\"quantity\",\r\n-                sortType:\"DESC\"\"\r\n+                \"product_title_fa\": \"100\",\r\n+                \"quantity\": \"2\",\r\n+                \"seller_title\": \"دیجی‌کالا\",\r\n+                \"sortColumn\": \"quantity\",\r\n+                \"sortType\": \"DESC\"\r\n               },\r\n             }\r\n           );\r\n+          \r\n           // If the response is not OK, throw an error object with the status and message\r\n           if (!response.ok) {\r\n             throw { status: response.status, message: response.statusText };\r\n           }\r\n"
                },
                {
                    "date": 1704794637628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,18 @@\n             \"http://localhost:3222/hamechidun/orderitem?\",\r\n             {\r\n               method: \"GET\",\r\n               headers: {\r\n-                \"product_title_fa\": \"100\",\r\n-                \"quantity\": \"2\",\r\n-                \"seller_title\": \"دیجی‌کالا\",\r\n-                \"sortColumn\": \"quantity\",\r\n-                \"sortType\": \"DESC\"\r\n+                \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n+                \"product_title_fa\": encodeURIComponent(\"100\"),\r\n+                \"quantity\": encodeURIComponent(\"2\"),\r\n+                \"seller_title\": encodeURIComponent(\"دیجی‌کالا\"),\r\n+                \"sortColumn\": encodeURIComponent(\"quantity\"),\r\n+                \"sortType\": encodeURIComponent(\"DESC\"),\r\n               },\r\n             }\r\n           );\r\n+          );\r\n           \r\n           // If the response is not OK, throw an error object with the status and message\r\n           if (!response.ok) {\r\n             throw { status: response.status, message: response.statusText };\r\n"
                },
                {
                    "date": 1704794662784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n                 \"sortType\": encodeURIComponent(\"DESC\"),\r\n               },\r\n             }\r\n           );\r\n-          );\r\n           \r\n+          \r\n           // If the response is not OK, throw an error object with the status and message\r\n           if (!response.ok) {\r\n             throw { status: response.status, message: response.statusText };\r\n           }\r\n"
                },
                {
                    "date": 1704796616088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,49 +3,52 @@\n // Define the custom hook for calling the API based on the item.title\r\n function usecat(title: string) {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n-      // Specify the query key as the item.title\r\n-      queryKey: ['catcat'],\r\n-      // Specify the query function as an async arrow function that uses fetch to make the request\r\n-      queryFn: async () => {\r\n-        // Try to fetch the data from the API\r\n-        try {\r\n-          // Make a GET request to the API URL and pass the title as a query header parameter\r\n-          const response = await fetch(\r\n-            \"http://localhost:3222/hamechidun/orderitem?\",\r\n-            {\r\n-              method: \"GET\",\r\n-              headers: {\r\n-                \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n-                \"product_title_fa\": encodeURIComponent(\"100\"),\r\n-                \"quantity\": encodeURIComponent(\"2\"),\r\n-                \"seller_title\": encodeURIComponent(\"دیجی‌کالا\"),\r\n-                \"sortColumn\": encodeURIComponent(\"quantity\"),\r\n-                \"sortType\": encodeURIComponent(\"DESC\"),\r\n-              },\r\n+        // Specify the query key as the item.title\r\n+        queryKey: ['catcat'],\r\n+        // Specify the query function as an async arrow function that uses fetch to make the request\r\n+        queryFn: async () => {\r\n+            // Try to fetch the data from the API\r\n+            try {\r\n+                // Create an object with the parameters that you want to pass to the API\r\n+                const params = {\r\n+                    product_title_fa: \"100\",\r\n+                    quantity: \"2\",\r\n+                    seller_title: \"دیجی‌کالا\",\r\n+                    sortColumn: \"quantity\",\r\n+                    sortType: \"DESC\",\r\n+                };\r\n+\r\n+                // Create a URLSearchParams object from the params object\r\n+                const searchParams = new URLSearchParams(params);\r\n+\r\n+                // Append the searchParams string to the URL\r\n+                const url = \"http://localhost:3222/hamechidun/orderitem?\" + searchParams;\r\n+                const response = await fetch(url, {\r\n+                    method: \"GET\",\r\n+                    headers: {\r\n+                        \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n+                    },\r\n+                });\r\n\\ No newline at end of file\n+\r\n+                // If the response is not OK, throw an error object with the status and message\r\n+                if (!response.ok) {\r\n+                    throw { status: response.status, message: response.statusText };\r\n+                }\r\n+                // Parse the response data as JSON and return it\r\n+                const data: any = await response.json();\r\n+                return data;\r\n+            } catch (error) {\r\n+                // If there is an error, throw it\r\n+                throw error;\r\n             }\r\n-          );\r\n-          \r\n-          \r\n-          // If the response is not OK, throw an error object with the status and message\r\n-          if (!response.ok) {\r\n-            throw { status: response.status, message: response.statusText };\r\n-          }\r\n-          // Parse the response data as JSON and return it\r\n-          const data: any = await response.json();\r\n-          return data;\r\n-        } catch (error) {\r\n-          // If there is an error, throw it\r\n-          throw error;\r\n-        }\r\n-      },\r\n-      // Optionally, specify some query options, such as staleTime, refetchOnWindowFocus, etc.\r\n-      // For example, you can set the staleTime to 5 minutes, so that the data will not be refetched unless it is older than 5 minutes\r\n-      staleTime: 1000 * 60 * 5,\r\n+        },\r\n+        // Optionally, specify some query options, such as staleTime, refetchOnWindowFocus, etc.\r\n+        // For example, you can set the staleTime to 5 minutes, so that the data will not be refetched unless it is older than 5 minutes\r\n+        staleTime: 1000 * 60 * 5,\r\n     });\r\n     // Return an object with the data, error, isLoading, and isError properties from the query\r\n     return { data, error, isLoading, isError };\r\n-  }\r\n-  export default usecat;\r\n+}\r\n+export default usecat;\r\n \r\n-  \n"
                },
                {
                    "date": 1704873305256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,14 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n-// Define the custom hook for calling the API based on the item.title\r\n+// Define the type for the parameters\r\n+type Params = {\r\n+    product_title_fa: string;\r\n+    quantity: string;\r\n+    seller_title: string;\r\n+    sortColumn: string;\r\n+    sortType: string;\r\n+  };\r\n function usecat(title: string) {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n@@ -49,5 +56,6 @@\n     });\r\n     // Return an object with the data, error, isLoading, and isError properties from the query\r\n     return { data, error, isLoading, isError };\r\n }\r\n-export default usecat;\n\\ No newline at end of file\n+export default usecat;\r\n+\r\n"
                },
                {
                    "date": 1704873336395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     seller_title: string;\r\n     sortColumn: string;\r\n     sortType: string;\r\n   };\r\n-function usecat(title: string) {\r\n+function useca(params: Params) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['catcat'],\r\n"
                },
                {
                    "date": 1704873390131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,25 +7,17 @@\n     seller_title: string;\r\n     sortColumn: string;\r\n     sortType: string;\r\n   };\r\n-function useca(params: Params) => {\r\n+  export const useCat = (params: Params) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n-        queryKey: ['catcat'],\r\n+        queryKey: ['catcat', params],\r\n         // Specify the query function as an async arrow function that uses fetch to make the request\r\n         queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n-                // Create an object with the parameters that you want to pass to the API\r\n-                const params = {\r\n-                    product_title_fa: \"100\",\r\n-                    quantity: \"2\",\r\n-                    seller_title: \"دیجی‌کالا\",\r\n-                    sortColumn: \"quantity\",\r\n-                    sortType: \"DESC\",\r\n-                };\r\n \r\n                 // Create a URLSearchParams object from the params object\r\n                 const searchParams = new URLSearchParams(params);\r\n \r\n@@ -56,6 +48,5 @@\n     });\r\n     // Return an object with the data, error, isLoading, and isError properties from the query\r\n     return { data, error, isLoading, isError };\r\n }\r\n-export default usecat;\r\n \r\n"
                },
                {
                    "date": 1704877636115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,8 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n // Define the type for the parameters\r\n-type Params = {\r\n-    product_title_fa: string;\r\n-    quantity: string;\r\n-    seller_title: string;\r\n-    sortColumn: string;\r\n-    sortType: string;\r\n-  };\r\n+\r\n   export const useCat = (params: Params) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n"
                },
                {
                    "date": 1704877655063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n+import { SearchParamsOrderItem } from \"../entity/SearchQueries\";\r\n \r\n // Define the type for the parameters\r\n \r\n-  export const useCat = (params: Params) => {\r\n+  export const useCat = (params: SearchParamsOrderItem) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['catcat', params],\r\n"
                },
                {
                    "date": 1704877915401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,28 @@\n import { SearchParamsOrderItem } from \"../entity/SearchQueries\";\r\n \r\n // Define the type for the parameters\r\n \r\n+function objectToQueryString(obj) {\r\n+    // Initialize an empty array to store the key-value pairs\r\n+    let pairs = [];\r\n+  \r\n+    // Loop through the object properties\r\n+    for (let key in obj) {\r\n+      // Check if the property is own and enumerable\r\n+      if (obj.hasOwnProperty(key) && typeof obj[key] !== \"undefined\") {\r\n+        // Encode the key and the value and push them to the array\r\n+        pairs.push(\r\n+          encodeURIComponent(key) + \"=\" + encodeURIComponent(obj[key])\r\n+        );\r\n+      }\r\n+    }\r\n+  \r\n+    // Join the pairs with ampersands and return the query string\r\n+    return pairs.join(\"&\");\r\n+  }\r\n+  \r\n+\r\n   export const useCat = (params: SearchParamsOrderItem) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n@@ -13,9 +33,11 @@\n             // Try to fetch the data from the API\r\n             try {\r\n \r\n                 // Create a URLSearchParams object from the params object\r\n-                const searchParams = new URLSearchParams(params);\r\n+                  // Use the function to convert your object to a query string\r\n+  const queryString = objectToQueryString(params);\r\n+                const searchParams = new URLSearchParams(queryString);\r\n \r\n                 // Append the searchParams string to the URL\r\n                 const url = \"http://localhost:3222/hamechidun/orderitem?\" + searchParams;\r\n                 const response = await fetch(url, {\r\n"
                },
                {
                    "date": 1704877944439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n       }\r\n     }\r\n   \r\n     // Join the pairs with ampersands and return the query string\r\n+    debugger;\r\n     return pairs.join(\"&\");\r\n   }\r\n   \r\n \r\n"
                },
                {
                    "date": 1704878267097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             try {\r\n \r\n                 // Create a URLSearchParams object from the params object\r\n                   // Use the function to convert your object to a query string\r\n-  const queryString = objectToQueryString(params);\r\n+  //const queryString = objectToQueryString(params);\r\n                 const searchParams = new URLSearchParams(queryString);\r\n \r\n                 // Append the searchParams string to the URL\r\n                 const url = \"http://localhost:3222/hamechidun/orderitem?\" + searchParams;\r\n"
                },
                {
                    "date": 1704878322914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n                 // Create a URLSearchParams object from the params object\r\n                   // Use the function to convert your object to a query string\r\n   //const queryString = objectToQueryString(params);\r\n-                const searchParams = new URLSearchParams(queryString);\r\n+                const searchParams = new URLSearchParams(params);\r\n \r\n                 // Append the searchParams string to the URL\r\n                 const url = \"http://localhost:3222/hamechidun/orderitem?\" + searchParams;\r\n                 const response = await fetch(url, {\r\n"
                },
                {
                    "date": 1704887761450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,24 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n import { SearchParamsOrderItem } from \"../entity/SearchQueries\";\r\n \r\n-// Define the type for the parameters\r\n \r\n function objectToQueryString(obj) {\r\n-    // Initialize an empty array to store the key-value pairs\r\n     let pairs = [];\r\n-  \r\n     // Loop through the object properties\r\n     for (let key in obj) {\r\n-      // Check if the property is own and enumerable\r\n-      if (obj.hasOwnProperty(key) && typeof obj[key] !== \"undefined\") {\r\n-        // Encode the key and the value and push them to the array\r\n-        pairs.push(\r\n-          encodeURIComponent(key) + \"=\" + encodeURIComponent(obj[key])\r\n-        );\r\n-      }\r\n+        // Check if the property is own and enumerable\r\n+        if (obj.hasOwnProperty(key) && typeof obj[key] !== \"undefined\") {\r\n+            pairs.push(\r\n+                encodeURIComponent(key) + \"=\" + encodeURIComponent(obj[key])\r\n+            );\r\n+        }\r\n     }\r\n-  \r\n-    // Join the pairs with ampersands and return the query string\r\n-    debugger;\r\n     return pairs.join(\"&\");\r\n-  }\r\n-  \r\n+}\r\n \r\n-  export const useCat = (params: SearchParamsOrderItem) => {\r\n+\r\n+export const useCat = (params: SearchParamsOrderItem) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['catcat', params],\r\n@@ -33,14 +26,10 @@\n         queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n \r\n-                // Create a URLSearchParams object from the params object\r\n-                  // Use the function to convert your object to a query string\r\n-  //const queryString = objectToQueryString(params);\r\n+                //const queryString = objectToQueryString(params);\r\n                 const searchParams = new URLSearchParams(params);\r\n-\r\n-                // Append the searchParams string to the URL\r\n                 const url = \"http://localhost:3222/hamechidun/orderitem?\" + searchParams;\r\n                 const response = await fetch(url, {\r\n                     method: \"GET\",\r\n                     headers: {\r\n"
                }
            ],
            "date": 1704793655527,
            "name": "Commit-0",
            "content": "import { useQuery } from \"@tanstack/react-query\";\r\n\r\n// Define the custom hook for calling the API based on the item.title\r\nfunction useFetchDataByTitle(title: string) {\r\n    // Use the useQuery hook to fetch the data from the API\r\n    const { data, error, isLoading, isError } = useQuery({\r\n      // Specify the query key as the item.title\r\n      queryKey: title,\r\n      // Specify the query function as an async arrow function that uses fetch to make the request\r\n      queryFn: async () => {\r\n        // Try to fetch the data from the API\r\n        try {\r\n          // Make a GET request to the API URL and pass the title as a query header parameter\r\n          const response = await fetch(\r\n            \"http://localhost:3222/hamechidun/populate_orders_products_categories_info\",\r\n            {\r\n              headers: {\r\n                title: title,\r\n              },\r\n            }\r\n          );\r\n          // If the response is not OK, throw an error object with the status and message\r\n          if (!response.ok) {\r\n            throw { status: response.status, message: response.statusText };\r\n          }\r\n          // Parse the response data as JSON and return it\r\n          const data: any = await response.json();\r\n          return data;\r\n        } catch (error) {\r\n          // If there is an error, throw it\r\n          throw error;\r\n        }\r\n      },\r\n      // Optionally, specify some query options, such as staleTime, refetchOnWindowFocus, etc.\r\n      // For example, you can set the staleTime to 5 minutes, so that the data will not be refetched unless it is older than 5 minutes\r\n      staleTime: 1000 * 60 * 5,\r\n    });\r\n    // Return an object with the data, error, isLoading, and isError properties from the query\r\n    return { data, error, isLoading, isError };\r\n  }\r\n  "
        }
    ]
}