{
    "sourceFile": "components/OrdersProductsCategoriesInfo2.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1705387940801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705387957230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,13 @@\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n-interface OrdersProductsCategoriesProps2 {\r\n+interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n-    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ ordersProductsCategories }) => {\r\n+    const OrdersProductsCategoriesInfo2: React.FC<OrdersProductsCategoriesProps> = ({ ordersProductsCategories }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n"
                },
                {
                    "date": 1705387988914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,46 +18,9 @@\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n         <View style={styles.container}>\r\n-            {/* Show a loading text while the data is being fetched */}\r\n-            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n-            {/* Show an error text if there is an error */}\r\n-            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n-            {/* Show a card with the data if the data is available */}\r\n-            {data && (\r\n-                <>\r\n-                    <ListItem bottomDivider>\r\n-                        <ListItem.Content>\r\n-                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n-                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n-                            </ListItem.Title>\r\n-                            <ListItem.Subtitle  >\r\n-                                {data.orderGroupedCategory_2.map((item, index) => (\r\n-                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                                    </ListItem.Subtitle>\r\n-                                ))}\r\n-                               \r\n-                            </ListItem.Subtitle>\r\n-                        </ListItem.Content>\r\n-                        <ListItem.Chevron />\r\n-                    </ListItem>\r\n-                    {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n-                    <Card.Divider /> */}\r\n-                    {/* <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                       \r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n-                        ))}\r\n-                    </View> */}\r\n-                </>\r\n-\r\n-            )}\r\n+           \r\n         </View>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1705388028963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,14 @@\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n         <View style={styles.container}>\r\n-           \r\n+            {/* Show a loading text while the data is being fetched */}\r\n+            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n+            {/* Show an error text if there is an error */}\r\n+            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n+            {/* Show a card with the data if the data is available */}\r\n+            \r\n         </View>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1705388064009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,30 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n-            \r\n+            {data && (\r\n+                <>\r\n+                    <ListItem bottomDivider>\r\n+                        <ListItem.Content>\r\n+                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n+                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n+                            </ListItem.Title>\r\n+                            <ListItem.Subtitle  >\r\n+                                {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                                    </ListItem.Subtitle>\r\n+                                ))}\r\n+                               \r\n+                            </ListItem.Subtitle>\r\n+                        </ListItem.Content>\r\n+                        <ListItem.Chevron />\r\n+                    </ListItem>\r\n+                 \r\n+                </>\r\n+\r\n+            )}\r\n         </View>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1705388081712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,10 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n-                                {data.orderGroupedCategory_2.map((item, index) => (\r\n-                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                                    </ListItem.Subtitle>\r\n-                                ))}\r\n                                \r\n+                               \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1705388103373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,14 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n+                                {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                                        {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} /> */}\r\n+                                    </ListItem.Subtitle>\r\n+                                ))}\r\n                                \r\n-                               \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1705388114586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} /> */}\r\n+                                        {index}\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705388172337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} /> */}\r\n-                                        {index}\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705389218299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n+import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n@@ -33,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' item_category2='Electronics' categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705389439898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' item_category2='Electronics' categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705390783161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n-import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n+import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705390842101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n-import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n+import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705390861260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n-import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n+// import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705390987054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n+import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n // import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n@@ -34,9 +35,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705397659900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,14 @@\n import { CategorySearchParams } from './entity/SearchQueries';\r\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n // import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n interface OrdersProductsCategoriesProps {\r\n-    ordersProductsCategories: CategorySearchParams;\r\n+    categoriesValue: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n-    const OrdersProductsCategoriesInfo2: React.FC<OrdersProductsCategoriesProps> = ({ ordersProductsCategories }) => {\r\n+    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n"
                },
                {
                    "date": 1705397671065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+// Import the necessary modules\r\n+import React from 'react';\r\n+import { View, Text, StyleSheet } from 'react-native';\r\n+import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n+\r\n+import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n+import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n+import { CategorySearchParams } from './entity/SearchQueries';\r\n+import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n+// import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n+interface OrdersProductsCategoriesProps {\r\n+    categoriesValue: CategorySearchParams;\r\n+  }\r\n+// Define the component for rendering the UI of calling the custom hook\r\n+    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n+    const { theme } = useTheme();\r\n+    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n+    // Return a JSX element that renders the UI based on the query state and data\r\n+    return (\r\n+        <View style={styles.container}>\r\n+            {/* Show a loading text while the data is being fetched */}\r\n+            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n+            {/* Show an error text if there is an error */}\r\n+            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n+            {/* Show a card with the data if the data is available */}\r\n+            {data && (\r\n+                <>\r\n+                    <ListItem bottomDivider>\r\n+                        <ListItem.Content>\r\n+                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n+                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n+                            </ListItem.Title>\r\n+                            <ListItem.Subtitle  >\r\n+                                {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' categoryValues={{item_category2:item.title}}categoryGrouped={item} index={index} />\r\n+                                    </ListItem.Subtitle>\r\n+                                ))}\r\n+                               \r\n+                            </ListItem.Subtitle>\r\n+                        </ListItem.Content>\r\n+                        <ListItem.Chevron />\r\n+                    </ListItem>\r\n+                 \r\n+                </>\r\n+\r\n+            )}\r\n+        </View>\r\n+    );\r\n+};\r\n+\r\n+// Define the styles for the component using StyleSheet\r\n+const styles = StyleSheet.create({\r\n+    container: {\r\n+        flex: 1,\r\n+        alignItems: \"center\",\r\n+        justifyContent: \"center\",\r\n+    },\r\n+    loading: {\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n+    },\r\n+    error: {\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n+    },\r\n+    dataContainer: {\r\n+        margin: 10,\r\n+    },\r\n+    dataTitle: {\r\n+        fontSize: 18,\r\n+        fontWeight: \"bold\",\r\n+        marginVertical: 5,\r\n+    },\r\n+    dataDivider: {\r\n+        marginVertical: 5,\r\n+    },\r\n+});\r\n+\r\n+// Export the component\r\n+export default OrdersProductsCategoriesInfo2;\r\n"
                },
                {
                    "date": 1705397688756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n interface OrdersProductsCategoriesProps {\r\n     categoriesValue: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n-    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n+    const OrdersProductsCategoriesInfo2: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n@@ -82,89 +82,4 @@\n });\r\n \r\n // Export the component\r\n export default OrdersProductsCategoriesInfo2;\r\n-// Import the necessary modules\r\n-import React from 'react';\r\n-import { View, Text, StyleSheet } from 'react-native';\r\n-import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n-\r\n-import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n-import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-import { CategorySearchParams } from './entity/SearchQueries';\r\n-import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n-// import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n-interface OrdersProductsCategoriesProps {\r\n-    categoriesValue: CategorySearchParams;\r\n-  }\r\n-// Define the component for rendering the UI of calling the custom hook\r\n-    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    const { theme } = useTheme();\r\n-    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    // Return a JSX element that renders the UI based on the query state and data\r\n-    return (\r\n-        <View style={styles.container}>\r\n-            {/* Show a loading text while the data is being fetched */}\r\n-            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n-            {/* Show an error text if there is an error */}\r\n-            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n-            {/* Show a card with the data if the data is available */}\r\n-            {data && (\r\n-                <>\r\n-                    <ListItem bottomDivider>\r\n-                        <ListItem.Content>\r\n-                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n-                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n-                            </ListItem.Title>\r\n-                            <ListItem.Subtitle  >\r\n-                                {data.orderGroupedCategory_2.map((item, index) => (\r\n-                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' ordersProductsCategories={ordersProductsCategories} categoryGrouped={item} index={index} />\r\n-                                    </ListItem.Subtitle>\r\n-                                ))}\r\n-                               \r\n-                            </ListItem.Subtitle>\r\n-                        </ListItem.Content>\r\n-                        <ListItem.Chevron />\r\n-                    </ListItem>\r\n-                 \r\n-                </>\r\n-\r\n-            )}\r\n-        </View>\r\n-    );\r\n-};\r\n-\r\n-// Define the styles for the component using StyleSheet\r\n-const styles = StyleSheet.create({\r\n-    container: {\r\n-        flex: 1,\r\n-        alignItems: \"center\",\r\n-        justifyContent: \"center\",\r\n-    },\r\n-    loading: {\r\n-        fontSize: 20,\r\n-        fontWeight: \"bold\",\r\n-    },\r\n-    error: {\r\n-        fontSize: 20,\r\n-        fontWeight: \"bold\",\r\n-    },\r\n-    dataContainer: {\r\n-        margin: 10,\r\n-    },\r\n-    dataTitle: {\r\n-        fontSize: 18,\r\n-        fontWeight: \"bold\",\r\n-        marginVertical: 5,\r\n-    },\r\n-    dataDivider: {\r\n-        marginVertical: 5,\r\n-    },\r\n-});\r\n-\r\n-// Export the component\r\n-export default OrdersProductsCategoriesInfo2;\r\n"
                },
                {
                    "date": 1705397704360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705397765059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <>\r\n-                    <ListItem bottomDivider>\r\n+                    {/* <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n@@ -43,9 +43,9 @@\n                                \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n-                    </ListItem>\r\n+                    </ListItem> */}\r\n                  \r\n                 </>\r\n \r\n             )}\r\n"
                },
                {
                    "date": 1705397787632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,24 +28,24 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <>\r\n-                    {/* <ListItem bottomDivider>\r\n+                    <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle  >\r\n+                            {/* <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped2 key={index} categoryType='item_category2' categoryValues={{item_category2:item.title}}categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n-                            </ListItem.Subtitle>\r\n+                            </ListItem.Subtitle> */}\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n-                    </ListItem> */}\r\n+                    </ListItem>\r\n                  \r\n                 </>\r\n \r\n             )}\r\n"
                },
                {
                    "date": 1705397842008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,16 +33,16 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            {/* <ListItem.Subtitle  >\r\n+                            <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped2 key={index} categoryType='item_category2' categoryValues={{item_category2:item.title}}categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n-                            </ListItem.Subtitle> */}\r\n+                            </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n                  \r\n"
                },
                {
                    "date": 1705484190217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n-        <View style={styles.container}>\r\n+        <View style={styles.container}>salam\r\n             {/* Show a loading text while the data is being fetched */}\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n"
                }
            ],
            "date": 1705387940801,
            "name": "Commit-0",
            "content": "// Import the necessary modules\r\nimport React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n\r\nimport usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\nimport ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\nimport { CategorySearchParams } from './entity/SearchQueries';\r\ninterface OrdersProductsCategoriesProps2 {\r\n    ordersProductsCategories: CategorySearchParams;\r\n  }\r\n// Define the component for rendering the UI of calling the custom hook\r\n    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ ordersProductsCategories }) => {\r\n    // Use the useTheme hook to get the theme object from RNEUI\r\n    const { theme } = useTheme();\r\n    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n    // Use the useTheme hook to get the theme object from RNEUI\r\n    // Return a JSX element that renders the UI based on the query state and data\r\n    return (\r\n        <View style={styles.container}>\r\n            {/* Show a loading text while the data is being fetched */}\r\n            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n            {/* Show an error text if there is an error */}\r\n            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n            {/* Show a card with the data if the data is available */}\r\n            {data && (\r\n                <>\r\n                    <ListItem bottomDivider>\r\n                        <ListItem.Content>\r\n                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                            </ListItem.Title>\r\n                            <ListItem.Subtitle  >\r\n                                {data.orderGroupedCategory_2.map((item, index) => (\r\n                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                                    </ListItem.Subtitle>\r\n                                ))}\r\n                               \r\n                            </ListItem.Subtitle>\r\n                        </ListItem.Content>\r\n                        <ListItem.Chevron />\r\n                    </ListItem>\r\n                    {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                    <Card.Divider /> */}\r\n                    {/* <View style={styles.dataContainer}>\r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                       \r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                        {data.orderGroupedCategory_3.map((item, index) => (\r\n                            <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                        ))}\r\n                    </View> */}\r\n                </>\r\n\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\n// Define the styles for the component using StyleSheet\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    loading: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    dataContainer: {\r\n        margin: 10,\r\n    },\r\n    dataTitle: {\r\n        fontSize: 18,\r\n        fontWeight: \"bold\",\r\n        marginVertical: 5,\r\n    },\r\n    dataDivider: {\r\n        marginVertical: 5,\r\n    },\r\n});\r\n\r\n// Export the component\r\nexport default OrdersProductsCategoriesInfo2;\r\n"
        }
    ]
}