{
    "sourceFile": "components/OrdersProductsCategoriesInfo.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 231,
            "patches": [
                {
                    "date": 1704780167941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704780175040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // Import the necessary modules\r\n import React from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n-import { Card, ListItem, Divider } from '@rneui/themed';\r\n+import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n"
                },
                {
                    "date": 1704780500304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,52 +10,14 @@\n        // Use the useTheme hook to get the theme object from RNEUI\r\n        const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    // Return a JSX element that renders the UI based on the query state and data\r\n+\r\n     return (\r\n         <View style={styles.container}>\r\n             {/* Show a loading text while the data is being fetched */}\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n-            {/* Show an error text if there is an error */}\r\n-            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n-            {/* Show a card with the data if the data is available */}\r\n-            {data && (\r\n-                <Card>\r\n-                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n-                    <Card.Divider />\r\n-                    <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map(item => (\r\n-                            <ListItem key={item.itemCategory3} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))}\r\n-                    </View>\r\n-                </Card>\r\n-            )}\r\n-        </View>\r\n+                 </View>\r\n     );\r\n };\r\n \r\n // Define the styles for the component using StyleSheet\r\n"
                },
                {
                    "date": 1704782201556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,46 @@\n     return (\r\n         <View style={styles.container}>\r\n             {/* Show a loading text while the data is being fetched */}\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n-                 </View>\r\n+            {/* Show an error text if there is an error */}\r\n+            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n+            {/* Show a card with the data if the data is available */}\r\n+            {data && (\r\n+                <Card>\r\n+                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n+                    <Card.Divider />\r\n+                    <View style={styles.dataContainer}>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {data.orderItemGrouping.map(item => (\r\n+                            <ListItem key={item.itemCategory3} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n+                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n+                            <ListItem key={key} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                    </View>\r\n+                </Card>\r\n+            )}\r\n+        </View>\r\n     );\r\n };\r\n \r\n // Define the styles for the component using StyleSheet\r\n"
                },
                {
                    "date": 1704782250938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,13 @@\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n        // Use the useTheme hook to get the theme object from RNEUI\r\n-       const { theme } = useTheme();\r\n+    const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n-\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n+    // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n         <View style={styles.container}>\r\n             {/* Show a loading text while the data is being fetched */}\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n"
                },
                {
                    "date": 1704783171337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map(item => (\r\n+                        {?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -40,9 +40,9 @@\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n+                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783199054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {?.orderItemGrouping.map(item => (\r\n+                        {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783217867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,18 +40,18 @@\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704783233182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.orderItemGrouping.map(item => (\r\n+                        {data?.orderItemGrouping?.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783482866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.orderItemGrouping?.map(item => (\r\n+                        {data?.order_item_grouping?.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783959606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,15 +21,10 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <Card>\r\n-                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n-                    <Card.Divider />\r\n-                    <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.order_item_grouping?.map(item => (\r\n+                    \r\n+                        {data?.orderItemGrouping?.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -39,20 +34,9 @@\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n-                    </View>\r\n+\r\n                 </Card>\r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704783976444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,15 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <Card>\r\n-                    \r\n-                        {data?.orderItemGrouping?.map(item => (\r\n+                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n+                    <Card.Divider />\r\n+                    <View style={styles.dataContainer}>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -34,9 +39,20 @@\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-\r\n+                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n+                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                            <ListItem key={key} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                    </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704785881467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704786029365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data?.orderItemGrouping.map(item => (\r\n-                            <ListItem key={item.itemCategory3} bottomDivider>\r\n+                            <ListItem key={item.title} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n"
                },
                {
                    "date": 1704786049219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,27 +31,27 @@\n                         {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.title} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n+                                    </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704786113658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.orderItemGrouping.map(item => (\r\n+                        {data.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.title} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704786248310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n-       // Use the useTheme hook to get the theme object from RNEUI\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -27,10 +27,10 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map(item => (\r\n-                            <ListItem key={item.title} bottomDivider>\r\n+                        {data.orderItemGrouping.map((item, index) => (\r\n+                            <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n"
                },
                {
                    "date": 1704786268853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.index}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704786309167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.index}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704786334232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,12 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item}</ListItem.Title>\r\n-                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle> */}\r\n+                                    </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n"
                },
                {
                    "date": 1704788228725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,9 @@\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    const { theme } = useTheme();\r\n-    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n+\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n@@ -26,9 +24,9 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {/* Use the dot operator to access the orderItemGrouping property from the data object */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n@@ -37,21 +35,8 @@\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704788247096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n-\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n+    const { theme } = useTheme();\r\n+    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n"
                },
                {
                    "date": 1704788310788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,19 +26,32 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use the dot operator to access the orderItemGrouping property from the data object */}\r\n+                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                    </ListItem.Subtitle> */}\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n+                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                            <ListItem key={key} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704788500314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.item_category3.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704788521019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.item_category3.title}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704788541676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle> */}\r\n+                                    </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n"
                },
                {
                    "date": 1704788586437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,18 @@\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n+                        {data.ordersGrouping.map((item, index) => (\r\n+                            <ListItem key={index} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n                         {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789312818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map((item, index) => (\r\n+                        {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -48,9 +48,9 @@\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n                         {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789391396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,11 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {data.orderItemGrouping.map((item, index) => (\r\n+      <ttx key={index} item={item} index={index} theme={theme} />\r\n+    ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n"
                },
                {
                    "date": 1704789413560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n+import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -28,10 +29,10 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n-      <ttx key={index} item={item} index={index} theme={theme} />\r\n-    ))}\r\n+                            <ListCategoryGrouped key={index} item={item} index={index} theme={theme} />\r\n+                        ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n"
                },
                {
                    "date": 1704789430217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} item={item} index={index} theme={theme} />\r\n+                            <ListCategoryGrouped index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789489543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n-                            <ListCategoryGrouped index={index} item={item} />\r\n+                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789614062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,11 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n+                         {data.ordersGrouping.map((item, index) => (\r\n+                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n+                        ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n"
                },
                {
                    "date": 1704789623474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,12 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map((item, index) => (\r\n+                        {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n-                         {data.ordersGrouping.map((item, index) => (\r\n+                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n"
                },
                {
                    "date": 1704792087651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n-                        ))}\r\n+                        ))} */}\r\n                          {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n"
                },
                {
                    "date": 1704792146030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <Card>\r\n-                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n+                    <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n"
                },
                {
                    "date": 1704792232835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,15 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n-                        ))} */}\r\n+                        ))}\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n                          {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n"
                },
                {
                    "date": 1704792282020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,51 +25,18 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                         {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n-                        {/* {data.orderItemGrouping.map((item, index) => (\r\n-                            <ListItem key={index} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {data.ordersGrouping.map((item, index) => (\r\n-                            <ListItem key={index} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704875446216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,14 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n+                            <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n+                            <ListCategoryGrouped key={index}   categoryType='item_category2'  item={item} index={index}/>\r\n                         ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704879921788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}   categoryType='item_category2'  item={item} index={index}/>\r\n+                            <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n                         ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704880179915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704880452729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))} */}\r\n+                        ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704885529811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704892235760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,16 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n-                        ))}\r\n+                        ))} */}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))} */}\r\n+                        ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704892376166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n-                        ))} */}\r\n+                        ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n"
                },
                {
                    "date": 1704892400043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,14 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n                         ))}\r\n"
                },
                {
                    "date": 1704892701818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,14 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n+                            <ListCategoryGrouped key={index}  categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n+                            <ListCategoryGrouped key={index}   categoryType='item_category3'  categoryGrouped={item} index={index}/>\r\n                         ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704959343738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n+import { List } from '@mui/material';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -21,24 +22,32 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-                <Card>\r\n+                <List>\r\n+                    <ListItem key={index} bottomDivider>\r\n+                        <ListItem.Content>\r\n+                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n+                                {item.categoryType}\r\n+                            </ListItem.Title>\r\n+                        </ListItem.Content>\r\n+                        <ListItem.Chevron />\r\n+                    </ListItem>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n-                    <View style={styles.dataContainer}>\r\n+                    {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}  categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}   categoryType='item_category3'  categoryGrouped={item} index={index}/>\r\n+                            <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n-                    </View>\r\n-                </Card>\r\n+                    </View> */}\r\n+                </List>\r\n             )}\r\n         </View>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1704959422768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,21 +26,24 @@\n                 <List>\r\n                     <ListItem key={index} bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n-                                {item.categoryType}\r\n+                            Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n+                            <ListItem.Subtitle >\r\n+                                {data.orderGroupedCategory_2.map((item, index) => (\r\n+                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                        ))} \r\n+                            </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                        ))}\r\n+                       \r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n"
                },
                {
                    "date": 1704959450203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <List>\r\n-                    <ListItem key={index} bottomDivider>\r\n+                    <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n"
                },
                {
                    "date": 1704959485418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-import { List } from '@mui/material';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -22,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-                <List>\r\n+               \r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -48,9 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                </List>\r\n+                \r\n             )}\r\n         </View>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1704959494747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               \r\n+               <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -47,8 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n+                    </>\r\n                 \r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704959542869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               <>\r\n+               <Card>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -47,9 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                    </>\r\n+                    </Card>\r\n                 \r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704959560699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               <Card>\r\n+               <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -47,9 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                    </Card>\r\n+                    </>\r\n                 \r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704959677202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n-                    <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n-                    <Card.Divider />\r\n+                    {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n+                    <Card.Divider /> */}\r\n                     {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                        \r\n"
                },
                {
                    "date": 1704959791267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,18 +21,20 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               <>\r\n+                <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n-                            Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n+                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                        ))} \r\n+                                <Card>\r\n+                                    {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+\r\n+                                    ))}   </Card>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n@@ -47,10 +49,10 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                    </>\r\n-                \r\n+                </>\r\n+\r\n             )}\r\n         </View>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1704959853759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,13 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                <Card>\r\n+                                 <ListItem bottomDivider>>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n-                                    ))}   </Card>\r\n+                                    ))}   </ListItem>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704959879458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                 <ListItem bottomDivider>>\r\n+                                 <ListItem bottomDivider>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n                                     ))}   </ListItem>\r\n"
                },
                {
                    "date": 1704959918935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,15 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                 <ListItem bottomDivider>\r\n+                                 <ListItem bottomDivider> <ListItem.Content>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n-                                    ))}   </ListItem>\r\n+                                    ))}  \r\n+                                    </ListItem.Content>\r\n+                                     </ListItem>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704959960636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,14 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                 <ListItem bottomDivider> <ListItem.Content>\r\n+                                <>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n-                                    ))}  \r\n-                                    </ListItem.Content>\r\n-                                     </ListItem>\r\n+                                    ))}\r\n+                                </>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704960198656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,18 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                <>\r\n+                             \r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                        <>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                                        {index < data.orderGroupedCategory_2.length - 1 && <Divider />}\r\n+                                        </>\r\n \r\n                                     ))}\r\n-                                </>\r\n+                                     \r\n+                             \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704960246933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                                         {index < data.orderGroupedCategory_2.length - 1 && <Divider />}\r\n+                                        <Divider />\r\n                                         </>\r\n \r\n                                     ))}\r\n                                      \r\n"
                },
                {
                    "date": 1704960303031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle >\r\n+                            <ListItem.Subtitle style={{borderWidth: 1, borderColor: 'black'}}>\r\n+\r\n                              \r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n"
                },
                {
                    "date": 1704960370530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,21 +27,19 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle style={{borderWidth: 1, borderColor: 'black'}}>\r\n+                            <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n \r\n-                             \r\n-                                    {data.orderGroupedCategory_2.map((item, index) => (\r\n-                                        <>\r\n+\r\n+                                {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                                        {index < data.orderGroupedCategory_2.length - 1 && <Divider />}\r\n-                                        <Divider />\r\n-                                        </>\r\n \r\n-                                    ))}\r\n-                                     \r\n-                             \r\n+                                    </ListItem.Subtitle>\r\n+                                ))}\r\n+\r\n+\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704960411346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                            <ListItem.Subtitle >\r\n \r\n \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n"
                },
                {
                    "date": 1704960622399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // Import the necessary modules\r\n import React from 'react';\r\n-import { View, Text, StyleSheet } from 'react-native';\r\n+import { View,FlatList, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n@@ -27,9 +27,9 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle >\r\n+                            <FlatList>\r\n \r\n \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n@@ -38,9 +38,9 @@\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n \r\n \r\n-                            </ListItem.Subtitle>\r\n+                            </FlatList>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n                     {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n"
                },
                {
                    "date": 1704964319888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // Import the necessary modules\r\n import React from 'react';\r\n-import { View,FlatList, Text, StyleSheet } from 'react-native';\r\n+import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n@@ -27,20 +27,19 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <FlatList>\r\n+                            <ListItem.Subtitle  >\r\n \r\n \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n \r\n \r\n-                            </FlatList>\r\n+                            </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n                     {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n"
                },
                {
                    "date": 1705224601572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,17 +28,13 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n-\r\n-\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n-\r\n-\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1705224674047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,14 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                                        {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} /> */}\r\n+                                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n+                                        <Divider style={styles.dataDivider} />\r\n+                                        {data.orderGroupedCategory_3.map((item, index) => (\r\n+                                            <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n+                                        ))}\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n"
                },
                {
                    "date": 1705224864643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,16 +30,17 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        {/* <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} /> */}\r\n-                                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n-                                        <Divider style={styles.dataDivider} />\r\n-                                        {data.orderGroupedCategory_3.map((item, index) => (\r\n-                                            <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n-                                        ))}\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n+                                <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n+                                <Divider style={styles.dataDivider} />\r\n+                                {data.orderGroupedCategory_3.map((item, index) => (\r\n+                                    <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n+                                ))}\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1705224955262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,13 +34,9 @@\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n-                                <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n-                                <Divider style={styles.dataDivider} />\r\n-                                {data.orderGroupedCategory_3.map((item, index) => (\r\n-                                    <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n-                                ))}\r\n+                               \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1705228048760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705228427930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-\r\n+interface OrdersProductsCategoriesProps {\r\n+    orderItem: OrderItemDto;\r\n+  }\r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n"
                },
                {
                    "date": 1705228596700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,18 @@\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n+import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n-    orderItem: OrderItemDto;\r\n+    ordersProductsCategories: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n-const OrdersProductsCategoriesInfo = () => {\r\n+    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ ordersProductsCategories }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705234277351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <>\r\n-                    <ListItem bottomDivider>\r\n+                    {/* <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n@@ -40,9 +40,9 @@\n                                \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n-                    </ListItem>\r\n+                    </ListItem> */}\r\n                     {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider /> */}\r\n                     {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n"
                },
                {
                    "date": 1705234295669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <>\r\n-                    {/* <ListItem bottomDivider>\r\n+                    <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n@@ -40,9 +40,9 @@\n                                \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n-                    </ListItem> */}\r\n+                    </ListItem>\r\n                     {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider /> */}\r\n                     {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n"
                },
                {
                    "date": 1705234999884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-                <>\r\n+                <>salam\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n"
                },
                {
                    "date": 1705235010897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-                <>salam\r\n+                <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n"
                },
                {
                    "date": 1705389604839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} ordersProductsCategories={ordersProductsCategories} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705390544077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n-import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n+import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n"
                },
                {
                    "date": 1705390581932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} ordersProductsCategories={ordersProductsCategories} index={index} />\r\n+                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' categoryGrouped={item} ordersProductsCategories={ordersProductsCategories} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705390590400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped2 key={index} categoryType='item_category2' categoryGrouped={item} ordersProductsCategories={ordersProductsCategories} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} ordersProductsCategories={ordersProductsCategories} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705390660606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n-import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped';\r\n+import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n"
                },
                {
                    "date": 1705390727393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n+import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n"
                },
                {
                    "date": 1705390783184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n-import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped';\r\n+import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n"
                },
                {
                    "date": 1705390905089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} ordersProductsCategories={ordersProductsCategories} index={index} />\r\n+                                     \r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' ordersProductsCategories={{}} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705391744214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,9 @@\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n-                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                     \r\n+                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' ordersProductsCategories={{}} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n"
                },
                {
                    "date": 1705391922993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n interface OrdersProductsCategoriesProps {\r\n     ordersProductsCategories: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n-    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ ordersProductsCategories }) => {\r\n+    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' ordersProductsCategories={{}} categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' ca={{}} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705391929011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(ordersProductsCategories);\r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705391946095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n-    ordersProductsCategories: CategorySearchParams;\r\n+    categoriesValue: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n     const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n"
                },
                {
                    "date": 1705392089925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' ca={{}} categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' ={{}} categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705392175330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' ={{}} categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2'   categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705392319279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2'   categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryValues={categoriesValue}   categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705392915056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n-    categoriesValue: CategorySearchParams;\r\n+    categoriesValue?: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n     const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n"
                },
                {
                    "date": 1705393040128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n-    categoriesValue?: CategorySearchParams;\r\n+    categoriesValue: CategorySearchParams;\r\n   }\r\n // Define the component for rendering the UI of calling the custom hook\r\n     const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n"
                },
                {
                    "date": 1705393280111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryValues={categoriesValue}   categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryValues={{item_category2:item.title}}   categoryGrouped={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705471521522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,23 +9,19 @@\n import { CategorySearchParams } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n     categoriesValue: CategorySearchParams;\r\n   }\r\n-// Define the component for rendering the UI of calling the custom hook\r\n+\r\n     const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n-    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n+\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    // Return a JSX element that renders the UI based on the query state and data\r\n+\r\n     return (\r\n-        <View style={styles.container}>\r\n-            {/* Show a loading text while the data is being fetched */}\r\n-            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n-            {/* Show an error text if there is an error */}\r\n-            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n-            {/* Show a card with the data if the data is available */}\r\n+        <View style={styles.container}>     \r\n+            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}   \r\n+            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}  \r\n             {data && (\r\n                 <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n@@ -34,9 +30,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryValues={{item_category2:item.title}}   categoryGrouped={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryValues={{item_category2:item.title}}   categoryData={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705471765760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryValues={{item_category2:item.title}}   categoryData={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryTypes={{item_category2:item.title}}   categoryData={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705471909921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryTypes={{item_category2:item.title}}   categoryData={item} index={index} />\r\n+                                        <ListCategoryGrouped key={index} categoryTypes={{[item.name]:item.title}}   categoryData={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705472230774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped key={index} categoryTypes={{[item.name]:item.title}}   categoryData={item} index={index} />\r\n+                                        <ListCategoryGrouped  categoryData={item} index={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705495405288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle  >\r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped  categoryData={item} index={index} />\r\n+                                        <ListCategoryGrouped  categoryData={item} index={index} key={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n                             </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705499747524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,38 +22,17 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}   \r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}  \r\n             {data && (\r\n                 <>\r\n-                    <ListItem bottomDivider>\r\n-                        <ListItem.Content>\r\n-                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n-                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n-                            </ListItem.Title>\r\n-                            <ListItem.Subtitle  >\r\n+         \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n                                         <ListCategoryGrouped  categoryData={item} index={index} key={index} />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n-                            </ListItem.Subtitle>\r\n-                        </ListItem.Content>\r\n-                        <ListItem.Chevron />\r\n-                    </ListItem>\r\n-                    {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n-                    <Card.Divider /> */}\r\n-                    {/* <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                       \r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n-                        ))}\r\n-                    </View> */}\r\n-                </>\r\n \r\n+\r\n             )}\r\n         </View>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1705499757034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,44 @@\n interface OrdersProductsCategoriesProps {\r\n     categoriesValue: CategorySearchParams;\r\n   }\r\n \r\n+  // Move the navigation and UpdateParams declarations to the parent component\r\n+  const navigation = useNavigation();\r\n+  \r\n+  // Define a generic type that represents the property name and value\r\n+  type UpdateParams = {\r\n+    prop: keyof SearchParamsOrderItem;\r\n+    value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n+  };\r\n+\r\n+  // Move the searchParamsInstance state and the handleClick function to the parent component\r\n+  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    createSearchParamsOrderItem({\r\n+      categoryType: \"\",\r\n+      categorySearchParams: {} as CategorySearchParams,\r\n+    })\r\n+  );\r\n+\r\n+  // Define a function that handles the click event on both buttons\r\n+  const handleClick = (\r\n+    event: React.MouseEvent,\r\n+    updateParams: UpdateParams\r\n+  ) => {\r\n+    event.preventDefault();\r\n+\r\n+    setSearchParamsInstance((prevState) => ({\r\n+      ...prevState,\r\n+      [updateParams.prop]: updateParams.value,\r\n+    }));\r\n+  };\r\n+\r\n+  // Navigate to the orderitem screen when the searchParamsInstance changes\r\n+  useEffect(() => {\r\n+    console.log(searchParamsInstance);\r\n+    navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+\r\n     const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n"
                },
                {
                    "date": 1705499768642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n // Import the necessary modules\r\n-import React from 'react';\r\n+import React, { useState } from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-import { CategorySearchParams } from './entity/SearchQueries';\r\n+import { CategorySearchParams, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n interface OrdersProductsCategoriesProps {\r\n     categoriesValue: CategorySearchParams;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1705499774113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // Import the necessary modules\r\n-import React, { useState } from 'react';\r\n+import React, { useEffect, useState } from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n"
                },
                {
                    "date": 1705499924548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,43 +11,10 @@\n     categoriesValue: CategorySearchParams;\r\n   }\r\n \r\n   // Move the navigation and UpdateParams declarations to the parent component\r\n-  const navigation = useNavigation();\r\n-  \r\n-  // Define a generic type that represents the property name and value\r\n-  type UpdateParams = {\r\n-    prop: keyof SearchParamsOrderItem;\r\n-    value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n-  };\r\n \r\n-  // Move the searchParamsInstance state and the handleClick function to the parent component\r\n-  const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-    createSearchParamsOrderItem({\r\n-      categoryType: \"\",\r\n-      categorySearchParams: {} as CategorySearchParams,\r\n-    })\r\n-  );\r\n \r\n-  // Define a function that handles the click event on both buttons\r\n-  const handleClick = (\r\n-    event: React.MouseEvent,\r\n-    updateParams: UpdateParams\r\n-  ) => {\r\n-    event.preventDefault();\r\n-\r\n-    setSearchParamsInstance((prevState) => ({\r\n-      ...prevState,\r\n-      [updateParams.prop]: updateParams.value,\r\n-    }));\r\n-  };\r\n-\r\n-  // Navigate to the orderitem screen when the searchParamsInstance changes\r\n-  useEffect(() => {\r\n-    console.log(searchParamsInstance);\r\n-    navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-  }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n-\r\n     const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n"
                },
                {
                    "date": 1705499934429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n+import { useNavigation } from '@react-navigation/native';\r\n interface OrdersProductsCategoriesProps {\r\n     categoriesValue: CategorySearchParams;\r\n   }\r\n \r\n@@ -19,8 +20,43 @@\n     const { theme } = useTheme();\r\n \r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n+\r\n+    const navigation = useNavigation();\r\n+  \r\n+    // Define a generic type that represents the property name and value\r\n+    type UpdateParams = {\r\n+      prop: keyof SearchParamsOrderItem;\r\n+      value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n+    };\r\n+  \r\n+    // Move the searchParamsInstance state and the handleClick function to the parent component\r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+      createSearchParamsOrderItem({\r\n+        categoryType: \"\",\r\n+        categorySearchParams: {} as CategorySearchParams,\r\n+      })\r\n+    );\r\n+  \r\n+    // Define a function that handles the click event on both buttons\r\n+    const handleClick = (\r\n+      event: React.MouseEvent,\r\n+      updateParams: UpdateParams\r\n+    ) => {\r\n+      event.preventDefault();\r\n+  \r\n+      setSearchParamsInstance((prevState) => ({\r\n+        ...prevState,\r\n+        [updateParams.prop]: updateParams.value,\r\n+      }));\r\n+    };\r\n+  \r\n+    // Navigate to the orderitem screen when the searchParamsInstance changes\r\n+    useEffect(() => {\r\n+      console.log(searchParamsInstance);\r\n+      navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>     \r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}   \r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}  \r\n"
                },
                {
                    "date": 1705499982861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-import { CategorySearchParams, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n+import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n interface OrdersProductsCategoriesProps {\r\n     categoriesValue: CategorySearchParams;\r\n   }\r\n@@ -64,9 +64,16 @@\n                 <>\r\n          \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        <ListCategoryGrouped  categoryData={item} index={index} key={index} />\r\n+                                        {/* <ListCategoryGrouped  categoryData={item} index={index} key={index} /> */}\r\n+                                        <ListCategoryGrouped\r\n+                  categoryData={item}\r\n+                  index={index}\r\n+                  key={index}\r\n+                  searchParamsInstance={searchParamsInstance}\r\n+                  handleClick={handleClick}\r\n+                />\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n                                \r\n \r\n"
                },
                {
                    "date": 1705726823762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,107 +9,106 @@\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n interface OrdersProductsCategoriesProps {\r\n     categoriesValue: CategorySearchParams;\r\n-  }\r\n+}\r\n \r\n-  // Move the navigation and UpdateParams declarations to the parent component\r\n+// Move the navigation and UpdateParams declarations to the parent component\r\n \r\n \r\n-    const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n+const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n \r\n     const navigation = useNavigation();\r\n-  \r\n+\r\n     // Define a generic type that represents the property name and value\r\n     type UpdateParams = {\r\n-      prop: keyof SearchParamsOrderItem;\r\n-      value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n+        prop: keyof SearchParamsOrderItem;\r\n+        value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n-  \r\n+\r\n     // Move the searchParamsInstance state and the handleClick function to the parent component\r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-      createSearchParamsOrderItem({\r\n-        categoryType: \"\",\r\n-        categorySearchParams: {} as CategorySearchParams,\r\n-      })\r\n+        createSearchParamsOrderItem({\r\n+            categoryType: \"\",\r\n+            categorySearchParams: {} as CategorySearchParams,\r\n+        })\r\n     );\r\n-  \r\n+\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n-      event: React.MouseEvent,\r\n-      updateParams: UpdateParams\r\n+        event: React.MouseEvent,\r\n+        updateParams: UpdateParams\r\n     ) => {\r\n-      event.preventDefault();\r\n-  \r\n-      setSearchParamsInstance((prevState) => ({\r\n-        ...prevState,\r\n-        [updateParams.prop]: updateParams.value,\r\n-      }));\r\n+        event.preventDefault();\r\n+\r\n+        setSearchParamsInstance((prevState) => ({\r\n+            ...prevState,\r\n+            [updateParams.prop]: updateParams.value,\r\n+        }));\r\n     };\r\n-  \r\n+\r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n-      console.log(searchParamsInstance);\r\n-      navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+        console.log(searchParamsInstance);\r\n+        navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n-        <View style={styles.container}>     \r\n-            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}   \r\n-            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}  \r\n+        <View style={styles.container}>\r\n+            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n+            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {data && (\r\n-                <>\r\n-         \r\n-                                {data.orderGroupedCategory_2.map((item, index) => (\r\n-                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>                                   \r\n-                                        {/* <ListCategoryGrouped  categoryData={item} index={index} key={index} /> */}\r\n-                                        <ListCategoryGrouped\r\n-                  categoryData={item}\r\n-                  index={index}\r\n-                  key={index}\r\n-                  searchParamsInstance={searchParamsInstance}\r\n-                  handleClick={handleClick}\r\n-                />\r\n-                                    </ListItem.Subtitle>\r\n-                                ))}\r\n+              \r\n+                    {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                            {/* <ListCategoryGrouped  categoryData={item} index={index} key={index} /> */}\r\n+                            <ListCategoryGrouped\r\n+                                categoryData={item}\r\n+                                index={index}\r\n+                                key={index}\r\n+                                searchParamsInstance={searchParamsInstance}\r\n+                                handleClick={handleClick}\r\n+                            />\r\n+                        </ListItem.Subtitle>\r\n+                    ))}\r\n                                \r\n \r\n \r\n             )}\r\n-        </View>\r\n-    );\r\n+                </View>\r\n+            );\r\n };\r\n \r\n-// Define the styles for the component using StyleSheet\r\n-const styles = StyleSheet.create({\r\n-    container: {\r\n-        flex: 1,\r\n-        alignItems: \"center\",\r\n-        justifyContent: \"center\",\r\n+            // Define the styles for the component using StyleSheet\r\n+            const styles = StyleSheet.create({\r\n+                container: {\r\n+                flex: 1,\r\n+            alignItems: \"center\",\r\n+            justifyContent: \"center\",\r\n     },\r\n-    loading: {\r\n-        fontSize: 20,\r\n-        fontWeight: \"bold\",\r\n+            loading: {\r\n+                fontSize: 20,\r\n+            fontWeight: \"bold\",\r\n     },\r\n-    error: {\r\n-        fontSize: 20,\r\n-        fontWeight: \"bold\",\r\n+            error: {\r\n+                fontSize: 20,\r\n+            fontWeight: \"bold\",\r\n     },\r\n-    dataContainer: {\r\n-        margin: 10,\r\n+            dataContainer: {\r\n+                margin: 10,\r\n     },\r\n-    dataTitle: {\r\n-        fontSize: 18,\r\n-        fontWeight: \"bold\",\r\n-        marginVertical: 5,\r\n+            dataTitle: {\r\n+                fontSize: 18,\r\n+            fontWeight: \"bold\",\r\n+            marginVertical: 5,\r\n     },\r\n-    dataDivider: {\r\n-        marginVertical: 5,\r\n+            dataDivider: {\r\n+                marginVertical: 5,\r\n     },\r\n });\r\n \r\n-// Export the component\r\n-export default OrdersProductsCategoriesInfo;\r\n+            // Export the component\r\n+            export default OrdersProductsCategoriesInfo;\r\n"
                },
                {
                    "date": 1705727163942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {data && (\r\n               \r\n-                    {data.orderGroupedCategory_2.map((item, index) => (\r\n+                    data.orderGroupedCategory_2.map((item, index) => (\r\n                         <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             {/* <ListCategoryGrouped  categoryData={item} index={index} key={index} /> */}\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n"
                },
                {
                    "date": 1705727266853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,55 +60,52 @@\n         <View style={styles.container}>\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {data && (\r\n-              \r\n-                    data.orderGroupedCategory_2.map((item, index) => (\r\n-                        <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                            {/* <ListCategoryGrouped  categoryData={item} index={index} key={index} /> */}\r\n+                <>\r\n+                    {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n                                 index={index}\r\n-                                key={index}\r\n                                 searchParamsInstance={searchParamsInstance}\r\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                               \r\n+                </>\r\n+            )}\r\n \r\n-\r\n-            )}\r\n-                </View>\r\n-            );\r\n+        </View>\r\n+    );\r\n };\r\n \r\n-            // Define the styles for the component using StyleSheet\r\n-            const styles = StyleSheet.create({\r\n-                container: {\r\n-                flex: 1,\r\n-            alignItems: \"center\",\r\n-            justifyContent: \"center\",\r\n+// Define the styles for the component using StyleSheet\r\n+const styles = StyleSheet.create({\r\n+    container: {\r\n+        flex: 1,\r\n+        alignItems: \"center\",\r\n+        justifyContent: \"center\",\r\n     },\r\n-            loading: {\r\n-                fontSize: 20,\r\n-            fontWeight: \"bold\",\r\n+    loading: {\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n     },\r\n-            error: {\r\n-                fontSize: 20,\r\n-            fontWeight: \"bold\",\r\n+    error: {\r\n+        fontSize: 20,\r\n+        fontWeight: \"bold\",\r\n     },\r\n-            dataContainer: {\r\n-                margin: 10,\r\n+    dataContainer: {\r\n+        margin: 10,\r\n     },\r\n-            dataTitle: {\r\n-                fontSize: 18,\r\n-            fontWeight: \"bold\",\r\n-            marginVertical: 5,\r\n+    dataTitle: {\r\n+        fontSize: 18,\r\n+        fontWeight: \"bold\",\r\n+        marginVertical: 5,\r\n     },\r\n-            dataDivider: {\r\n-                marginVertical: 5,\r\n+    dataDivider: {\r\n+        marginVertical: 5,\r\n     },\r\n });\r\n \r\n-            // Export the component\r\n-            export default OrdersProductsCategoriesInfo;\r\n+// Export the component\r\n+export default OrdersProductsCategoriesInfo;\r\n"
                },
                {
                    "date": 1705727640581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n-        console.log(searchParamsInstance);\r\n+       // console.log(searchParamsInstance);\r\n         navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705727693187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n-       // console.log(searchParamsInstance);\r\n+        console.log(searchParamsInstance);\r\n         navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705728487181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,16 +40,17 @@\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         event: React.MouseEvent,\r\n-        updateParams: UpdateParams\r\n+        // updateParams: UpdateParams\r\n+        categoryData: any\r\n     ) => {\r\n         event.preventDefault();\r\n-\r\n-        setSearchParamsInstance((prevState) => ({\r\n-            ...prevState,\r\n-            [updateParams.prop]: updateParams.value,\r\n-        }));\r\n+        console.log(categoryData)\r\n+        // setSearchParamsInstance((prevState) => ({\r\n+        //     ...prevState,\r\n+        //     [updateParams.prop]: updateParams.value,\r\n+        // }));\r\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1705728642431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,13 +39,13 @@\n     );\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n-        event: React.MouseEvent,\r\n+     //   event: React.MouseEvent,\r\n         // updateParams: UpdateParams\r\n         categoryData: any\r\n     ) => {\r\n-        event.preventDefault();\r\n+      //  event.preventDefault();\r\n         console.log(categoryData)\r\n         // setSearchParamsInstance((prevState) => ({\r\n         //     ...prevState,\r\n         //     [updateParams.prop]: updateParams.value,\r\n"
                },
                {
                    "date": 1705728722894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,12 +45,12 @@\n         categoryData: any\r\n     ) => {\r\n       //  event.preventDefault();\r\n         console.log(categoryData)\r\n-        // setSearchParamsInstance((prevState) => ({\r\n-        //     ...prevState,\r\n-        //     [updateParams.prop]: updateParams.value,\r\n-        // }));\r\n+        setSearchParamsInstance((prevState) => ({\r\n+            ...prevState,\r\n+            [categoryData.name]: categoryData.title,\r\n+        }));\r\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1705728786397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,11 @@\n       //  event.preventDefault();\r\n         console.log(categoryData)\r\n         setSearchParamsInstance((prevState) => ({\r\n             ...prevState,\r\n+            categoryType:categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n+\r\n         }));\r\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n"
                },
                {
                    "date": 1705730481867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n-        console.log(searchParamsInstance);\r\n+        console.log(searchParamsInstance+'ÿ≥ÿ¥ŸÖÿ¥ÿ¶');\r\n         navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705730675714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n-        console.log(searchParamsInstance+'ÿ≥ÿ¥ŸÖÿ¥ÿ¶');\r\n+        console.log(searchParamsInstance+'hi');\r\n         navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705730764215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         // updateParams: UpdateParams\r\n         categoryData: any\r\n     ) => {\r\n       //  event.preventDefault();\r\n-        console.log(categoryData)\r\n+        console.log(categoryData+'why')\r\n         setSearchParamsInstance((prevState) => ({\r\n             ...prevState,\r\n             categoryType:categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n"
                },
                {
                    "date": 1705730818465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         // updateParams: UpdateParams\r\n         categoryData: any\r\n     ) => {\r\n       //  event.preventDefault();\r\n-        console.log(categoryData+'why')\r\n+        console.log(categoryData)\r\n         setSearchParamsInstance((prevState) => ({\r\n             ...prevState,\r\n             categoryType:categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n@@ -55,9 +55,9 @@\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n-        console.log(searchParamsInstance+'hi');\r\n+        console.log(searchParamsInstance);\r\n         navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705731368600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,14 +30,39 @@\n         value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n     };\r\n \r\n     // Move the searchParamsInstance state and the handleClick function to the parent component\r\n-    const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-        createSearchParamsOrderItem({\r\n-            categoryType: \"\",\r\n-            categorySearchParams: {} as CategorySearchParams,\r\n-        })\r\n-    );\r\n+    // const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n+    //     createSearchParamsOrderItem({\r\n+    //         categoryType: \"\",\r\n+    //         categorySearchParams: {} as CategorySearchParams,\r\n+    //     })\r\n+    // );\r\n+ \r\n+        const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+          if (categoriesValue && categoriesValue.item_category2) {\r\n+            return createSearchParamsOrderItem({\r\n+              categoryType: \"item_category2\",\r\n+              categorySearchParams: {\r\n+                item_category2: categoriesValue.item_category2\r\n+              }\r\n+            });\r\n+          } else {\r\n+            return createSearchParamsOrderItem({\r\n+              categoryType: \"\",\r\n+              categorySearchParams: {} as CategorySearchParams\r\n+            });\r\n+          }\r\n+        });\r\n+      \r\n+        useEffect(() => {\r\n+          console.log(searchParamsInstance);\r\n+          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+        }, [searchParamsInstance]);\r\n+      \r\n+        // ... rest of the component code\r\n+      };\r\n+      \r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n      //   event: React.MouseEvent,\r\n"
                },
                {
                    "date": 1705731499886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,31 +37,40 @@\n     //         categorySearchParams: {} as CategorySearchParams,\r\n     //     })\r\n     // );\r\n  \r\n-        const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-          if (categoriesValue && categoriesValue.item_category2) {\r\n-            return createSearchParamsOrderItem({\r\n-              categoryType: \"item_category2\",\r\n-              categorySearchParams: {\r\n-                item_category2: categoriesValue.item_category2\r\n-              }\r\n-            });\r\n-          } else {\r\n-            return createSearchParamsOrderItem({\r\n-              categoryType: \"\",\r\n-              categorySearchParams: {} as CategorySearchParams\r\n-            });\r\n-          }\r\n-        });\r\n+    // Use a lazy initialization for your useState hook\r\n+const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+    // This function will only run once\r\n+    return createSearchParamsOrderItem({\r\n+      categoryType: \"\",\r\n+      categorySearchParams: {} as CategorySearchParams,\r\n+    });\r\n+  });\r\n+  \r\n+    //     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+    //       if (categoriesValue && categoriesValue.item_category2) {\r\n+    //         return createSearchParamsOrderItem({\r\n+    //           categoryType: \"item_category2\",\r\n+    //           categorySearchParams: {\r\n+    //             item_category2: categoriesValue.item_category2\r\n+    //           }\r\n+    //         });\r\n+    //       } else {\r\n+    //         return createSearchParamsOrderItem({\r\n+    //           categoryType: \"\",\r\n+    //           categorySearchParams: {} as CategorySearchParams\r\n+    //         });\r\n+    //       }\r\n+    //     });\r\n       \r\n-        useEffect(() => {\r\n-          console.log(searchParamsInstance);\r\n-          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-        }, [searchParamsInstance]);\r\n+    //     useEffect(() => {\r\n+    //       console.log(searchParamsInstance);\r\n+    //       navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+    //     }, [searchParamsInstance]);\r\n       \r\n-        // ... rest of the component code\r\n-      };\r\n+    //     // ... rest of the component code\r\n+    //   };\r\n       \r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n"
                },
                {
                    "date": 1705731534809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,41 +36,33 @@\n     //         categoryType: \"\",\r\n     //         categorySearchParams: {} as CategorySearchParams,\r\n     //     })\r\n     // );\r\n- \r\n-    // Use a lazy initialization for your useState hook\r\n-const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-    // This function will only run once\r\n-    return createSearchParamsOrderItem({\r\n-      categoryType: \"\",\r\n-      categorySearchParams: {} as CategorySearchParams,\r\n-    });\r\n-  });\r\n+\r\n   \r\n-    //     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-    //       if (categoriesValue && categoriesValue.item_category2) {\r\n-    //         return createSearchParamsOrderItem({\r\n-    //           categoryType: \"item_category2\",\r\n-    //           categorySearchParams: {\r\n-    //             item_category2: categoriesValue.item_category2\r\n-    //           }\r\n-    //         });\r\n-    //       } else {\r\n-    //         return createSearchParamsOrderItem({\r\n-    //           categoryType: \"\",\r\n-    //           categorySearchParams: {} as CategorySearchParams\r\n-    //         });\r\n-    //       }\r\n-    //     });\r\n+        const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+          if (categoriesValue && categoriesValue.item_category2) {\r\n+            return createSearchParamsOrderItem({\r\n+              categoryType: \"item_category2\",\r\n+              categorySearchParams: {\r\n+                item_category2: categoriesValue.item_category2\r\n+              }\r\n+            });\r\n+          } else {\r\n+            return createSearchParamsOrderItem({\r\n+              categoryType: \"\",\r\n+              categorySearchParams: {} as CategorySearchParams\r\n+            });\r\n+          }\r\n+        });\r\n       \r\n-    //     useEffect(() => {\r\n-    //       console.log(searchParamsInstance);\r\n-    //       navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-    //     }, [searchParamsInstance]);\r\n+        useEffect(() => {\r\n+          console.log(searchParamsInstance);\r\n+          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+        }, [searchParamsInstance]);\r\n       \r\n-    //     // ... rest of the component code\r\n-    //   };\r\n+        // ... rest of the component code\r\n+      };\r\n       \r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n"
                },
                {
                    "date": 1705731599880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,14 +40,9 @@\n \r\n   \r\n         const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n           if (categoriesValue && categoriesValue.item_category2) {\r\n-            return createSearchParamsOrderItem({\r\n-              categoryType: \"item_category2\",\r\n-              categorySearchParams: {\r\n-                item_category2: categoriesValue.item_category2\r\n-              }\r\n-            });\r\n+            \r\n           } else {\r\n             return createSearchParamsOrderItem({\r\n               categoryType: \"\",\r\n               categorySearchParams: {} as CategorySearchParams\r\n"
                },
                {
                    "date": 1705731709383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,15 @@\n \r\n   \r\n         const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n           if (categoriesValue && categoriesValue.item_category2) {\r\n-            \r\n+        //     setSearchParamsInstance(\r\n+        //         categoryType:categoryData.name,\r\n+        //         [categoryData.name]: categoryData.title,\r\n+    \r\n+        //    )\r\n+        \r\n+            return null\r\n           } else {\r\n             return createSearchParamsOrderItem({\r\n               categoryType: \"\",\r\n               categorySearchParams: {} as CategorySearchParams\r\n"
                },
                {
                    "date": 1705731740255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,16 +55,10 @@\n             });\r\n           }\r\n         });\r\n       \r\n-        useEffect(() => {\r\n-          console.log(searchParamsInstance);\r\n-          navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-        }, [searchParamsInstance]);\r\n       \r\n-        // ... rest of the component code\r\n-      };\r\n-      \r\n+ \r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n      //   event: React.MouseEvent,\r\n"
                },
                {
                    "date": 1705731794642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,17 +39,13 @@\n     // );\r\n \r\n   \r\n         const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-          if (categoriesValue && categoriesValue.item_category2) {\r\n+          if (!categoriesValue && !categoriesValue.item_category2) \r\n         //     setSearchParamsInstance(\r\n         //         categoryType:categoryData.name,\r\n         //         [categoryData.name]: categoryData.title,\r\n     \r\n-        //    )\r\n-        \r\n-            return null\r\n-          } else {\r\n             return createSearchParamsOrderItem({\r\n               categoryType: \"\",\r\n               categorySearchParams: {} as CategorySearchParams\r\n             });\r\n"
                },
                {
                    "date": 1705731812186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n               categoryType: \"\",\r\n               categorySearchParams: {} as CategorySearchParams\r\n             });\r\n           }\r\n-        });\r\n+}\r\n       \r\n       \r\n  \r\n \r\n"
                },
                {
                    "date": 1705731838331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,36 +37,37 @@\n     //         categorySearchParams: {} as CategorySearchParams,\r\n     //     })\r\n     // );\r\n \r\n-  \r\n-        const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-          if (!categoriesValue && !categoriesValue.item_category2) \r\n-        //     setSearchParamsInstance(\r\n-        //         categoryType:categoryData.name,\r\n-        //         [categoryData.name]: categoryData.title,\r\n-    \r\n+\r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+        if (!categoriesValue && !categoriesValue.item_category2) {\r\n+            //     setSearchParamsInstance(\r\n+            //         categoryType:categoryData.name,\r\n+            //         [categoryData.name]: categoryData.title,\r\n+\r\n             return createSearchParamsOrderItem({\r\n-              categoryType: \"\",\r\n-              categorySearchParams: {} as CategorySearchParams\r\n+                categoryType: \"\",\r\n+                categorySearchParams: {} as CategorySearchParams\r\n             });\r\n-          }\r\n-}\r\n-      \r\n-      \r\n- \r\n+        }\r\n+    }\r\n \r\n+\r\n+\r\n+\r\n+\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n-     //   event: React.MouseEvent,\r\n+        //   event: React.MouseEvent,\r\n         // updateParams: UpdateParams\r\n         categoryData: any\r\n     ) => {\r\n-      //  event.preventDefault();\r\n+        //  event.preventDefault();\r\n         console.log(categoryData)\r\n         setSearchParamsInstance((prevState) => ({\r\n             ...prevState,\r\n-            categoryType:categoryData.name,\r\n+            categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n \r\n         }));\r\n     };\r\n"
                },
                {
                    "date": 1705731884752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,19 +39,19 @@\n     // );\r\n \r\n \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (!categoriesValue && !categoriesValue.item_category2) {\r\n+        if (!categoriesValue && !categoriesValue.item_category2) \r\n             //     setSearchParamsInstance(\r\n             //         categoryType:categoryData.name,\r\n             //         [categoryData.name]: categoryData.title,\r\n \r\n             return createSearchParamsOrderItem({\r\n                 categoryType: \"\",\r\n                 categorySearchParams: {} as CategorySearchParams\r\n             });\r\n-        }\r\n-    }\r\n+        })\r\n+    \r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1705732266673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     // );\r\n \r\n \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (!categoriesValue && !categoriesValue.item_category2) \r\n+        if (!categoriesValue && !categoriesValue?.item_category2) \r\n             //     setSearchParamsInstance(\r\n             //         categoryType:categoryData.name,\r\n             //         [categoryData.name]: categoryData.title,\r\n \r\n"
                },
                {
                    "date": 1705732353276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     // );\r\n \r\n \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (!categoriesValue && !categoriesValue?.item_category2) \r\n+        if (!categoriesValue ) \r\n             //     setSearchParamsInstance(\r\n             //         categoryType:categoryData.name,\r\n             //         [categoryData.name]: categoryData.title,\r\n \r\n"
                },
                {
                    "date": 1705732387401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     // );\r\n \r\n \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (!categoriesValue ) \r\n+        if (categoriesValue ) \r\n             //     setSearchParamsInstance(\r\n             //         categoryType:categoryData.name,\r\n             //         [categoryData.name]: categoryData.title,\r\n \r\n"
                },
                {
                    "date": 1705732940076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,23 @@\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n+    \r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+        useState<CategorySearchParams>({\r\n+            item_category2: 'value1',\r\n+            item_category3: 'value2',\r\n+          });\r\n+           \r\n+        })\r\n+    \r\n \r\n+\r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(searchParamsInstance);\r\n+\r\n+\r\n     const navigation = useNavigation();\r\n \r\n     // Define a generic type that represents the property name and value\r\n     type UpdateParams = {\r\n@@ -38,25 +50,12 @@\n     //     })\r\n     // );\r\n \r\n \r\n-    const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (categoriesValue ) \r\n-            //     setSearchParamsInstance(\r\n-            //         categoryType:categoryData.name,\r\n-            //         [categoryData.name]: categoryData.title,\r\n \r\n-            return createSearchParamsOrderItem({\r\n-                categoryType: \"\",\r\n-                categorySearchParams: {} as CategorySearchParams\r\n-            });\r\n-        })\r\n-    \r\n \r\n \r\n \r\n-\r\n-\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         //   event: React.MouseEvent,\r\n         // updateParams: UpdateParams\r\n"
                },
                {
                    "date": 1705732973237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n \r\n     \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n         useState<CategorySearchParams>({\r\n-            item_category2: 'value1',\r\n-            item_category3: 'value2',\r\n+            // item_category2: 'value1',\r\n+            // item_category3: 'value2',\r\n           });\r\n            \r\n         })\r\n     \r\n"
                },
                {
                    "date": 1705733019472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,9 @@\n \r\n \r\n     \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        useState<CategorySearchParams>({\r\n-            // item_category2: 'value1',\r\n-            // item_category3: 'value2',\r\n-          });\r\n+       return categoriesValue\r\n            \r\n         })\r\n     \r\n \r\n"
                },
                {
                    "date": 1705733324806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,20 +18,22 @@\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n-\r\n+    // const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+    //    return categoriesValue      \r\n+    //     })\r\n+          \r\n+    // const [categoriesValue, setCategoriesValue] = useState(() => {\r\n+    //    return categoriesValue      \r\n+    //     }) \r\n+    //      const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+    //    return categoriesValue      \r\n+    //     })\r\n     \r\n-    const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-       return categoriesValue\r\n-           \r\n-        })\r\n-    \r\n \r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(searchParamsInstance);\r\n-\r\n-\r\n     const navigation = useNavigation();\r\n \r\n     // Define a generic type that represents the property name and value\r\n     type UpdateParams = {\r\n@@ -48,11 +50,8 @@\n     // );\r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         //   event: React.MouseEvent,\r\n         // updateParams: UpdateParams\r\n"
                },
                {
                    "date": 1705733364055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,22 +18,11 @@\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n-    // const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-    //    return categoriesValue      \r\n-    //     })\r\n-          \r\n-    // const [categoriesValue, setCategoriesValue] = useState(() => {\r\n-    //    return categoriesValue      \r\n-    //     }) \r\n-    //      const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-    //    return categoriesValue      \r\n-    //     })\r\n-    \r\n-\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n+\r\n     const navigation = useNavigation();\r\n \r\n     // Define a generic type that represents the property name and value\r\n     type UpdateParams = {\r\n@@ -49,9 +38,25 @@\n     //     })\r\n     // );\r\n \r\n \r\n+    const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n+        if (categoriesValue ) \r\n+            //     setSearchParamsInstance(\r\n+            //         categoryType:categoryData.name,\r\n+            //         [categoryData.name]: categoryData.title,\r\n \r\n+            return createSearchParamsOrderItem({\r\n+                categoryType: \"\",\r\n+                categorySearchParams: {} as CategorySearchParams\r\n+            });\r\n+        })\r\n+    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         //   event: React.MouseEvent,\r\n         // updateParams: UpdateParams\r\n"
                },
                {
                    "date": 1705733698002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     // );\r\n \r\n \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (categoriesValue ) \r\n+        if (!categoriesValue ) \r\n             //     setSearchParamsInstance(\r\n             //         categoryType:categoryData.name,\r\n             //         [categoryData.name]: categoryData.title,\r\n \r\n@@ -63,14 +63,19 @@\n         categoryData: any\r\n     ) => {\r\n         //  event.preventDefault();\r\n         console.log(categoryData)\r\n-        setSearchParamsInstance((prevState) => ({\r\n-            ...prevState,\r\n+        // setSearchParamsInstance((prevState) => ({\r\n+        //     ...prevState,\r\n+        //     categoryType: categoryData.name,\r\n+        //     [categoryData.name]: categoryData.title,\r\n+\r\n+        // }));\r\n+        setSearchParamsInstance(() => ({\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n-\r\n         }));\r\n+        \r\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1705733718448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     // );\r\n \r\n \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (!categoriesValue ) \r\n+        //if (!categoriesValue ) \r\n             //     setSearchParamsInstance(\r\n             //         categoryType:categoryData.name,\r\n             //         [categoryData.name]: categoryData.title,\r\n \r\n"
                },
                {
                    "date": 1705733891776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,13 @@\n \r\n // Move the navigation and UpdateParams declarations to the parent component\r\n \r\n \r\n-const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n+const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ _categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n+    const [categoriesValue, setCategoriesValue] = useState(_categoriesValue)\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n \r\n     const navigation = useNavigation();\r\n@@ -39,9 +40,9 @@\n     // );\r\n \r\n \r\n     const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        //if (!categoriesValue ) \r\n+        if (!categoriesValue ) \r\n             //     setSearchParamsInstance(\r\n             //         categoryType:categoryData.name,\r\n             //         [categoryData.name]: categoryData.title,\r\n \r\n@@ -63,19 +64,14 @@\n         categoryData: any\r\n     ) => {\r\n         //  event.preventDefault();\r\n         console.log(categoryData)\r\n-        // setSearchParamsInstance((prevState) => ({\r\n-        //     ...prevState,\r\n-        //     categoryType: categoryData.name,\r\n-        //     [categoryData.name]: categoryData.title,\r\n-\r\n-        // }));\r\n-        setSearchParamsInstance(() => ({\r\n+        setSearchParamsInstance((prevState) => ({\r\n+            ...prevState,\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n+\r\n         }));\r\n-        \r\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1705733950370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,9 @@\n         categoryData: any\r\n     ) => {\r\n         //  event.preventDefault();\r\n         console.log(categoryData)\r\n+      //  setCategoriesValue()\r\n         setSearchParamsInstance((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n@@ -74,9 +75,9 @@\n     };\r\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n-        console.log(searchParamsInstance);\r\n+       // console.log(searchParamsInstance);\r\n         navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705734066619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,13 @@\n         categoryData: any\r\n     ) => {\r\n         //  event.preventDefault();\r\n         console.log(categoryData)\r\n-      //  setCategoriesValue()\r\n+       setCategoriesValue((prevstate)=>({\r\n+        ...prevstate,\r\n+        [categoryData.name]: categoryData.title\r\n+\r\n+       }))\r\n         setSearchParamsInstance((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n"
                },
                {
                    "date": 1705734136111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n        // console.log(searchParamsInstance);\r\n-        navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+       // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n"
                },
                {
                    "date": 1705734164735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     ) => {\r\n         //  event.preventDefault();\r\n         console.log(categoryData)\r\n        setCategoriesValue((prevstate)=>({\r\n-        ...prevstate,\r\n+       // ...prevstate,\r\n         [categoryData.name]: categoryData.title\r\n \r\n        }))\r\n         setSearchParamsInstance((prevState) => ({\r\n"
                },
                {
                    "date": 1705734175638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \r\n     // Navigate to the orderitem screen when the searchParamsInstance changes\r\n     useEffect(() => {\r\n        // console.log(searchParamsInstance);\r\n-       // navigation.navigate(\"orderitem\", searchParamsInstance);\r\n+       navigation.navigate(\"orderitem\", searchParamsInstance);\r\n     }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n"
                },
                {
                    "date": 1705734422509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n interface OrdersProductsCategoriesProps {\r\n-    categoriesValue: CategorySearchParams;\r\n+    _categoriesValue: CategorySearchParams;\r\n }\r\n \r\n // Move the navigation and UpdateParams declarations to the parent component\r\n \r\n"
                },
                {
                    "date": 1705734498188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,68 +22,22 @@\n     const [categoriesValue, setCategoriesValue] = useState(_categoriesValue)\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n \r\n-    const navigation = useNavigation();\r\n \r\n-    // Define a generic type that represents the property name and value\r\n-    type UpdateParams = {\r\n-        prop: keyof SearchParamsOrderItem;\r\n-        value: SearchParamsOrderItem[keyof SearchParamsOrderItem];\r\n-    };\r\n \r\n-    // Move the searchParamsInstance state and the handleClick function to the parent component\r\n-    // const [searchParamsInstance, setSearchParamsInstance] = useState(\r\n-    //     createSearchParamsOrderItem({\r\n-    //         categoryType: \"\",\r\n-    //         categorySearchParams: {} as CategorySearchParams,\r\n-    //     })\r\n-    // );\r\n-\r\n-\r\n-    const [searchParamsInstance, setSearchParamsInstance] = useState(() => {\r\n-        if (!categoriesValue ) \r\n-            //     setSearchParamsInstance(\r\n-            //         categoryType:categoryData.name,\r\n-            //         [categoryData.name]: categoryData.title,\r\n-\r\n-            return createSearchParamsOrderItem({\r\n-                categoryType: \"\",\r\n-                categorySearchParams: {} as CategorySearchParams\r\n-            });\r\n-        })\r\n-    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         //   event: React.MouseEvent,\r\n         // updateParams: UpdateParams\r\n         categoryData: any\r\n     ) => {\r\n         //  event.preventDefault();\r\n         console.log(categoryData)\r\n-       setCategoriesValue((prevstate)=>({\r\n-       // ...prevstate,\r\n-        [categoryData.name]: categoryData.title\r\n \r\n-       }))\r\n-        setSearchParamsInstance((prevState) => ({\r\n-            ...prevState,\r\n-            categoryType: categoryData.name,\r\n-            [categoryData.name]: categoryData.title,\r\n-\r\n-        }));\r\n     };\r\n \r\n-    // Navigate to the orderitem screen when the searchParamsInstance changes\r\n-    useEffect(() => {\r\n-       // console.log(searchParamsInstance);\r\n-       navigation.navigate(\"orderitem\", searchParamsInstance);\r\n-    }, [searchParamsInstance]); // Pass the searchParamsInstance state as a dependency\r\n+\r\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n"
                },
                {
                    "date": 1705734510104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,8 @@\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n                                 index={index}\r\n-                                searchParamsInstance={searchParamsInstance}\r\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n"
                },
                {
                    "date": 1705734536504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n-                                index={index}\r\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n"
                },
                {
                    "date": 1705734675841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,23 +21,16 @@\n \r\n     const [categoriesValue, setCategoriesValue] = useState(_categoriesValue)\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n-\r\n-\r\n-\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n-        //   event: React.MouseEvent,\r\n-        // updateParams: UpdateParams\r\n         categoryData: any\r\n     ) => {\r\n-        //  event.preventDefault();\r\n+\r\n         console.log(categoryData)\r\n-\r\n     };\r\n \r\n-\r\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n"
                },
                {
                    "date": 1705734818974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n+import OrderItem from './Orderitem';\r\n interface OrdersProductsCategoriesProps {\r\n     _categoriesValue: CategorySearchParams;\r\n }\r\n \r\n@@ -44,8 +45,9 @@\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n                 </>\r\n+                <OrderItem />\r\n             )}\r\n \r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1705734828005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n                 </>\r\n-                <OrderItem />\r\n+                <OrderItem routeParams={{}} />\r\n             )}\r\n \r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1705735051739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,11 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n+                    <OrderItem routeParams={{}} />\r\n                 </>\r\n-                <OrderItem routeParams={{}} />\r\n+                \r\n             )}\r\n \r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1705735159311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,16 +20,19 @@\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n     const [categoriesValue, setCategoriesValue] = useState(_categoriesValue)\r\n+    const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n \r\n         console.log(categoryData)\r\n+        setCategoriesValue(categoryData)\r\n+        setCategoryClicked(true)\r\n     };\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705735198077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    <OrderItem routeParams={{}} />\r\n+                    categoryClicked && <OrderItem routeParams={{}} />\r\n                 </>\r\n                 \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705735222792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    categoryClicked && <OrderItem routeParams={{}} />\r\n+                    {/* categoryClicked && <OrderItem routeParams={{}} /> */}\r\n                 </>\r\n                 \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705735245868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    {/* categoryClicked && <OrderItem routeParams={{}} /> */}\r\n+                    categoryClicked && <OrderItem routeParams={{}} />\r\n                 </>\r\n                 \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705735251184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    categoryClicked && <OrderItem routeParams={{}} />\r\n+                    categoryClicked && <OrderItem  />\r\n                 </>\r\n                 \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705735394708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,10 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    categoryClicked && <OrderItem  />\r\n+                     {categoryClicked && ( <OrderItem  />\r\n+                     )}\r\n                 </>\r\n                 \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705737364471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                     {categoryClicked && ( <OrderItem  />\r\n+                     {categoryClicked && ( <OrderItem   />\r\n                      )}\r\n                 </>\r\n                 \r\n             )}\r\n"
                },
                {
                    "date": 1705737461244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                     {categoryClicked && ( <OrderItem   />\r\n+                     {categoryClicked && ( <OrderItem searchParamsOrderItem={}   />\r\n                      )}\r\n                 </>\r\n                 \r\n             )}\r\n"
                },
                {
                    "date": 1705737907363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n import OrderItem from './Orderitem';\r\n+import useSearchOrderItemParams from './hooks/useSearchOrderItemParams';\r\n interface OrdersProductsCategoriesProps {\r\n     _categoriesValue: CategorySearchParams;\r\n }\r\n \r\n@@ -21,8 +22,9 @@\n     const { theme } = useTheme();\r\n \r\n     const [categoriesValue, setCategoriesValue] = useState(_categoriesValue)\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n+    const {searchOrderItemParams,setSearchOrderItemParams}=useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n@@ -47,9 +49,9 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                     {categoryClicked && ( <OrderItem searchParamsOrderItem={}   />\r\n+                     {categoryClicked && ( <OrderItem searchParamsOrderItem={searchOrderItemParams}   />\r\n                      )}\r\n                 </>\r\n                 \r\n             )}\r\n"
                },
                {
                    "date": 1705737951260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,14 @@\n \r\n         console.log(categoryData)\r\n         setCategoriesValue(categoryData)\r\n         setCategoryClicked(true)\r\n+        setSearchOrderItemParams((prevState) => ({\r\n+            ...prevState,\r\n+            categoryType: categoryData.name,\r\n+            [categoryData.name]: categoryData.title,\r\n+\r\n+        }));\r\n     };\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705738318797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,13 @@\n         categoryData: any\r\n     ) => {\r\n \r\n         console.log(categoryData)\r\n-        setCategoriesValue(categoryData)\r\n+        const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n+            return item.category.name === \"item_category2\" && item.category.title === \"Electronics\";\r\n+          });\r\n+          \r\n+        setCategoriesValue(data)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n"
                },
                {
                    "date": 1705738355530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,13 @@\n     ) => {\r\n \r\n         console.log(categoryData)\r\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n+            debugger;\r\n             return item.category.name === \"item_category2\" && item.category.title === \"Electronics\";\r\n           });\r\n           \r\n-        setCategoriesValue(data)\r\n+        setCategoriesValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n"
                },
                {
                    "date": 1705738379043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n         console.log(categoryData)\r\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n             debugger;\r\n-            return item.category.name === \"item_category2\" && item.category.title === \"Electronics\";\r\n+            return item.name === \"item_category2\" && item.title === \"Electronics\";\r\n           });\r\n           \r\n         setCategoriesValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n"
                },
                {
                    "date": 1705738413512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,9 @@\n     ) => {\r\n \r\n         console.log(categoryData)\r\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n-            debugger;\r\n-            return item.name === \"item_category2\" && item.title === \"Electronics\";\r\n+            return item.name === categoryData.name && item.title === categoryData.tittle;\r\n           });\r\n           \r\n         setCategoriesValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n"
                },
                {
                    "date": 1705738441296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n     ) => {\r\n \r\n         console.log(categoryData)\r\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n-            return item.name === categoryData.name && item.title === categoryData.tittle;\r\n+            return item.name === categoryData.name && item.title === categoryData.title;\r\n           });\r\n           \r\n-        setCategoriesValue(filteredCategories)\r\n+       // setCategoriesValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n"
                },
                {
                    "date": 1705738476753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ _categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n-    const [categoriesValue, setCategoriesValue] = useState(_categoriesValue)\r\n+    const [categoriesValue, setCategoriesValue] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const {searchOrderItemParams,setSearchOrderItemParams}=useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n@@ -35,9 +35,9 @@\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n           });\r\n           \r\n-       // setCategoriesValue(filteredCategories)\r\n+        setCategoriesValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n"
                },
                {
                    "date": 1705738518141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,19 +10,19 @@\n import { useNavigation } from '@react-navigation/native';\r\n import OrderItem from './Orderitem';\r\n import useSearchOrderItemParams from './hooks/useSearchOrderItemParams';\r\n interface OrdersProductsCategoriesProps {\r\n-    _categoriesValue: CategorySearchParams;\r\n+    categoriesValue: CategorySearchParams;\r\n }\r\n \r\n // Move the navigation and UpdateParams declarations to the parent component\r\n \r\n \r\n-const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ _categoriesValue }) => {\r\n+const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n-    const [categoriesValue, setCategoriesValue] = useState([])\r\n+    const [categoryValue, setCategoryValue] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const {searchOrderItemParams,setSearchOrderItemParams}=useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n"
                },
                {
                    "date": 1705738544268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n           });\r\n           \r\n-        setCategoriesValue(filteredCategories)\r\n+        setCategoryValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n"
                },
                {
                    "date": 1705738655627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,21 +22,20 @@\n     const { theme } = useTheme();\r\n \r\n     const [categoryValue, setCategoryValue] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n-    const {searchOrderItemParams,setSearchOrderItemParams}=useSearchOrderItemParams();\r\n+    const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n-\r\n         console.log(categoryData)\r\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n-          });\r\n-          \r\n+        });\r\n+console.log(filteredCategories)\r\n         setCategoryValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n@@ -59,12 +58,12 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                     {categoryClicked && ( <OrderItem searchParamsOrderItem={searchOrderItemParams}   />\r\n-                     )}\r\n+                    {categoryClicked && (<OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n+                    )}\r\n                 </>\r\n-                \r\n+\r\n             )}\r\n \r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1705738775162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,22 +10,22 @@\n import { useNavigation } from '@react-navigation/native';\r\n import OrderItem from './Orderitem';\r\n import useSearchOrderItemParams from './hooks/useSearchOrderItemParams';\r\n interface OrdersProductsCategoriesProps {\r\n-    categoriesValue: CategorySearchParams;\r\n+    categoryParams: CategorySearchParams;\r\n }\r\n \r\n // Move the navigation and UpdateParams declarations to the parent component\r\n \r\n \r\n-const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoriesValue }) => {\r\n+const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoryParams }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n     const [categoryValue, setCategoryValue] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoriesValue);\r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n@@ -33,9 +33,8 @@\n         console.log(categoryData)\r\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n-console.log(filteredCategories)\r\n         setCategoryValue(filteredCategories)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n"
                },
                {
                    "date": 1705738853450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     const [categoryValue, setCategoryValue] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n-\r\n+    setCategoryClicked(data?.orderGroupedCategory_2)\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n@@ -49,9 +49,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {data && (\r\n                 <>\r\n-                    {data.orderGroupedCategory_2.map((item, index) => (\r\n+                    {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n                                 handleClick={handleClick}\r\n"
                },
                {
                    "date": 1705739242569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,13 @@\n     const [categoryValue, setCategoryValue] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n-    setCategoryClicked(data?.orderGroupedCategory_2)\r\n+\r\n+    useEffect(() => {\r\n+        setCategoryClicked(data?.orderGroupedCategory_2)\r\n+    }, [data]); \r\n+   \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n"
                },
                {
                    "date": 1705739268767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     useEffect(() => {\r\n+        console.log(data?.orderGroupedCategory_2)\r\n         setCategoryClicked(data?.orderGroupedCategory_2)\r\n     }, [data]); \r\n    \r\n     // Define a function that handles the click event on both buttons\r\n"
                },
                {
                    "date": 1705739297493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     useEffect(() => {\r\n         console.log(data?.orderGroupedCategory_2)\r\n-        setCategoryClicked(data?.orderGroupedCategory_2)\r\n+        setCategoryValue(data?.orderGroupedCategory_2)\r\n     }, [data]); \r\n    \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n"
                },
                {
                    "date": 1705739322587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n-            {data && (\r\n+            {categoryValue && (\r\n                 <>\r\n                     {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n"
                },
                {
                    "date": 1705739390124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {categoryValue && (\r\n                 <>\r\n+                     <Button >qqq</Button>\r\n                     {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n"
                },
                {
                    "date": 1705739417543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // Import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n-import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n+import { Card, ListItem, Divider, useTheme, Button } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped2 from './uicomponents/ListCategoryGrouped2';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n"
                },
                {
                    "date": 1705739505631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {categoryValue && (\r\n                 <>\r\n-                     <Button >qqq</Button>\r\n+                    <Button onClick={() => setCategoryValue(data?.orderGroupedCategory_2)}>qqq</Button>\r\n                     {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n"
                },
                {
                    "date": 1705739556101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {categoryValue && (\r\n                 <>\r\n-                    <Button onClick={() => setCategoryValue(data?.orderGroupedCategory_2)}>qqq</Button>\r\n+                    <Button      onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)}>qqq</Button>\r\n                     {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n"
                },
                {
                    "date": 1705739767413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {categoryValue && (\r\n                 <>\r\n-                    <Button      onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)}>qqq</Button>\r\n+                    <Button      onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)} title={'Return'}></Button>\r\n                     {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n"
                },
                {
                    "date": 1705739813768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {categoryValue && (\r\n                 <>\r\n-                    <Button      onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)} title={'Return'}></Button>\r\n+                    {categoryClicked &&<Button onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)} title={'Return'}></Button>}\r\n                     {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n"
                },
                {
                    "date": 1705740844036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,15 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    {categoryClicked && (<OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n+                    {categoryClicked && (\r\n+                    <>\r\n+                      {data.orderGroupedCategory_3.map((item, index) => (\r\n+                    {item.max_price}\r\n+                ))}\r\n+                    <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n+                    </>\r\n                     )}\r\n                 </>\r\n \r\n             )}\r\n"
                },
                {
                    "date": 1705740928800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n \r\n     useEffect(() => {\r\n         console.log(data?.orderGroupedCategory_2)\r\n         setCategoryValue(data?.orderGroupedCategory_2)\r\n-    }, [data]); \r\n-   \r\n+    }, [data]);\r\n+\r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n@@ -54,9 +54,9 @@\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {categoryValue && (\r\n                 <>\r\n-                    {categoryClicked &&<Button onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)} title={'Return'}></Button>}\r\n+                    {categoryClicked && <Button onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)} title={'Return'}></Button>}\r\n                     {categoryValue.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n@@ -64,15 +64,20 @@\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n                     {categoryClicked && (\r\n-                    <>\r\n-                      {data.orderGroupedCategory_3.map((item, index) => (\r\n-                    {item.max_price}\r\n-                ))}\r\n-                    <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n-                    </>\r\n+                        <>\r\n+                            {data.orderGroupedCategory_3.map((item, index) => (\r\n+                                <ListItem.Subtitle key={index}>\r\n+                                    {item.max_price}\r\n+                                \r\n+                                </ListItem.Subtitle>\r\n+                            )}\r\n+                            <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n+                        </>\r\n                     )}\r\n+\r\n+                    )}\r\n                 </>\r\n \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705740963162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n                     {categoryClicked && (\r\n                         <>\r\n                             {data.orderGroupedCategory_3.map((item, index) => (\r\n                                 <ListItem.Subtitle key={index}>\r\n-                                    {item.max_price}\r\n+                                    {item.maxPrice}\r\n                                 \r\n                                 </ListItem.Subtitle>\r\n                             )}\r\n                             <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n"
                },
                {
                    "date": 1705740983453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n                     {categoryClicked && (\r\n                         <>\r\n                             {data.orderGroupedCategory_3.map((item, index) => (\r\n                                 <ListItem.Subtitle key={index}>\r\n-                                    {item.maxPrice}\r\n+                                    {item.title}\r\n                                 \r\n                                 </ListItem.Subtitle>\r\n                             )}\r\n                             <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n"
                },
                {
                    "date": 1705741043740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,17 +67,17 @@\n                     {categoryClicked && (\r\n                         <>\r\n                             {data.orderGroupedCategory_3.map((item, index) => (\r\n                                 <ListItem.Subtitle key={index}>\r\n-                                    {item.title}\r\n+                                    ss:{item.title}\r\n                                 \r\n                                 </ListItem.Subtitle>\r\n-                            )}\r\n+                            ))}\r\n                             <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n                         </>\r\n-                    )}\r\n+                      )}\r\n \r\n-                    )}\r\n+            \r\n                 </>\r\n \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705741241793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,16 +20,17 @@\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoryParams }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n-    const [categoryValue, setCategoryValue] = useState([])\r\n+    const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState([])\r\n+    const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     useEffect(() => {\r\n         console.log(data?.orderGroupedCategory_2)\r\n-        setCategoryValue(data?.orderGroupedCategory_2)\r\n+        setOrderGroupedCategory_2(data?.orderGroupedCategory_2)\r\n     }, [data]);\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n@@ -38,9 +39,9 @@\n         console.log(categoryData)\r\n         const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n-        setCategoryValue(filteredCategories)\r\n+        setOrderGroupedCategory_2(filteredCategories)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n@@ -52,12 +53,12 @@\n     return (\r\n         <View style={styles.container}>\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n-            {categoryValue && (\r\n+            {orderGroupedCategory_2 && (\r\n                 <>\r\n-                    {categoryClicked && <Button onPress={(event) => setCategoryValue(data?.orderGroupedCategory_2)} title={'Return'}></Button>}\r\n-                    {categoryValue.map((item, index) => (\r\n+                    {categoryClicked && <Button onPress={(event) => setOrderGroupedCategory_2(data?.orderGroupedCategory_2)} title={'Return'}></Button>}\r\n+                    {orderGroupedCategory_2.map((item, index) => (\r\n                         <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                             <ListCategoryGrouped\r\n                                 categoryData={item}\r\n                                 handleClick={handleClick}\r\n"
                },
                {
                    "date": 1705741268762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n \r\n     useEffect(() => {\r\n         console.log(data?.orderGroupedCategory_2)\r\n         setOrderGroupedCategory_2(data?.orderGroupedCategory_2)\r\n+        setOrderGroupedCategory_3(data?.orderGroupedCategory_3)\r\n     }, [data]);\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n"
                },
                {
                    "date": 1705741501030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     useEffect(() => {\r\n-        console.log(data?.orderGroupedCategory_2)\r\n         setOrderGroupedCategory_2(data?.orderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(data?.orderGroupedCategory_3)\r\n     }, [data]);\r\n \r\n@@ -37,12 +36,15 @@\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n         console.log(categoryData)\r\n-        const filteredCategories = data?.orderGroupedCategory_2.filter(item => {\r\n+        const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n-        setOrderGroupedCategory_2(filteredCategories)\r\n+         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n+            return item.name === categoryData.name && item.title === categoryData.title && item.parent ===categoryData.title;\r\n+        });\r\n+        setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n"
                },
                {
                    "date": 1705741596249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n-        console.log(categoryData)\r\n+        console.log(categoryData +\"soltan\")\r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n          const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n"
                },
                {
                    "date": 1705741635294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,10 @@\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n-        console.log(categoryData +\"soltan\")\r\n+        console.log(\"soltan\")\r\n+        console.log(categoryData )\r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n          const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n"
                },
                {
                    "date": 1705741775957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n          const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title && item.parent ===categoryData.title;\r\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n+        setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n             categoryType: categoryData.name,\r\n@@ -70,9 +71,9 @@\n                         </ListItem.Subtitle>\r\n                     ))}\r\n                     {categoryClicked && (\r\n                         <>\r\n-                            {data.orderGroupedCategory_3.map((item, index) => (\r\n+                            {orderGroupedCategory_3.map((item, index) => (\r\n                                 <ListItem.Subtitle key={index}>\r\n                                     ss:{item.title}\r\n                                 \r\n                                 </ListItem.Subtitle>\r\n"
                },
                {
                    "date": 1705741812581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n          const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n-            return item.name === categoryData.name && item.title === categoryData.title && item.parent ===categoryData.title;\r\n+            return item.parent ===categoryData.title;\r\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n"
                },
                {
                    "date": 1705741894339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,12 +72,14 @@\n                     ))}\r\n                     {categoryClicked && (\r\n                         <>\r\n                             {orderGroupedCategory_3.map((item, index) => (\r\n-                                <ListItem.Subtitle key={index}>\r\n-                                    ss:{item.title}\r\n-                                \r\n-                                </ListItem.Subtitle>\r\n+                                 <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                                 <ListCategoryGrouped\r\n+                                     categoryData={item}\r\n+                                     handleClick={handleClick}\r\n+                                 />\r\n+                             </ListItem.Subtitle>\r\n                             ))}\r\n                             <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n                         </>\r\n                       )}\r\n"
                },
                {
                    "date": 1705742110886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,15 +35,14 @@\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n-        console.log(\"soltan\")\r\n-        console.log(categoryData )\r\n+      \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n-         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n-            return item.parent ===categoryData.title;\r\n+        const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n+            return item.parent === categoryData.title;\r\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n@@ -69,23 +68,23 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    {categoryClicked && (\r\n+                    { (\r\n                         <>\r\n                             {orderGroupedCategory_3.map((item, index) => (\r\n-                                 <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                 <ListCategoryGrouped\r\n-                                     categoryData={item}\r\n-                                     handleClick={handleClick}\r\n-                                 />\r\n-                             </ListItem.Subtitle>\r\n+                                <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                                    <ListCategoryGrouped\r\n+                                        categoryData={item}\r\n+                                        handleClick={handleClick}\r\n+                                    />\r\n+                                </ListItem.Subtitle>\r\n                             ))}\r\n                             <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n                         </>\r\n-                      )}\r\n+                    )}\r\n \r\n-            \r\n+\r\n                 </>\r\n \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705742185577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n-      \r\n+\r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n@@ -68,23 +68,21 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n-                    { (\r\n-                        <>\r\n-                            {orderGroupedCategory_3.map((item, index) => (\r\n-                                <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                                    <ListCategoryGrouped\r\n-                                        categoryData={item}\r\n-                                        handleClick={handleClick}\r\n-                                    />\r\n-                                </ListItem.Subtitle>\r\n-                            ))}\r\n-                            <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n-                        </>\r\n-                    )}\r\n \r\n+                    {orderGroupedCategory_3.map((item, index) => (\r\n+                        <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                            <ListCategoryGrouped\r\n+                                categoryData={item}\r\n+                                handleClick={handleClick}\r\n+                            />\r\n+                        </ListItem.Subtitle>\r\n+                    ))}\r\n+                    <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n \r\n+\r\n+\r\n                 </>\r\n \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705742222788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n-\r\n+      \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.name === categoryData.name && item.title === categoryData.title;\r\n         });\r\n         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n@@ -68,21 +68,23 @@\n                                 handleClick={handleClick}\r\n                             />\r\n                         </ListItem.Subtitle>\r\n                     ))}\r\n+                    {categoryClicked && (\r\n+                        <>\r\n+                            {orderGroupedCategory_3.map((item, index) => (\r\n+                                <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                                    <ListCategoryGrouped\r\n+                                        categoryData={item}\r\n+                                        handleClick={handleClick}\r\n+                                    />\r\n+                                </ListItem.Subtitle>\r\n+                            ))}\r\n+                            <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n+                        </>\r\n+                    )}\r\n \r\n-                    {orderGroupedCategory_3.map((item, index) => (\r\n-                        <ListItem.Subtitle key={index} style={{ borderWidth: 1, borderColor: 'black' }}>\r\n-                            <ListCategoryGrouped\r\n-                                categoryData={item}\r\n-                                handleClick={handleClick}\r\n-                            />\r\n-                        </ListItem.Subtitle>\r\n-                    ))}\r\n-                    <OrderItem searchParamsOrderItem={searchOrderItemParams} />\r\n \r\n-\r\n-\r\n                 </>\r\n \r\n             )}\r\n \r\n"
                },
                {
                    "date": 1705742885638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,14 +35,24 @@\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n-      \r\n+\r\n+\r\n+\r\n+        let parent;\r\n+        if (categoryData.name === \"item_category3\") {\r\n+            const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n+                return item.title === categoryData.title;\r\n+            });\r\n+            parent = filteredResults.length > 0 ? filteredResults[0] : null;\r\n+        }\r\n+\r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n-            return item.name === categoryData.name && item.title === categoryData.title;\r\n+            return item.title ===parent || categoryData.title;\r\n         });\r\n         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n-            return item.parent === categoryData.title;\r\n+            return item.title === categoryData.title;\r\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n"
                },
                {
                    "date": 1705742907840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n             parent = filteredResults.length > 0 ? filteredResults[0] : null;\r\n         }\r\n \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n-            return item.title ===parent || categoryData.title;\r\n+            return item.title ===categoryData.title;\r\n         });\r\n         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n             return item.title === categoryData.title;\r\n         });\r\n"
                },
                {
                    "date": 1705743120171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n             parent = filteredResults.length > 0 ? filteredResults[0] : null;\r\n         }\r\n \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n-            return item.title ===categoryData.title;\r\n+            return item.title ===parent??categoryData.title;\r\n         });\r\n         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n             return item.title === categoryData.title;\r\n         });\r\n"
                },
                {
                    "date": 1705743186422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n \r\n \r\n         let parent;\r\n         if (categoryData.name === \"item_category3\") {\r\n+            console.log(\"is 3\")\r\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n                 return item.title === categoryData.title;\r\n             });\r\n             parent = filteredResults.length > 0 ? filteredResults[0] : null;\r\n"
                },
                {
                    "date": 1705743236893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n                 return item.title === categoryData.title;\r\n             });\r\n             parent = filteredResults.length > 0 ? filteredResults[0] : null;\r\n+            console.log(\"parent=\"+parent)\r\n         }\r\n \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.title ===parent??categoryData.title;\r\n"
                },
                {
                    "date": 1705743250031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     ) => {\r\n \r\n \r\n \r\n-        let parent;\r\n+        let parent:any;\r\n         if (categoryData.name === \"item_category3\") {\r\n             console.log(\"is 3\")\r\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n                 return item.title === categoryData.title;\r\n"
                },
                {
                    "date": 1705743271433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n             console.log(\"is 3\")\r\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n                 return item.title === categoryData.title;\r\n             });\r\n-            parent = filteredResults.length > 0 ? filteredResults[0] : null;\r\n+            parent = filteredResults.length > 0 ? filteredResults[0].parent : null;\r\n             console.log(\"parent=\"+parent)\r\n         }\r\n \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n"
                },
                {
                    "date": 1705743310177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     ) => {\r\n \r\n \r\n \r\n-        let parent:any;\r\n+        let parent:any=null;\r\n         if (categoryData.name === \"item_category3\") {\r\n             console.log(\"is 3\")\r\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n                 return item.title === categoryData.title;\r\n"
                },
                {
                    "date": 1705743373569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n             console.log(\"parent=\"+parent)\r\n         }\r\n \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n-            return item.title ===parent??categoryData.title;\r\n+            return item.title ===(parent??categoryData.title)\r\n         });\r\n         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n             return item.title === categoryData.title;\r\n         });\r\n"
                },
                {
                    "date": 1705743464191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n             console.log(\"parent=\"+parent)\r\n         }\r\n \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n-            return item.title ===(parent??categoryData.title)\r\n+            return item.title === (parent ? parent.title : categoryData.title);\r\n         });\r\n         const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n             return item.title === categoryData.title;\r\n         });\r\n"
                },
                {
                    "date": 1705743812126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,8 @@\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n \r\n-\r\n-\r\n         let parent:any=null;\r\n         if (categoryData.name === \"item_category3\") {\r\n             console.log(\"is 3\")\r\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n@@ -57,14 +55,19 @@\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n-        setSearchOrderItemParams((prevState) => ({\r\n-            ...prevState,\r\n+        // setSearchOrderItemParams((prevState) => ({\r\n+        //     ...prevState,\r\n+        //     categoryType: categoryData.name,\r\n+        //     [categoryData.name]: categoryData.title,\r\n+\r\n+        // }));\r\n+        setSearchOrderItemParams({\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n \r\n-        }));\r\n+        });\r\n     };\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705744226918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,19 +55,15 @@\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n-        // setSearchOrderItemParams((prevState) => ({\r\n-        //     ...prevState,\r\n-        //     categoryType: categoryData.name,\r\n-        //     [categoryData.name]: categoryData.title,\r\n-\r\n-        // }));\r\n-        setSearchOrderItemParams({\r\n+        setSearchOrderItemParams((prevState) => ({\r\n+            ...prevState,\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n \r\n-        });\r\n+        }));\r\n+       \r\n     };\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705745951125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,15 +37,13 @@\n         categoryData: any\r\n     ) => {\r\n \r\n         let parent:any=null;\r\n-        if (categoryData.name === \"item_category3\") {\r\n-            console.log(\"is 3\")\r\n+        if (categoryData.name === \"item_category3\") { \r\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n                 return item.title === categoryData.title;\r\n             });\r\n             parent = filteredResults.length > 0 ? filteredResults[0].parent : null;\r\n-            console.log(\"parent=\"+parent)\r\n         }\r\n \r\n         const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n             return item.title === (parent ? parent.title : categoryData.title);\r\n"
                },
                {
                    "date": 1705746368712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n+            item_category2\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n \r\n         }));\r\n"
                },
                {
                    "date": 1705746539617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n-            item_category2\r\n+            item_category3:null,\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n \r\n         }));\r\n"
                },
                {
                    "date": 1705746553834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n-            item_category3:null,\r\n+            item_category3:undefined,\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n \r\n         }));\r\n"
                },
                {
                    "date": 1705746602245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams((prevState) => ({\r\n             ...prevState,\r\n-            item_category3:undefined,\r\n+            item_category3:null,\r\n             categoryType: categoryData.name,\r\n             [categoryData.name]: categoryData.title,\r\n \r\n         }));\r\n"
                },
                {
                    "date": 1705746751692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,15 +53,17 @@\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n-        setSearchOrderItemParams((prevState) => ({\r\n-            ...prevState,\r\n-            item_category3:null,\r\n-            categoryType: categoryData.name,\r\n-            [categoryData.name]: categoryData.title,\r\n-\r\n-        }));\r\n+        setSearchOrderItemParams(prevState => {\r\n+            const { item_category3, ...rest } = prevState;\r\n+            return {\r\n+              ...rest,\r\n+              categoryType: categoryData.name,\r\n+              [categoryData.name]: categoryData.title\r\n+            };\r\n+          });\r\n+          \r\n        \r\n     };\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1705746800164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         setCategoryClicked(true)\r\n         setSearchOrderItemParams(prevState => {\r\n             const { item_category3, ...rest } = prevState;\r\n             return {\r\n-              ...rest,\r\n+                ...(categoryData.name === \"item_category2\" ? rest : prevState),\r\n               categoryType: categoryData.name,\r\n               [categoryData.name]: categoryData.title\r\n             };\r\n           });\r\n"
                },
                {
                    "date": 1705746995745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n \r\n-        let parent:any=null;\r\n-        if (categoryData.name === \"item_category3\") { \r\n+        let parent: any = null;\r\n+        if (categoryData.name === \"item_category3\") {\r\n             const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n                 return item.title === categoryData.title;\r\n             });\r\n             parent = filteredResults.length > 0 ? filteredResults[0].parent : null;\r\n@@ -53,18 +53,27 @@\n         });\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n-        setSearchOrderItemParams(prevState => {\r\n-            const { item_category3, ...rest } = prevState;\r\n-            return {\r\n-                ...(categoryData.name === \"item_category2\" ? rest : prevState),\r\n-              categoryType: categoryData.name,\r\n-              [categoryData.name]: categoryData.title\r\n-            };\r\n-          });\r\n-          \r\n+        // setSearchOrderItemParams(prevState => {\r\n+        //     const { item_category3, ...rest } = prevState;\r\n+        //     return {\r\n+        //         ...(categoryData.name === \"item_category2\" ? rest : prevState),\r\n+        //         categoryType: categoryData.name,\r\n+        //         [categoryData.name]: categoryData.title\r\n+        //     };\r\n+        // });\r\n+         setSearchOrderItemParams(\r\n+        \r\n+            createSearchParamsOrderItem({\r\n+\r\n+                categoryType: categoryData.name,\r\n+                [categoryData.name]: categoryData.title\r\n        \r\n+            })\r\n+         );\r\n+\r\n+\r\n     };\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705747050890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,19 +61,15 @@\n         //         categoryType: categoryData.name,\r\n         //         [categoryData.name]: categoryData.title\r\n         //     };\r\n         // });\r\n-         setSearchOrderItemParams(\r\n-        \r\n+        setSearchOrderItemParams(\r\n             createSearchParamsOrderItem({\r\n-\r\n                 categoryType: categoryData.name,\r\n                 [categoryData.name]: categoryData.title\r\n-       \r\n             })\r\n-         );\r\n+        );\r\n \r\n-\r\n     };\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1705747921726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoryParams }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n \r\n-    const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState([])\r\n+    const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState(CategoryData[])\r\n     const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n"
                },
                {
                    "date": 1705747982200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n import OrderItem from './Orderitem';\r\n-import useSearchOrderItemParams from './hooks/useSearchOrderItemParams';\r\n+import {useSearchOrderItemParams} from './hooks/useSearchOrderItemParams';\r\n interface OrdersProductsCategoriesProps {\r\n     categoryParams: CategorySearchParams;\r\n }\r\n \r\n@@ -19,10 +19,10 @@\n \r\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoryParams }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n-\r\n-    const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState(CategoryData[])\r\n+    let s=ICategoryData\r\n+    const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState(ICategoryData[])\r\n     const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n"
                },
                {
                    "date": 1705748040023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n import OrderItem from './Orderitem';\r\n-import {useSearchOrderItemParams} from './hooks/useSearchOrderItemParams';\r\n+import useSearchOrderItemParams from './hooks/useSearchOrderItemParams';\r\n interface OrdersProductsCategoriesProps {\r\n     categoryParams: CategorySearchParams;\r\n }\r\n \r\n@@ -24,9 +24,9 @@\n     const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState(ICategoryData[])\r\n     const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState([])\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n+    const { data, error, isLoading, isError,I } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     useEffect(() => {\r\n         setOrderGroupedCategory_2(data?.orderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(data?.orderGroupedCategory_3)\r\n"
                },
                {
                    "date": 1705748198445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { CategorySearchParams, SearchParamsOrderItem, createSearchParamsOrderItem } from './entity/SearchQueries';\r\n import { useNavigation } from '@react-navigation/native';\r\n import OrderItem from './Orderitem';\r\n import useSearchOrderItemParams from './hooks/useSearchOrderItemParams';\r\n+import { CategoryGrouped } from './entity/OrdersProductsCategoriesInfo';\r\n interface OrdersProductsCategoriesProps {\r\n     categoryParams: CategorySearchParams;\r\n }\r\n \r\n@@ -19,11 +20,11 @@\n \r\n const OrdersProductsCategoriesInfo: React.FC<OrdersProductsCategoriesProps> = ({ categoryParams }) => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n-    let s=ICategoryData\r\n-    const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState(ICategoryData[])\r\n-    const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState([])\r\n+\r\n+    const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState<CategoryGrouped[]>([]);\r\n+    const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState<CategoryGrouped[]>([]);\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n     const { data, error, isLoading, isError,I } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n"
                },
                {
                    "date": 1705748216728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,22 +37,9 @@\n     const handleClick = (\r\n         categoryData: any\r\n     ) => {\r\n \r\n-        let parent: any = null;\r\n-        if (categoryData.name === \"item_category3\") {\r\n-            const filteredResults = data?.orderGroupedCategory_3.filter(item => {\r\n-                return item.title === categoryData.title;\r\n-            });\r\n-            parent = filteredResults.length > 0 ? filteredResults[0].parent : null;\r\n-        }\r\n-\r\n-        const filterOrderGroupedCategory_2 = data?.orderGroupedCategory_2.filter(item => {\r\n-            return item.title === (parent ? parent.title : categoryData.title);\r\n-        });\r\n-        const filterOrderGroupedCategory_3 = data?.orderGroupedCategory_3.filter(item => {\r\n-            return item.title === categoryData.title;\r\n-        });\r\n+      \r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         // setSearchOrderItemParams(prevState => {\r\n"
                },
                {
                    "date": 1705748342195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState<CategoryGrouped[]>([]);\r\n     const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState<CategoryGrouped[]>([]);\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n-    const { data, error, isLoading, isError,I } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n+    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     useEffect(() => {\r\n         setOrderGroupedCategory_2(data?.orderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(data?.orderGroupedCategory_3)\r\n"
                },
                {
                    "date": 1705748350519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     const [orderGroupedCategory_2, setOrderGroupedCategory_2] = useState<CategoryGrouped[]>([]);\r\n     const [orderGroupedCategory_3, setOrderGroupedCategory_3] = useState<CategoryGrouped[]>([]);\r\n     const [categoryClicked, setCategoryClicked] = useState(false)\r\n     const { searchOrderItemParams, setSearchOrderItemParams } = useSearchOrderItemParams();\r\n-    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n+    const { data, error, isLoading, isError,getasCache } = usePopulateOrdersProductsCategoriesInfo(categoryParams);\r\n \r\n     useEffect(() => {\r\n         setOrderGroupedCategory_2(data?.orderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(data?.orderGroupedCategory_3)\r\n"
                },
                {
                    "date": 1705748393896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,12 @@\n     }, [data]);\r\n \r\n     // Define a function that handles the click event on both buttons\r\n     const handleClick = (\r\n-        categoryData: any\r\n+        categoryData: CategoryGrouped\r\n     ) => {\r\n \r\n-      \r\n+        getasCache(categoryData,data)\r\n         setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n         setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         // setSearchOrderItemParams(prevState => {\r\n"
                },
                {
                    "date": 1705748645508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n     const handleClick = (\r\n         categoryData: CategoryGrouped\r\n     ) => {\r\n \r\n-        getasCache(categoryData,data)\r\n-        setOrderGroupedCategory_2(filterOrderGroupedCategory_2)\r\n-        setOrderGroupedCategory_3(filterOrderGroupedCategory_3)\r\n+       const filtered= getasCache(categoryData,data)\r\n+        setOrderGroupedCategory_2(filtered.filterOrderGroupedCategory_2)\r\n+        setOrderGroupedCategory_3(filtered.filterOrderGroupedCategory_3)\r\n         setCategoryClicked(true)\r\n         // setSearchOrderItemParams(prevState => {\r\n         //     const { item_category3, ...rest } = prevState;\r\n         //     return {\r\n"
                }
            ],
            "date": 1704780167940,
            "name": "Commit-0",
            "content": "// Import the necessary modules\r\nimport React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport { Card, ListItem, Divider } from '@rneui/themed';\r\n\r\nimport usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n\r\n// Define the component for rendering the UI of calling the custom hook\r\nconst OrdersProductsCategoriesInfo = () => {\r\n       // Use the useTheme hook to get the theme object from RNEUI\r\n       const { theme } = useTheme();\r\n    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n    // Use the useTheme hook to get the theme object from RNEUI\r\n    // Return a JSX element that renders the UI based on the query state and data\r\n    return (\r\n        <View style={styles.container}>\r\n            {/* Show a loading text while the data is being fetched */}\r\n            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n            {/* Show an error text if there is an error */}\r\n            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n            {/* Show a card with the data if the data is available */}\r\n            {data && (\r\n                <Card>\r\n                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n                    <Card.Divider />\r\n                    <View style={styles.dataContainer}>\r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                        {data.orderItemGrouping.map(item => (\r\n                            <ListItem key={item.itemCategory3} bottomDivider>\r\n                                <ListItem.Content>\r\n                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                    </ListItem.Subtitle>\r\n                                </ListItem.Content>\r\n                            </ListItem>\r\n                        ))}\r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n                            <ListItem key={key} bottomDivider>\r\n                                <ListItem.Content>\r\n                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                    </ListItem.Subtitle>\r\n                                </ListItem.Content>\r\n                            </ListItem>\r\n                        ))}\r\n                    </View>\r\n                </Card>\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\n// Define the styles for the component using StyleSheet\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    loading: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    dataContainer: {\r\n        margin: 10,\r\n    },\r\n    dataTitle: {\r\n        fontSize: 18,\r\n        fontWeight: \"bold\",\r\n        marginVertical: 5,\r\n    },\r\n    dataDivider: {\r\n        marginVertical: 5,\r\n    },\r\n});\r\n\r\n// Export the component\r\nexport default OrdersProductsCategoriesInfo;\r\n"
        }
    ]
}