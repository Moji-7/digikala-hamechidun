{
    "sourceFile": "components/OrdersProductsCategoriesInfo.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 66,
            "patches": [
                {
                    "date": 1704780167941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704780175040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // Import the necessary modules\r\n import React from 'react';\r\n import { View, Text, StyleSheet } from 'react-native';\r\n-import { Card, ListItem, Divider } from '@rneui/themed';\r\n+import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n"
                },
                {
                    "date": 1704780500304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,52 +10,14 @@\n        // Use the useTheme hook to get the theme object from RNEUI\r\n        const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    // Return a JSX element that renders the UI based on the query state and data\r\n+\r\n     return (\r\n         <View style={styles.container}>\r\n             {/* Show a loading text while the data is being fetched */}\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n-            {/* Show an error text if there is an error */}\r\n-            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n-            {/* Show a card with the data if the data is available */}\r\n-            {data && (\r\n-                <Card>\r\n-                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n-                    <Card.Divider />\r\n-                    <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map(item => (\r\n-                            <ListItem key={item.itemCategory3} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))}\r\n-                    </View>\r\n-                </Card>\r\n-            )}\r\n-        </View>\r\n+                 </View>\r\n     );\r\n };\r\n \r\n // Define the styles for the component using StyleSheet\r\n"
                },
                {
                    "date": 1704782201556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,46 @@\n     return (\r\n         <View style={styles.container}>\r\n             {/* Show a loading text while the data is being fetched */}\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n-                 </View>\r\n+            {/* Show an error text if there is an error */}\r\n+            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n+            {/* Show a card with the data if the data is available */}\r\n+            {data && (\r\n+                <Card>\r\n+                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n+                    <Card.Divider />\r\n+                    <View style={styles.dataContainer}>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {data.orderItemGrouping.map(item => (\r\n+                            <ListItem key={item.itemCategory3} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n+                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n+                            <ListItem key={key} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                    </View>\r\n+                </Card>\r\n+            )}\r\n+        </View>\r\n     );\r\n };\r\n \r\n // Define the styles for the component using StyleSheet\r\n"
                },
                {
                    "date": 1704782250938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,13 @@\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n        // Use the useTheme hook to get the theme object from RNEUI\r\n-       const { theme } = useTheme();\r\n+    const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n-\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n+    // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n         <View style={styles.container}>\r\n             {/* Show a loading text while the data is being fetched */}\r\n             {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n"
                },
                {
                    "date": 1704783171337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map(item => (\r\n+                        {?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -40,9 +40,9 @@\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n+                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783199054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {?.orderItemGrouping.map(item => (\r\n+                        {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783217867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,18 +40,18 @@\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704783233182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.orderItemGrouping.map(item => (\r\n+                        {data?.orderItemGrouping?.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783482866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.orderItemGrouping?.map(item => (\r\n+                        {data?.order_item_grouping?.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704783959606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,15 +21,10 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <Card>\r\n-                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n-                    <Card.Divider />\r\n-                    <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.order_item_grouping?.map(item => (\r\n+                    \r\n+                        {data?.orderItemGrouping?.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -39,20 +34,9 @@\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n-                    </View>\r\n+\r\n                 </Card>\r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704783976444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,15 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <Card>\r\n-                    \r\n-                        {data?.orderItemGrouping?.map(item => (\r\n+                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n+                    <Card.Divider />\r\n+                    <View style={styles.dataContainer}>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -34,9 +39,20 @@\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-\r\n+                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n+                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                            <ListItem key={key} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                    </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704785881467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.itemCategory3} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704786029365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data?.orderItemGrouping.map(item => (\r\n-                            <ListItem key={item.itemCategory3} bottomDivider>\r\n+                            <ListItem key={item.title} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n"
                },
                {
                    "date": 1704786049219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,27 +31,27 @@\n                         {data?.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.title} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n+                                    </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704786113658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data?.orderItemGrouping.map(item => (\r\n+                        {data.orderItemGrouping.map(item => (\r\n                             <ListItem key={item.title} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n"
                },
                {
                    "date": 1704786248310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n-       // Use the useTheme hook to get the theme object from RNEUI\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n     const { theme } = useTheme();\r\n     // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -27,10 +27,10 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map(item => (\r\n-                            <ListItem key={item.title} bottomDivider>\r\n+                        {data.orderItemGrouping.map((item, index) => (\r\n+                            <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n"
                },
                {
                    "date": 1704786268853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.index}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704786309167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.index}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704786334232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,12 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item}</ListItem.Title>\r\n-                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle> */}\r\n+                                    </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n"
                },
                {
                    "date": 1704788228725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,9 @@\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n-    // Use the useTheme hook to get the theme object from RNEUI\r\n-    const { theme } = useTheme();\r\n-    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n+\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n@@ -26,9 +24,9 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {/* Use the dot operator to access the orderItemGrouping property from the data object */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n@@ -37,21 +35,8 @@\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704788247096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n-\r\n+    // Use the useTheme hook to get the theme object from RNEUI\r\n+    const { theme } = useTheme();\r\n+    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n     const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n     // Return a JSX element that renders the UI based on the query state and data\r\n     return (\r\n"
                },
                {
                    "date": 1704788310788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,19 +26,32 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use the dot operator to access the orderItemGrouping property from the data object */}\r\n+                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                    </ListItem.Subtitle> */}\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n+                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n+                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n+                            <ListItem key={key} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704788500314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.item_category3.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704788521019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.item_category3.title}</ListItem.Title>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle> */}\r\n                                 </ListItem.Content>\r\n"
                },
                {
                    "date": 1704788541676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    {/* <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle> */}\r\n+                                    </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n"
                },
                {
                    "date": 1704788586437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,18 @@\n                             </ListItem>\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n+                        {data.ordersGrouping.map((item, index) => (\r\n+                            <ListItem key={index} bottomDivider>\r\n+                                <ListItem.Content>\r\n+                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n+                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n+                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n+                                    </ListItem.Subtitle>\r\n+                                </ListItem.Content>\r\n+                            </ListItem>\r\n+                        ))}\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n                         {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789312818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map((item, index) => (\r\n+                        {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n                                     <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n@@ -48,9 +48,9 @@\n                                         Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                     </ListItem.Subtitle>\r\n                                 </ListItem.Content>\r\n                             </ListItem>\r\n-                        ))}\r\n+                        ))} */}\r\n                         {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n                         {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n                             <ListItem key={key} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789391396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,11 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n+                        {data.orderItemGrouping.map((item, index) => (\r\n+      <ttx key={index} item={item} index={index} theme={theme} />\r\n+    ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n"
                },
                {
                    "date": 1704789413560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n+import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -28,10 +29,10 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n-      <ttx key={index} item={item} index={index} theme={theme} />\r\n-    ))}\r\n+                            <ListCategoryGrouped key={index} item={item} index={index} theme={theme} />\r\n+                        ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n"
                },
                {
                    "date": 1704789430217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} item={item} index={index} theme={theme} />\r\n+                            <ListCategoryGrouped index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789489543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n-                            <ListCategoryGrouped index={index} item={item} />\r\n+                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n"
                },
                {
                    "date": 1704789614062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,11 @@\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                         {data.orderItemGrouping.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n+                         {data.ordersGrouping.map((item, index) => (\r\n+                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n+                        ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n                                 <ListItem.Content>\r\n                                     <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n"
                },
                {
                    "date": 1704789623474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,12 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderItemGrouping.map((item, index) => (\r\n+                        {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n-                         {data.ordersGrouping.map((item, index) => (\r\n+                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n                             <ListItem key={index} bottomDivider>\r\n"
                },
                {
                    "date": 1704792087651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n-                        ))}\r\n+                        ))} */}\r\n                          {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n"
                },
                {
                    "date": 1704792146030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <Card>\r\n-                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n+                    <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n"
                },
                {
                    "date": 1704792232835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,15 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n-                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n-                        ))} */}\r\n+                        ))}\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3</Text>\r\n+                        <Divider style={styles.dataDivider} />\r\n                          {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n                         {/* {data.orderItemGrouping.map((item, index) => (\r\n"
                },
                {
                    "date": 1704792282020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,51 +25,18 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                         {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} index={index} item={item} />\r\n                         ))}\r\n-                        {/* {data.orderItemGrouping.map((item, index) => (\r\n-                            <ListItem key={index} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n-                        <Divider style={styles.dataDivider} />\r\n-                        {data.ordersGrouping.map((item, index) => (\r\n-                            <ListItem key={index} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.title}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n-                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n-                        {/* {Object.entries(data?.ordersGrouping).map(([key, value]) => (\r\n-                            <ListItem key={key} bottomDivider>\r\n-                                <ListItem.Content>\r\n-                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n-                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n-                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n-                                    </ListItem.Subtitle>\r\n-                                </ListItem.Content>\r\n-                            </ListItem>\r\n-                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704875446216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,14 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n+                            <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} index={index} item={item} />\r\n+                            <ListCategoryGrouped key={index}   categoryType='item_category2'  item={item} index={index}/>\r\n                         ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704879921788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}   categoryType='item_category2'  item={item} index={index}/>\r\n+                            <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n                         ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704880179915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704880452729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))} */}\r\n+                        ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704885529811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))}\r\n+                        ))} */}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704892235760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,16 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n-                        ))}\r\n+                        ))} */}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* {data.orderGroupedCategory_3.map((item, index) => (\r\n+                        {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n-                        ))} */}\r\n+                        ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n         </View>\r\n"
                },
                {
                    "date": 1704892376166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {/* {data.orderGroupedCategory_2.map((item, index) => (\r\n+                        {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n-                        ))} */}\r\n+                        ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n"
                },
                {
                    "date": 1704892400043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,14 @@\n                 <Card>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     <View style={styles.dataContainer}>\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 ü•≥</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n                         ))}\r\n-                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶ö</Text>\r\n+                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n                         ))}\r\n"
                },
                {
                    "date": 1704892701818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,14 @@\n                     <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}  categoryType='item_category2' item={item} index={index} />\r\n+                            <ListCategoryGrouped key={index}  categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}   categoryType='item_category3'  item={item} index={index}/>\r\n+                            <ListCategoryGrouped key={index}   categoryType='item_category3'  categoryGrouped={item} index={index}/>\r\n                         ))}\r\n                     </View>\r\n                 </Card>\r\n             )}\r\n"
                },
                {
                    "date": 1704959343738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n+import { List } from '@mui/material';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -21,24 +22,32 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-                <Card>\r\n+                <List>\r\n+                    <ListItem key={index} bottomDivider>\r\n+                        <ListItem.Content>\r\n+                            <ListItem.Title style={{ color: theme.colors.text }}>\r\n+                                {item.categoryType}\r\n+                            </ListItem.Title>\r\n+                        </ListItem.Content>\r\n+                        <ListItem.Chevron />\r\n+                    </ListItem>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n-                    <View style={styles.dataContainer}>\r\n+                    {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}  categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index}   categoryType='item_category3'  categoryGrouped={item} index={index}/>\r\n+                            <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n-                    </View>\r\n-                </Card>\r\n+                    </View> */}\r\n+                </List>\r\n             )}\r\n         </View>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1704959422768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,21 +26,24 @@\n                 <List>\r\n                     <ListItem key={index} bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n-                                {item.categoryType}\r\n+                            Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n+                            <ListItem.Subtitle >\r\n+                                {data.orderGroupedCategory_2.map((item, index) => (\r\n+                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                        ))} \r\n+                            </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n                     <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n                     <Card.Divider />\r\n                     {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n-                        {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                        ))}\r\n+                       \r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 3 ü¶öü¶ö</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n"
                },
                {
                    "date": 1704959450203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n                 <List>\r\n-                    <ListItem key={index} bottomDivider>\r\n+                    <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n"
                },
                {
                    "date": 1704959485418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n-import { List } from '@mui/material';\r\n \r\n // Define the component for rendering the UI of calling the custom hook\r\n const OrdersProductsCategoriesInfo = () => {\r\n     // Use the useTheme hook to get the theme object from RNEUI\r\n@@ -22,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-                <List>\r\n+               \r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -48,9 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                </List>\r\n+                \r\n             )}\r\n         </View>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1704959494747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               \r\n+               <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -47,8 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n+                    </>\r\n                 \r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704959542869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               <>\r\n+               <Card>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -47,9 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                    </>\r\n+                    </Card>\r\n                 \r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704959560699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               <Card>\r\n+               <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                             Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n@@ -47,9 +47,9 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                    </Card>\r\n+                    </>\r\n                 \r\n             )}\r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1704959677202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n-                    <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n-                    <Card.Divider />\r\n+                    {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n+                    <Card.Divider /> */}\r\n                     {/* <View style={styles.dataContainer}>\r\n                         <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Category 2 üê†üê†</Text>\r\n                         <Divider style={styles.dataDivider} />\r\n                        \r\n"
                },
                {
                    "date": 1704959791267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,18 +21,20 @@\n             {/* Show an error text if there is an error */}\r\n             {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n             {/* Show a card with the data if the data is available */}\r\n             {data && (\r\n-               <>\r\n+                <>\r\n                     <ListItem bottomDivider>\r\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n-                            Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n+                                Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                {data.orderGroupedCategory_2.map((item, index) => (\r\n-                            <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                        ))} \r\n+                                <Card>\r\n+                                    {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                        <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+\r\n+                                    ))}   </Card>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n@@ -47,10 +49,10 @@\n                         {data.orderGroupedCategory_3.map((item, index) => (\r\n                             <ListCategoryGrouped key={index} categoryType='item_category3' categoryGrouped={item} index={index} />\r\n                         ))}\r\n                     </View> */}\r\n-                    </>\r\n-                \r\n+                </>\r\n+\r\n             )}\r\n         </View>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1704959853759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,13 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                <Card>\r\n+                                 <ListItem bottomDivider>>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n-                                    ))}   </Card>\r\n+                                    ))}   </ListItem>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704959879458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                 <ListItem bottomDivider>>\r\n+                                 <ListItem bottomDivider>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n                                     ))}   </ListItem>\r\n"
                },
                {
                    "date": 1704959918935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,15 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                 <ListItem bottomDivider>\r\n+                                 <ListItem bottomDivider> <ListItem.Content>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n-                                    ))}   </ListItem>\r\n+                                    ))}  \r\n+                                    </ListItem.Content>\r\n+                                     </ListItem>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704959960636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,14 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                 <ListItem bottomDivider> <ListItem.Content>\r\n+                                <>\r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n \r\n-                                    ))}  \r\n-                                    </ListItem.Content>\r\n-                                     </ListItem>\r\n+                                    ))}\r\n+                                </>\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704960198656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,18 @@\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n                             <ListItem.Subtitle >\r\n-                                <>\r\n+                             \r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                        <>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n+                                        {index < data.orderGroupedCategory_2.length - 1 && <Divider />}\r\n+                                        </>\r\n \r\n                                     ))}\r\n-                                </>\r\n+                                     \r\n+                             \r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704960246933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n                                         {index < data.orderGroupedCategory_2.length - 1 && <Divider />}\r\n+                                        <Divider />\r\n                                         </>\r\n \r\n                                     ))}\r\n                                      \r\n"
                },
                {
                    "date": 1704960303031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle >\r\n+                            <ListItem.Subtitle style={{borderWidth: 1, borderColor: 'black'}}>\r\n+\r\n                              \r\n                                     {data.orderGroupedCategory_2.map((item, index) => (\r\n                                         <>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n"
                },
                {
                    "date": 1704960370530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,21 +27,19 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle style={{borderWidth: 1, borderColor: 'black'}}>\r\n+                            <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n \r\n-                             \r\n-                                    {data.orderGroupedCategory_2.map((item, index) => (\r\n-                                        <>\r\n+\r\n+                                {data.orderGroupedCategory_2.map((item, index) => (\r\n+                                    <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-                                        {index < data.orderGroupedCategory_2.length - 1 && <Divider />}\r\n-                                        <Divider />\r\n-                                        </>\r\n \r\n-                                    ))}\r\n-                                     \r\n-                             \r\n+                                    </ListItem.Subtitle>\r\n+                                ))}\r\n+\r\n+\r\n                             </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n"
                },
                {
                    "date": 1704960411346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n+                            <ListItem.Subtitle >\r\n \r\n \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n"
                },
                {
                    "date": 1704960622399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // Import the necessary modules\r\n import React from 'react';\r\n-import { View, Text, StyleSheet } from 'react-native';\r\n+import { View,FlatList, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n@@ -27,9 +27,9 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <ListItem.Subtitle >\r\n+                            <FlatList>\r\n \r\n \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n@@ -38,9 +38,9 @@\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n \r\n \r\n-                            </ListItem.Subtitle>\r\n+                            </FlatList>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n                     {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n"
                },
                {
                    "date": 1704964319888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // Import the necessary modules\r\n import React from 'react';\r\n-import { View,FlatList, Text, StyleSheet } from 'react-native';\r\n+import { View, Text, StyleSheet } from 'react-native';\r\n import { Card, ListItem, Divider, useTheme } from '@rneui/themed';\r\n \r\n import usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n import ListCategoryGrouped from './uicomponents/ListCategoryGrouped';\r\n@@ -27,20 +27,19 @@\n                         <ListItem.Content>\r\n                             <ListItem.Title style={{ color: theme.colors.text }}>\r\n                                 Orders Categories Grouping (category 2 & 3) üõíüêæ\r\n                             </ListItem.Title>\r\n-                            <FlatList>\r\n+                            <ListItem.Subtitle  >\r\n \r\n \r\n                                 {data.orderGroupedCategory_2.map((item, index) => (\r\n                                     <ListItem.Subtitle style={{ borderWidth: 1, borderColor: 'black' }}>\r\n                                         <ListCategoryGrouped key={index} categoryType='item_category2' categoryGrouped={item} index={index} />\r\n-\r\n                                     </ListItem.Subtitle>\r\n                                 ))}\r\n \r\n \r\n-                            </FlatList>\r\n+                            </ListItem.Subtitle>\r\n                         </ListItem.Content>\r\n                         <ListItem.Chevron />\r\n                     </ListItem>\r\n                     {/* <Card.Title style={{ color: theme.colors.text }}> Orders Categories Grouping (category 2 & 3) üõíüêæ</Card.Title>\r\n"
                }
            ],
            "date": 1704780167940,
            "name": "Commit-0",
            "content": "// Import the necessary modules\r\nimport React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport { Card, ListItem, Divider } from '@rneui/themed';\r\n\r\nimport usePopulateOrdersProductsCategoriesInfo from './hooks/usePopulateOrdersProductsCategoriesInfo';\r\n\r\n// Define the component for rendering the UI of calling the custom hook\r\nconst OrdersProductsCategoriesInfo = () => {\r\n       // Use the useTheme hook to get the theme object from RNEUI\r\n       const { theme } = useTheme();\r\n    // Use the custom hook to get the data, error, isLoading, and isError properties from the query\r\n    const { data, error, isLoading, isError } = usePopulateOrdersProductsCategoriesInfo();\r\n    // Use the useTheme hook to get the theme object from RNEUI\r\n    // Return a JSX element that renders the UI based on the query state and data\r\n    return (\r\n        <View style={styles.container}>\r\n            {/* Show a loading text while the data is being fetched */}\r\n            {isLoading && <Text style={[styles.loading, { color: theme.colors.primary }]}>Loading...</Text>}\r\n            {/* Show an error text if there is an error */}\r\n            {isError && <Text style={[styles.error, { color: theme.colors.error }]}>Error: {error.message}</Text>}\r\n            {/* Show a card with the data if the data is available */}\r\n            {data && (\r\n                <Card>\r\n                    <Card.Title style={{ color: theme.colors.text }}>Populate Orders Products Categories Info üõíüêæ</Card.Title>\r\n                    <Card.Divider />\r\n                    <View style={styles.dataContainer}>\r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Order Item Grouping</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                        {/* Use a map function to render each item in the order item grouping array as a list item */}\r\n                        {data.orderItemGrouping.map(item => (\r\n                            <ListItem key={item.itemCategory3} bottomDivider>\r\n                                <ListItem.Content>\r\n                                    <ListItem.Title style={{ color: theme.colors.text }}>{item.itemCategory2} - {item.itemCategory3}</ListItem.Title>\r\n                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                        Count: {item.count} | Max Price: {item.maxPrice} | Avg Price: {item.avgPrice} | Total Price: {item.totalPrice} | Avg Discount: {item.avgDiscount}\r\n                                    </ListItem.Subtitle>\r\n                                </ListItem.Content>\r\n                            </ListItem>\r\n                        ))}\r\n                        <Text style={[styles.dataTitle, { color: theme.colors.text }]}>Orders Grouping</Text>\r\n                        <Divider style={styles.dataDivider} />\r\n                        {/* Use a map function to render each key-value pair in the orders grouping object as a list item */}\r\n                        {Object.entries(data.ordersGrouping).map(([key, value]) => (\r\n                            <ListItem key={key} bottomDivider>\r\n                                <ListItem.Content>\r\n                                    <ListItem.Title style={{ color: theme.colors.text }}>{key}</ListItem.Title>\r\n                                    <ListItem.Subtitle style={{ color: theme.colors.text }}>\r\n                                        Count: {value.count} | Max Price: {value.maxPrice} | Avg Price: {value.avgPrice} | Total Price: {value.totalPrice} | Avg Discount: {value.avgDiscount}\r\n                                    </ListItem.Subtitle>\r\n                                </ListItem.Content>\r\n                            </ListItem>\r\n                        ))}\r\n                    </View>\r\n                </Card>\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\n// Define the styles for the component using StyleSheet\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    loading: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n    dataContainer: {\r\n        margin: 10,\r\n    },\r\n    dataTitle: {\r\n        fontSize: 18,\r\n        fontWeight: \"bold\",\r\n        marginVertical: 5,\r\n    },\r\n    dataDivider: {\r\n        marginVertical: 5,\r\n    },\r\n});\r\n\r\n// Export the component\r\nexport default OrdersProductsCategoriesInfo;\r\n"
        }
    ]
}