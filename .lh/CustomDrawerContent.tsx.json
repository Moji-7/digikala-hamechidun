{
    "sourceFile": "CustomDrawerContent.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1708516549477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708756778635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,26 @@\n  // useIsDrawerOpen,\r\n   useDrawerStatus,\r\n } from '@react-navigation/drawer';\r\n import { useNavigation } from '@react-navigation/native';\r\n+import useTokenStorage from './auth/components/hooks/useTokenStorage';\r\n \r\n const CustomDrawerContent = (props) => {\r\n   const navigation = useNavigation(); // Get the navigation prop\r\n  // const isDrawerOpen = useIsDrawerOpen(); // Get the drawer open state\r\n   const drawerStatus = useDrawerStatus(); // Get the drawer status\r\n \r\n+  const { getToken } = useTokenStorage(secretKey, tokenKey);\r\n+\r\n+\r\n+  const showToken = async () => {\r\n+    // get the token using the getToken function\r\n+    const token = await getToken();\r\n+\r\n+    // display the token as an alert\r\n+    alert(token);\r\n+  };\r\n+\r\n   const handleLogout = () => {\r\n     // Perform the logout logic here\r\n     // For simplicity, we assume the user can logout without any confirmation\r\n     // Navigate to the login screen\r\n"
                },
                {
                    "date": 1708757124840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const navigation = useNavigation(); // Get the navigation prop\r\n  // const isDrawerOpen = useIsDrawerOpen(); // Get the drawer open state\r\n   const drawerStatus = useDrawerStatus(); // Get the drawer status\r\n \r\n-  const { getToken } = useTokenStorage(secretKey, tokenKey);\r\n+  const { getToken } = useTokenStorage();\r\n \r\n \r\n   const showToken = async () => {\r\n     // get the token using the getToken function\r\n"
                },
                {
                    "date": 1708759510665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,38 @@\n // This is a simplified example of a custom drawer content component\r\n-import React from 'react';\r\n+import React, { useEffect, useState } from 'react';\r\n import { View, Text, Button } from 'react-native';\r\n import {\r\n   DrawerContentScrollView,\r\n   DrawerItemList,\r\n   DrawerItem,\r\n- // useIsDrawerOpen,\r\n+  // useIsDrawerOpen,\r\n   useDrawerStatus,\r\n } from '@react-navigation/drawer';\r\n import { useNavigation } from '@react-navigation/native';\r\n import useTokenStorage from './auth/components/hooks/useTokenStorage';\r\n \r\n const CustomDrawerContent = (props) => {\r\n   const navigation = useNavigation(); // Get the navigation prop\r\n- // const isDrawerOpen = useIsDrawerOpen(); // Get the drawer open state\r\n+  // const isDrawerOpen = useIsDrawerOpen(); // Get the drawer open state\r\n   const drawerStatus = useDrawerStatus(); // Get the drawer status\r\n-\r\n   const { getToken } = useTokenStorage();\r\n+  const [token, setToken] = useState()\r\n \r\n \r\n   const showToken = async () => {\r\n-    // get the token using the getToken function\r\n     const token = await getToken();\r\n-\r\n+    setToken(token)\r\n     // display the token as an alert\r\n-    alert(token);\r\n+    console.log(token);\r\n   };\r\n+  useEffect(() => {\r\n \r\n+    showToken();\r\n+\r\n+  }, [])\r\n+\r\n+\r\n   const handleLogout = () => {\r\n     // Perform the logout logic here\r\n     // For simplicity, we assume the user can logout without any confirmation\r\n     // Navigate to the login screen\r\n@@ -43,9 +48,9 @@\n \r\n   return (\r\n     <DrawerContentScrollView {...props}>\r\n       {/* Show the user name and a logout button if the drawer is open */}\r\n-      {2==2 && (\r\n+      {2 == 2 && (\r\n         <View>\r\n           <Text>Welcome, admin</Text>\r\n           <Button title=\"Logout\" onPress={handleLogout} />\r\n         </View>\r\n"
                },
                {
                    "date": 1708759697585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,9 @@\n     // display the token as an alert\r\n     console.log(token);\r\n   };\r\n   useEffect(() => {\r\n-\r\n     showToken();\r\n-\r\n   }, [])\r\n \r\n \r\n   const handleLogout = () => {\r\n@@ -50,9 +48,9 @@\n     <DrawerContentScrollView {...props}>\r\n       {/* Show the user name and a logout button if the drawer is open */}\r\n       {2 == 2 && (\r\n         <View>\r\n-          <Text>Welcome, admin</Text>\r\n+          <Text>Welcome, admin {token}</Text>\r\n           <Button title=\"Logout\" onPress={handleLogout} />\r\n         </View>\r\n       )}\r\n       {/* Show the drawer items */}\r\n"
                },
                {
                    "date": 1708759817348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,20 +29,13 @@\n     showToken();\r\n   }, [])\r\n \r\n \r\n-  const handleLogout = () => {\r\n-    // Perform the logout logic here\r\n-    // For simplicity, we assume the user can logout without any confirmation\r\n-    // Navigate to the login screen\r\n-    navigation.navigate('login');\r\n-    // Reset the navigation state\r\n-    navigation.reset({\r\n-      index: 0,\r\n-      routes: [{ name: 'login' }],\r\n-    });\r\n-    // Close the drawer\r\n-    //navigation.closeDrawer();\r\n+  const handleLogout = async () => {\r\n+    // delete the token using the setToken function\r\n+    await setToken(undefined);\r\n+\r\n+    // TODO: navigate to the previous screen using React Navigation\r\n   };\r\n \r\n   return (\r\n     <DrawerContentScrollView {...props}>\r\n"
                },
                {
                    "date": 1708760043936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n const CustomDrawerContent = (props) => {\r\n   const navigation = useNavigation(); // Get the navigation prop\r\n   // const isDrawerOpen = useIsDrawerOpen(); // Get the drawer open state\r\n   const drawerStatus = useDrawerStatus(); // Get the drawer status\r\n-  const { getToken } = useTokenStorage();\r\n+  const { getToken,deleteToken } = useTokenStorage();\r\n   const [token, setToken] = useState()\r\n \r\n \r\n   const showToken = async () => {\r\n@@ -32,8 +32,9 @@\n \r\n   const handleLogout = async () => {\r\n     // delete the token using the setToken function\r\n     await setToken(undefined);\r\n+    await deleteToken();\r\n \r\n     // TODO: navigate to the previous screen using React Navigation\r\n   };\r\n \r\n"
                },
                {
                    "date": 1708760199510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n import { useNavigation } from '@react-navigation/native';\r\n import useTokenStorage from './auth/components/hooks/useTokenStorage';\r\n \r\n const CustomDrawerContent = (props) => {\r\n-  const navigation = useNavigation(); // Get the navigation prop\r\n+  const { navigate, reset } = useNavigation(); // Get the navigation prop\r\n   // const isDrawerOpen = useIsDrawerOpen(); // Get the drawer open state\r\n   const drawerStatus = useDrawerStatus(); // Get the drawer status\r\n   const { getToken,deleteToken } = useTokenStorage();\r\n   const [token, setToken] = useState()\r\n@@ -33,16 +33,17 @@\n   const handleLogout = async () => {\r\n     // delete the token using the setToken function\r\n     await setToken(undefined);\r\n     await deleteToken();\r\n+    navigate(\"LoginScreen\");\r\n \r\n     // TODO: navigate to the previous screen using React Navigation\r\n   };\r\n \r\n   return (\r\n     <DrawerContentScrollView {...props}>\r\n       {/* Show the user name and a logout button if the drawer is open */}\r\n-      {2 == 2 && (\r\n+      {token && (\r\n         <View>\r\n           <Text>Welcome, admin {token}</Text>\r\n           <Button title=\"Logout\" onPress={handleLogout} />\r\n         </View>\r\n"
                }
            ],
            "date": 1708516549477,
            "name": "Commit-0",
            "content": "// This is a simplified example of a custom drawer content component\r\nimport React from 'react';\r\nimport { View, Text, Button } from 'react-native';\r\nimport {\r\n  DrawerContentScrollView,\r\n  DrawerItemList,\r\n  DrawerItem,\r\n // useIsDrawerOpen,\r\n  useDrawerStatus,\r\n} from '@react-navigation/drawer';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst CustomDrawerContent = (props) => {\r\n  const navigation = useNavigation(); // Get the navigation prop\r\n // const isDrawerOpen = useIsDrawerOpen(); // Get the drawer open state\r\n  const drawerStatus = useDrawerStatus(); // Get the drawer status\r\n\r\n  const handleLogout = () => {\r\n    // Perform the logout logic here\r\n    // For simplicity, we assume the user can logout without any confirmation\r\n    // Navigate to the login screen\r\n    navigation.navigate('login');\r\n    // Reset the navigation state\r\n    navigation.reset({\r\n      index: 0,\r\n      routes: [{ name: 'login' }],\r\n    });\r\n    // Close the drawer\r\n    //navigation.closeDrawer();\r\n  };\r\n\r\n  return (\r\n    <DrawerContentScrollView {...props}>\r\n      {/* Show the user name and a logout button if the drawer is open */}\r\n      {2==2 && (\r\n        <View>\r\n          <Text>Welcome, admin</Text>\r\n          <Button title=\"Logout\" onPress={handleLogout} />\r\n        </View>\r\n      )}\r\n      {/* Show the drawer items */}\r\n      <DrawerItemList {...props} />\r\n    </DrawerContentScrollView>\r\n  );\r\n};\r\n\r\nexport default CustomDrawerContent;\r\n"
        }
    ]
}