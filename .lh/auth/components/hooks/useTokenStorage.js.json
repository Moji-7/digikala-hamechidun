{
    "sourceFile": "auth/components/hooks/useTokenStorage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1708757030968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708757113131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import { useTokenConsumer } from './TokenContext';\r\n \r\n // define a custom hook for storing and retrieving tokens\r\n-export default function useTokenStorage() {\r\n+export default function useTok() {\r\n   // get the secretKey and tokenKey from the context using the custom hook\r\n   const { secretKey, tokenKey } = useTokenConsumer();\r\n \r\n   // define a function for storing the token\r\n"
                },
                {
                    "date": 1708757204785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // modify the custom hook to use the context value\r\n import React from 'react';\r\n import CryptoJS from 'crypto-js';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n-import { useTokenConsumer } from './TokenContext';\r\n+import { useTokenConsumer } from '../../TokenContext';\r\n \r\n // define a custom hook for storing and retrieving tokens\r\n export default function useTok() {\r\n   // get the secretKey and tokenKey from the context using the custom hook\r\n"
                },
                {
                    "date": 1708757279944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import { useTokenConsumer } from '../../TokenContext';\r\n \r\n // define a custom hook for storing and retrieving tokens\r\n-export default function useTok() {\r\n+export default function useTokenStorage() {\r\n   // get the secretKey and tokenKey from the context using the custom hook\r\n   const { secretKey, tokenKey } = useTokenConsumer();\r\n \r\n   // define a function for storing the token\r\n"
                },
                {
                    "date": 1708757360041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-export default App;\r\n \r\n // useTokenStorage.js\r\n // modify the custom hook to use the context value\r\n import React from 'react';\r\n"
                },
                {
                    "date": 1708758952731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n \r\n // useTokenStorage.js\r\n // modify the custom hook to use the context value\r\n-import React from 'react';\r\n-import CryptoJS from 'crypto-js';\r\n+  import CryptoJS from 'crypto-js';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import { useTokenConsumer } from '../../TokenContext';\r\n \r\n // define a custom hook for storing and retrieving tokens\r\n"
                },
                {
                    "date": 1708758997032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n // useTokenStorage.js\r\n // modify the custom hook to use the context value\r\n   import CryptoJS from 'crypto-js';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n-import { useTokenConsumer } from '../../TokenContext';\r\n+import { useTokenConsumer } from './useTokenConsumer';\r\n \r\n // define a custom hook for storing and retrieving tokens\r\n export default function useTokenStorage() {\r\n   // get the secretKey and tokenKey from the context using the custom hook\r\n"
                },
                {
                    "date": 1708759953874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,18 @@\n       console.error(e);\r\n     }\r\n   };\r\n \r\n+  const deleteData = async () => {\r\n+    try {\r\n+      // remove the value with the key\r\n+      await AsyncStorage.removeItem('@user');\r\n+    } catch (e) {\r\n+      // handle the error\r\n+      console.error(e);\r\n+    }\r\n+  };\r\n+\r\n   // return the storeData and getData functions as an object\r\n   return {\r\n     setToken: storeData,\r\n     getToken: getData,\r\n"
                },
                {
                    "date": 1708760007823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,12 +41,12 @@\n       console.error(e);\r\n     }\r\n   };\r\n \r\n-  const deleteData = async () => {\r\n+  const deleteToken = async () => {\r\n     try {\r\n       // remove the value with the key\r\n-      await AsyncStorage.removeItem('@user');\r\n+      await AsyncStorage.removeItem(tokenKey);\r\n     } catch (e) {\r\n       // handle the error\r\n       console.error(e);\r\n     }\r\n@@ -55,6 +55,7 @@\n   // return the storeData and getData functions as an object\r\n   return {\r\n     setToken: storeData,\r\n     getToken: getData,\r\n+    deleteToken: deleteToken,\r\n   };\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708779028427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+\r\n+// useTokenStorage.js\r\n+// modify the custom hook to use the context value\r\n+  import CryptoJS from 'crypto-js';\r\n+import AsyncStorage from '@react-native-async-storage/async-storage';\r\n+import { useTokenConsumer } from './useTokenConsumer';\r\n+\r\n+// define a custom hook for storing and retrieving tokens\r\n+export default function useTokenStorage() {\r\n+  // get the secretKey and tokenKey from the context using the custom hook\r\n+  const { secretKey, tokenKey } = useTokenConsumer();\r\n+\r\n+  // define a function for storing the token\r\n+  const storeData = async (value) => {\r\n+    try {\r\n+      // convert the value to a string\r\n+      const stringValue = JSON.stringify(value);\r\n+      // encrypt the value with the secret key\r\n+      const encryptedValue = CryptoJS.AES.encrypt(stringValue, secretKey).toString();\r\n+      // store the encrypted value with the token key\r\n+      await AsyncStorage.setItem(tokenKey, encryptedValue);\r\n+    } catch (e) {\r\n+      // handle the error\r\n+      console.error(e);\r\n+    }\r\n+  };\r\n+\r\n+  // define a function for retrieving the token\r\n+  const getData = async () => {\r\n+    try {\r\n+      // get the encrypted value with the token key\r\n+      const encryptedValue = await AsyncStorage.getItem(tokenKey);\r\n+      // decrypt the value with the secret key\r\n+      const decryptedValue = CryptoJS.AES.decrypt(encryptedValue, secretKey).toString(CryptoJS.enc.Utf8);\r\n+      // parse the value to an object\r\n+      const value = JSON.parse(decryptedValue);\r\n+      // return the value\r\n+      return value;\r\n+    } catch (e) {\r\n+      // handle the error\r\n+      console.error(e);\r\n+    }\r\n+  };\r\n+\r\n+  const deleteToken = async () => {\r\n+    try {\r\n+      // remove the value with the key\r\n+      await AsyncStorage.removeItem(tokenKey);\r\n+    } catch (e) {\r\n+      // handle the error\r\n+      console.error(e);\r\n+    }\r\n+  };\r\n+\r\n+  // return the storeData and getData functions as an object\r\n+  return {\r\n+    setToken: storeData,\r\n+    getToken: getData,\r\n+    deleteToken: deleteToken,\r\n+  };\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708779305367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,82 +41,11 @@\n       console.error(e);\r\n     }\r\n   };\r\n \r\n-  const deleteToken = async () => {\r\n-    try {\r\n-      // remove the value with the key\r\n-      await AsyncStorage.removeItem(tokenKey);\r\n-    } catch (e) {\r\n-      // handle the error\r\n-      console.error(e);\r\n-    }\r\n-  };\r\n-\r\n   // return the storeData and getData functions as an object\r\n   return {\r\n     setToken: storeData,\r\n     getToken: getData,\r\n-    deleteToken: deleteToken,\r\n-  };\r\n-}\n \r\n-// useTokenStorage.js\r\n-// modify the custom hook to use the context value\r\n-  import CryptoJS from 'crypto-js';\r\n-import AsyncStorage from '@react-native-async-storage/async-storage';\r\n-import { useTokenConsumer } from './useTokenConsumer';\r\n-\r\n-// define a custom hook for storing and retrieving tokens\r\n-export default function useTokenStorage() {\r\n-  // get the secretKey and tokenKey from the context using the custom hook\r\n-  const { secretKey, tokenKey } = useTokenConsumer();\r\n-\r\n-  // define a function for storing the token\r\n-  const storeData = async (value) => {\r\n-    try {\r\n-      // convert the value to a string\r\n-      const stringValue = JSON.stringify(value);\r\n-      // encrypt the value with the secret key\r\n-      const encryptedValue = CryptoJS.AES.encrypt(stringValue, secretKey).toString();\r\n-      // store the encrypted value with the token key\r\n-      await AsyncStorage.setItem(tokenKey, encryptedValue);\r\n-    } catch (e) {\r\n-      // handle the error\r\n-      console.error(e);\r\n-    }\r\n   };\r\n-\r\n-  // define a function for retrieving the token\r\n-  const getData = async () => {\r\n-    try {\r\n-      // get the encrypted value with the token key\r\n-      const encryptedValue = await AsyncStorage.getItem(tokenKey);\r\n-      // decrypt the value with the secret key\r\n-      const decryptedValue = CryptoJS.AES.decrypt(encryptedValue, secretKey).toString(CryptoJS.enc.Utf8);\r\n-      // parse the value to an object\r\n-      const value = JSON.parse(decryptedValue);\r\n-      // return the value\r\n-      return value;\r\n-    } catch (e) {\r\n-      // handle the error\r\n-      console.error(e);\r\n-    }\r\n-  };\r\n-\r\n-  const deleteToken = async () => {\r\n-    try {\r\n-      // remove the value with the key\r\n-      await AsyncStorage.removeItem(tokenKey);\r\n-    } catch (e) {\r\n-      // handle the error\r\n-      console.error(e);\r\n-    }\r\n-  };\r\n-\r\n-  // return the storeData and getData functions as an object\r\n-  return {\r\n-    setToken: storeData,\r\n-    getToken: getData,\r\n-    deleteToken: deleteToken,\r\n-  };\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1708757030968,
            "name": "Commit-0",
            "content": "export default App;\r\n\r\n// useTokenStorage.js\r\n// modify the custom hook to use the context value\r\nimport React from 'react';\r\nimport CryptoJS from 'crypto-js';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useTokenConsumer } from './TokenContext';\r\n\r\n// define a custom hook for storing and retrieving tokens\r\nexport default function useTokenStorage() {\r\n  // get the secretKey and tokenKey from the context using the custom hook\r\n  const { secretKey, tokenKey } = useTokenConsumer();\r\n\r\n  // define a function for storing the token\r\n  const storeData = async (value) => {\r\n    try {\r\n      // convert the value to a string\r\n      const stringValue = JSON.stringify(value);\r\n      // encrypt the value with the secret key\r\n      const encryptedValue = CryptoJS.AES.encrypt(stringValue, secretKey).toString();\r\n      // store the encrypted value with the token key\r\n      await AsyncStorage.setItem(tokenKey, encryptedValue);\r\n    } catch (e) {\r\n      // handle the error\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  // define a function for retrieving the token\r\n  const getData = async () => {\r\n    try {\r\n      // get the encrypted value with the token key\r\n      const encryptedValue = await AsyncStorage.getItem(tokenKey);\r\n      // decrypt the value with the secret key\r\n      const decryptedValue = CryptoJS.AES.decrypt(encryptedValue, secretKey).toString(CryptoJS.enc.Utf8);\r\n      // parse the value to an object\r\n      const value = JSON.parse(decryptedValue);\r\n      // return the value\r\n      return value;\r\n    } catch (e) {\r\n      // handle the error\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  // return the storeData and getData functions as an object\r\n  return {\r\n    setToken: storeData,\r\n    getToken: getData,\r\n  };\r\n}"
        }
    ]
}