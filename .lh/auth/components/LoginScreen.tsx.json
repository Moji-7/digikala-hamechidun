{
    "sourceFile": "auth/components/LoginScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1708515589426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708516184434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n // This is a simplified example of a login screen component\r\n import React from 'react';\r\n import { View, Text, TextInput, Button } from 'react-native';\r\n-import { useForm } from 'react-hook-form';\r\n+\r\n import { useNavigation } from '@react-navigation/native';\r\n \r\n const LoginScreen = () => {\r\n-  const { register, handleSubmit, setValue, errors } = useForm();\r\n+\r\n   const navigation = useNavigation(); // Get the navigation prop\r\n \r\n   const onSubmit = (data) => {\r\n     // Perform the login logic here\r\n@@ -46,9 +46,9 @@\n           ref={register({ name: 'password' }, { required: true })}\r\n         />\r\n         {errors.password && <Text>Password is required</Text>}\r\n       </View>\r\n-      <Button title=\"Login\" onPress={handleSubmit(onSubmit)} />\r\n+      <Button title=\"Login\" onPress={onSubmit} />\r\n     </View>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1708516201072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n           placeholder=\"Enter email\"\r\n           onChangeText={(text) => setValue('email', text)}\r\n           ref={register({ name: 'email' }, { required: true })}\r\n         />\r\n-        {errors.email && <Text>Email is required</Text>}\r\n+     \r\n       </View>\r\n       <View>\r\n         <Text>Password</Text>\r\n         <TextInput\r\n@@ -44,9 +44,9 @@\n           secureTextEntry={true}\r\n           onChangeText={(text) => setValue('password', text)}\r\n           ref={register({ name: 'password' }, { required: true })}\r\n         />\r\n-        {errors.password && <Text>Password is required</Text>}\r\n+      \r\n       </View>\r\n       <Button title=\"Login\" onPress={onSubmit} />\r\n     </View>\r\n   );\r\n"
                },
                {
                    "date": 1708516252457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,23 +29,14 @@\n     <View>\r\n       <Text>Login Screen</Text>\r\n       <View>\r\n         <Text>Email</Text>\r\n-        <TextInput\r\n-          placeholder=\"Enter email\"\r\n-          onChangeText={(text) => setValue('email', text)}\r\n-          ref={register({ name: 'email' }, { required: true })}\r\n-        />\r\n+\r\n      \r\n       </View>\r\n       <View>\r\n         <Text>Password</Text>\r\n-        <TextInput\r\n-          placeholder=\"Enter password\"\r\n-          secureTextEntry={true}\r\n-          onChangeText={(text) => setValue('password', text)}\r\n-          ref={register({ name: 'password' }, { required: true })}\r\n-        />\r\n+\r\n       \r\n       </View>\r\n       <Button title=\"Login\" onPress={onSubmit} />\r\n     </View>\r\n"
                },
                {
                    "date": 1708516286830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,20 +10,20 @@\n \r\n   const onSubmit = (data) => {\r\n     // Perform the login logic here\r\n     // For simplicity, we assume the user can login with admin/admin\r\n-    if (data.email === 'admin' && data.password === 'admin') {\r\n+    //if (data.email === 'admin' && data.password === 'admin') {\r\n       // Navigate to the first route in the drawer navigator\r\n       navigation.navigate('incredibles');\r\n       // Reset the navigation state\r\n       navigation.reset({\r\n         index: 0,\r\n         routes: [{ name: 'incredibles' }],\r\n       });\r\n-    } else {\r\n-      // Show an error message\r\n-      alert('Invalid email or password');\r\n-    }\r\n+    // } else {\r\n+    //   // Show an error message\r\n+    //   alert('Invalid email or password');\r\n+    // }\r\n   };\r\n \r\n   return (\r\n     <View>\r\n"
                },
                {
                    "date": 1708516404641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,12 @@\n       navigation.reset({\r\n         index: 0,\r\n         routes: [{ name: 'incredibles' }],\r\n       });\r\n-    // } else {\r\n-    //   // Show an error message\r\n-    //   alert('Invalid email or password');\r\n-    // }\r\n+        // } else {\r\n+        //   // Show an error message\r\n+        //   alert('Invalid email or password');\r\n+        // }\r\n   };\r\n \r\n   return (\r\n     <View>\r\n"
                },
                {
                    "date": 1708516603945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,12 @@\n     //if (data.email === 'admin' && data.password === 'admin') {\r\n       // Navigate to the first route in the drawer navigator\r\n       navigation.navigate('incredibles');\r\n       // Reset the navigation state\r\n-      navigation.reset({\r\n-        index: 0,\r\n-        routes: [{ name: 'incredibles' }],\r\n-      });\r\n+    //   navigation.reset({\r\n+    //     index: 0,\r\n+    //     routes: [{ name: 'incredibles' }],\r\n+    //   });\r\n         // } else {\r\n         //   // Show an error message\r\n         //   alert('Invalid email or password');\r\n         // }\r\n"
                },
                {
                    "date": 1708517035002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,17 +5,19 @@\n import { useNavigation } from '@react-navigation/native';\r\n \r\n const LoginScreen = () => {\r\n \r\n-  const navigation = useNavigation(); // Get the navigation prop\r\n+    const { navigate, reset } = useNavigation(); // Get the navigation props\r\n \r\n   const onSubmit = (data) => {\r\n     // Perform the login logic here\r\n     // For simplicity, we assume the user can login with admin/admin\r\n     //if (data.email === 'admin' && data.password === 'admin') {\r\n       // Navigate to the first route in the drawer navigator\r\n-      navigation.navigate('incredibles');\r\n+      navigate(\"incredibles\");\r\n       // Reset the navigation state\r\n+      reset([{ name: 'incredibles' }]);\r\n+      // Reset the navigation state\r\n     //   navigation.reset({\r\n     //     index: 0,\r\n     //     routes: [{ name: 'incredibles' }],\r\n     //   });\r\n"
                },
                {
                    "date": 1708517068147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n     // Perform the login logic here\r\n     // For simplicity, we assume the user can login with admin/admin\r\n     //if (data.email === 'admin' && data.password === 'admin') {\r\n       // Navigate to the first route in the drawer navigator\r\n-      navigate(\"incredibles\");\r\n+      navigate(\"Incredibles\");\r\n       // Reset the navigation state\r\n-      reset([{ name: 'incredibles' }]);\r\n+      reset([{ name: 'Incredibles' }]);\r\n       // Reset the navigation state\r\n     //   navigation.reset({\r\n     //     index: 0,\r\n     //     routes: [{ name: 'incredibles' }],\r\n"
                },
                {
                    "date": 1708751678486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,108 @@\n-// This is a simplified example of a login screen component\r\n import React from 'react';\r\n-import { View, Text, TextInput, Button } from 'react-native';\r\n+import { View, Text, TextInput, Button, StyleSheet } from 'react-native';\r\n+import { Formik } from 'formik';\r\n+import * as yup from 'yup';\r\n+import { NavigationContainer } from '@react-navigation/native';\r\n+import { createNativeStackNavigator } from '@react-navigation/stack';\r\n+import AsyncStorage from '@react-native-async-storage/async-storage';\r\n \r\n-import { useNavigation } from '@react-navigation/native';\r\n+const LoginScreen = ({ navigation }) => {\r\n+  const validationSchema = yup.object({\r\n+    email: yup\r\n+      .string('Enter your email')\r\n+      .email('Invalid email format')\r\n+      .required('Email is required'),\r\n+    password: yup\r\n+      .string('Enter your password')\r\n+      .min(6, 'Password must be at least 6 characters')\r\n+      .required('Password is required'),\r\n+  });\r\n \r\n-const LoginScreen = () => {\r\n+  const submitLogin = async (values) => {\r\n+    // API call to your backend to authenticate user\r\n+    // Replace with your actual login API endpoint and logic\r\n+    const response = await fetch('https://your-backend-api.com/login', {\r\n+      method: 'POST',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+      },\r\n+      body: JSON.stringify(values),\r\n+    });\r\n \r\n-    const { navigate, reset } = useNavigation(); // Get the navigation props\r\n-\r\n-  const onSubmit = (data) => {\r\n-    // Perform the login logic here\r\n-    // For simplicity, we assume the user can login with admin/admin\r\n-    //if (data.email === 'admin' && data.password === 'admin') {\r\n-      // Navigate to the first route in the drawer navigator\r\n-      navigate(\"Incredibles\");\r\n-      // Reset the navigation state\r\n-      reset([{ name: 'Incredibles' }]);\r\n-      // Reset the navigation state\r\n-    //   navigation.reset({\r\n-    //     index: 0,\r\n-    //     routes: [{ name: 'incredibles' }],\r\n-    //   });\r\n-        // } else {\r\n-        //   // Show an error message\r\n-        //   alert('Invalid email or password');\r\n-        // }\r\n+    if (response.ok) {\r\n+      const data = await response.json();\r\n+      // Store bearer token in local storage (securely!)\r\n+      await AsyncStorage.setItem('@auth_token', data.token);\r\n+      navigation.navigate('Home');\r\n+    } else {\r\n+      // Handle login failure (display error message, etc.)\r\n+      console.error('Login failed:', await response.text());\r\n+    }\r\n   };\r\n \r\n   return (\r\n-    <View>\r\n-      <Text>Login Screen</Text>\r\n-      <View>\r\n-        <Text>Email</Text>\r\n+    <Formik\r\n+      validationSchema={validationSchema}\r\n+      initialValues={{ email: '', password: '' }}\r\n+      onSubmit={submitLogin}\r\n+    >\r\n+      {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\r\n+        <View style={styles.container}>\r\n+          <Text style={styles.title}>Login</Text>\r\n \r\n-     \r\n-      </View>\r\n-      <View>\r\n-        <Text>Password</Text>\r\n+          <TextInput\r\n+            style={styles.input}\r\n+            onChangeText={handleChange('email')}\r\n+            onBlur={handleBlur('email')}\r\n+            value={values.email}\r\n+            placeholder=\"Email\"\r\n+            keyboardType=\"email-address\"\r\n+          />\r\n+          {touched.email && errors.email && (\r\n+            <Text style={styles.error}>{errors.email}</Text>\r\n+          )}\r\n \r\n-      \r\n-      </View>\r\n-      <Button title=\"Login\" onPress={onSubmit} />\r\n-    </View>\r\n+          <TextInput\r\n+            style={styles.input}\r\n+            onChangeText={handleChange('password')}\r\n+            onBlur={handleBlur('password')}\r\n+            value={values.password}\r\n+            placeholder=\"Password\"\r\n+            secureTextEntry\r\n+          />\r\n+          {touched.password && errors.password && (\r\n+            <Text style={styles.error}>{errors.password}</Text>\r\n+          )}\r\n+\r\n+          <Button title=\"Login\" onPress={handleSubmit} />\r\n+        </View>\r\n+      )}\r\n+    </Formik>\r\n   );\r\n };\r\n \r\n+const styles = StyleSheet.create({\r\n+  container: {\r\n+    flex: 1,\r\n+    justifyContent: 'center',\r\n+    alignItems: 'center',\r\n+  },\r\n+  title: {\r\n+    fontSize: 24,\r\n+    fontWeight: 'bold',\r\n+    marginBottom: 20,\r\n+  },\r\n+  input: {\r\n+    padding: 10,\r\n+    borderWidth: 1,\r\n+    borderColor: '#ccc',\r\n+    marginBottom: 10,\r\n+    borderRadius: 5,\r\n+  },\r\n+  error: {\r\n+    color: 'red',\r\n+    fontSize: 12,\r\n+  },\r\n+});\r\n+\r\n export default LoginScreen;\r\n"
                },
                {
                    "date": 1708751912497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,81 +1,56 @@\n import React from 'react';\r\n-import { View, Text, TextInput, Button, StyleSheet } from 'react-native';\r\n+import { View, Text, TextInput, Button,StyleSheet } from 'react-native';\r\n import { Formik } from 'formik';\r\n import * as yup from 'yup';\r\n-import { NavigationContainer } from '@react-navigation/native';\r\n-import { createNativeStackNavigator } from '@react-navigation/stack';\r\n-import AsyncStorage from '@react-native-async-storage/async-storage';\r\n+import { useTheme } from '@rneui/themed';\r\n \r\n-const LoginScreen = ({ navigation }) => {\r\n-  const validationSchema = yup.object({\r\n-    email: yup\r\n-      .string('Enter your email')\r\n-      .email('Invalid email format')\r\n-      .required('Email is required'),\r\n-    password: yup\r\n-      .string('Enter your password')\r\n-      .min(6, 'Password must be at least 6 characters')\r\n-      .required('Password is required'),\r\n-  });\r\n+// define the validation schema\r\n+const validationSchema = yup.object().shape({\r\n+  email: yup\r\n+    .string()\r\n+    .label('Email')\r\n+    .email('Enter a valid email')\r\n+    .required('Please enter a registered email'),\r\n+  password: yup\r\n+    .string()\r\n+    .label('Password')\r\n+    .required()\r\n+    .min(4, 'Password must have at least 4 characters '),\r\n+});\r\n \r\n-  const submitLogin = async (values) => {\r\n-    // API call to your backend to authenticate user\r\n-    // Replace with your actual login API endpoint and logic\r\n-    const response = await fetch('https://your-backend-api.com/login', {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-      },\r\n-      body: JSON.stringify(values),\r\n-    });\r\n+const LoginScreen = () => {\r\n+    const { theme } = useTheme();\r\n \r\n-    if (response.ok) {\r\n-      const data = await response.json();\r\n-      // Store bearer token in local storage (securely!)\r\n-      await AsyncStorage.setItem('@auth_token', data.token);\r\n-      navigation.navigate('Home');\r\n-    } else {\r\n-      // Handle login failure (display error message, etc.)\r\n-      console.error('Login failed:', await response.text());\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n     <Formik\r\n+      initialValues={{ email: '', password: '' }}\r\n+      onSubmit={(values) => {\r\n+        // TODO: send the values to your backend and get the bearer token\r\n+        // TODO: store the bearer token in local storage using AsyncStorage\r\n+        // TODO: navigate to the next screen using React Navigation\r\n+      }}\r\n+      // pass the validation schema to the Formik component\r\n       validationSchema={validationSchema}\r\n-      initialValues={{ email: '', password: '' }}\r\n-      onSubmit={submitLogin}\r\n     >\r\n       {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\r\n-        <View style={styles.container}>\r\n-          <Text style={styles.title}>Login</Text>\r\n-\r\n+        <View>\r\n+          <Text>Email</Text>\r\n           <TextInput\r\n-            style={styles.input}\r\n             onChangeText={handleChange('email')}\r\n             onBlur={handleBlur('email')}\r\n             value={values.email}\r\n-            placeholder=\"Email\"\r\n-            keyboardType=\"email-address\"\r\n           />\r\n-          {touched.email && errors.email && (\r\n-            <Text style={styles.error}>{errors.email}</Text>\r\n-          )}\r\n-\r\n+          {errors.email && touched.email && <Text>{errors.email}</Text>}\r\n+          <Text>Password</Text>\r\n           <TextInput\r\n-            style={styles.input}\r\n             onChangeText={handleChange('password')}\r\n             onBlur={handleBlur('password')}\r\n             value={values.password}\r\n-            placeholder=\"Password\"\r\n             secureTextEntry\r\n           />\r\n-          {touched.password && errors.password && (\r\n-            <Text style={styles.error}>{errors.password}</Text>\r\n-          )}\r\n-\r\n-          <Button title=\"Login\" onPress={handleSubmit} />\r\n+          {errors.password && touched.password && <Text>{errors.password}</Text>}\r\n+          <Button onPress={handleSubmit} title=\"Login\" />\r\n         </View>\r\n       )}\r\n     </Formik>\r\n   );\r\n"
                },
                {
                    "date": 1708752189630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,15 @@\n \r\n const LoginScreen = () => {\r\n     const { theme } = useTheme();\r\n \r\n+    const initialValues = {\r\n+        email: 'abc@gmail.com',\r\n+        password: 'secret',\r\n+      };\r\n   return (\r\n     <Formik\r\n-      initialValues={{ email: '', password: '' }}\r\n+      initialValues={initialValues}\r\n       onSubmit={(values) => {\r\n         // TODO: send the values to your backend and get the bearer token\r\n         // TODO: store the bearer token in local storage using AsyncStorage\r\n         // TODO: navigate to the next screen using React Navigation\r\n"
                },
                {
                    "date": 1708752432938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n import React from 'react';\r\n import { View, Text, TextInput, Button,StyleSheet } from 'react-native';\r\n import { Formik } from 'formik';\r\n import * as yup from 'yup';\r\n+\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n import { useTheme } from '@rneui/themed';\r\n \r\n // define the validation schema\r\n const validationSchema = yup.object().shape({\r\n@@ -16,9 +19,11 @@\n     .label('Password')\r\n     .required()\r\n     .min(4, 'Password must have at least 4 characters '),\r\n });\r\n+const { navigate, reset } = useNavigation(); // Get the navigation props\r\n \r\n+\r\n const LoginScreen = () => {\r\n     const { theme } = useTheme();\r\n \r\n     const initialValues = {\r\n@@ -31,8 +36,11 @@\n       onSubmit={(values) => {\r\n         // TODO: send the values to your backend and get the bearer token\r\n         // TODO: store the bearer token in local storage using AsyncStorage\r\n         // TODO: navigate to the next screen using React Navigation\r\n+        navigate(\"Incredibles\");\r\n+        // Reset the navigation state\r\n+        reset([{ name: 'Incredibles' }]);\r\n       }}\r\n       // pass the validation schema to the Formik component\r\n       validationSchema={validationSchema}\r\n     >\r\n"
                },
                {
                    "date": 1708752565576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,26 @@\n import React from 'react';\r\n-import { View, Text, TextInput, Button,StyleSheet } from 'react-native';\r\n+import { View, Text, TextInput, Button, StyleSheet } from 'react-native';\r\n import { Formik } from 'formik';\r\n import * as yup from 'yup';\r\n \r\n import { useNavigation } from '@react-navigation/native';\r\n \r\n import { useTheme } from '@rneui/themed';\r\n+import AsyncStorage from 'react-native';\r\n \r\n // define the validation schema\r\n const validationSchema = yup.object().shape({\r\n-  email: yup\r\n-    .string()\r\n-    .label('Email')\r\n-    .email('Enter a valid email')\r\n-    .required('Please enter a registered email'),\r\n-  password: yup\r\n-    .string()\r\n-    .label('Password')\r\n-    .required()\r\n-    .min(4, 'Password must have at least 4 characters '),\r\n+    email: yup\r\n+        .string()\r\n+        .label('Email')\r\n+        .email('Enter a valid email')\r\n+        .required('Please enter a registered email'),\r\n+    password: yup\r\n+        .string()\r\n+        .label('Password')\r\n+        .required()\r\n+        .min(4, 'Password must have at least 4 characters '),\r\n });\r\n const { navigate, reset } = useNavigation(); // Get the navigation props\r\n \r\n \r\n@@ -28,68 +29,81 @@\n \r\n     const initialValues = {\r\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n-      };\r\n-  return (\r\n-    <Formik\r\n-      initialValues={initialValues}\r\n-      onSubmit={(values) => {\r\n-        // TODO: send the values to your backend and get the bearer token\r\n-        // TODO: store the bearer token in local storage using AsyncStorage\r\n-        // TODO: navigate to the next screen using React Navigation\r\n-        navigate(\"Incredibles\");\r\n-        // Reset the navigation state\r\n-        reset([{ name: 'Incredibles' }]);\r\n-      }}\r\n-      // pass the validation schema to the Formik component\r\n-      validationSchema={validationSchema}\r\n-    >\r\n-      {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\r\n-        <View>\r\n-          <Text>Email</Text>\r\n-          <TextInput\r\n-            onChangeText={handleChange('email')}\r\n-            onBlur={handleBlur('email')}\r\n-            value={values.email}\r\n-          />\r\n-          {errors.email && touched.email && <Text>{errors.email}</Text>}\r\n-          <Text>Password</Text>\r\n-          <TextInput\r\n-            onChangeText={handleChange('password')}\r\n-            onBlur={handleBlur('password')}\r\n-            value={values.password}\r\n-            secureTextEntry\r\n-          />\r\n-          {errors.password && touched.password && <Text>{errors.password}</Text>}\r\n-          <Button onPress={handleSubmit} title=\"Login\" />\r\n-        </View>\r\n-      )}\r\n-    </Formik>\r\n-  );\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={initialValues}\r\n+            onSubmit={(values) => {\r\n+                // TODO: send the values to your backend and get the bearer token\r\n+                // TODO: store the bearer token in local storage using AsyncStorage\r\n+                // TODO: navigate to the next screen using React Navigation\r\n+\r\n+\r\n+                // store the bearer token in local storage using AsyncStorage\r\n+                AsyncStorage.('token', token)\r\n+                    .then(() => {\r\n+                        // token saved successfully\r\n+                        // TODO: navigate to the next screen using React Navigation\r\n+                        navigate(\"Incredibles\");\r\n+                        // Reset the navigation state\r\n+                        reset([{ name: 'Incredibles' }]);\r\n+                    })\r\n+                // .catch((error) => {\r\n+                //   // handle the error\r\n+                //   console.error(error);\r\n+                // });\r\n+\r\n+            }}\r\n+            // pass the validation schema to the Formik component\r\n+            validationSchema={validationSchema}\r\n+        >\r\n+            {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\r\n+                <View>\r\n+                    <Text>Email</Text>\r\n+                    <TextInput\r\n+                        onChangeText={handleChange('email')}\r\n+                        onBlur={handleBlur('email')}\r\n+                        value={values.email}\r\n+                    />\r\n+                    {errors.email && touched.email && <Text>{errors.email}</Text>}\r\n+                    <Text>Password</Text>\r\n+                    <TextInput\r\n+                        onChangeText={handleChange('password')}\r\n+                        onBlur={handleBlur('password')}\r\n+                        value={values.password}\r\n+                        secureTextEntry\r\n+                    />\r\n+                    {errors.password && touched.password && <Text>{errors.password}</Text>}\r\n+                    <Button onPress={handleSubmit} title=\"Login\" />\r\n+                </View>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n };\r\n \r\n const styles = StyleSheet.create({\r\n-  container: {\r\n-    flex: 1,\r\n-    justifyContent: 'center',\r\n-    alignItems: 'center',\r\n-  },\r\n-  title: {\r\n-    fontSize: 24,\r\n-    fontWeight: 'bold',\r\n-    marginBottom: 20,\r\n-  },\r\n-  input: {\r\n-    padding: 10,\r\n-    borderWidth: 1,\r\n-    borderColor: '#ccc',\r\n-    marginBottom: 10,\r\n-    borderRadius: 5,\r\n-  },\r\n-  error: {\r\n-    color: 'red',\r\n-    fontSize: 12,\r\n-  },\r\n+    container: {\r\n+        flex: 1,\r\n+        justifyContent: 'center',\r\n+        alignItems: 'center',\r\n+    },\r\n+    title: {\r\n+        fontSize: 24,\r\n+        fontWeight: 'bold',\r\n+        marginBottom: 20,\r\n+    },\r\n+    input: {\r\n+        padding: 10,\r\n+        borderWidth: 1,\r\n+        borderColor: '#ccc',\r\n+        marginBottom: 10,\r\n+        borderRadius: 5,\r\n+    },\r\n+    error: {\r\n+        color: 'red',\r\n+        fontSize: 12,\r\n+    },\r\n });\r\n \r\n export default LoginScreen;\r\n"
                },
                {
                    "date": 1708753193676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,11 @@\n \r\n import { useNavigation } from '@react-navigation/native';\r\n \r\n import { useTheme } from '@rneui/themed';\r\n-import AsyncStorage from 'react-native';\r\n+import AsyncStorage from '@react-native-async-storage/async-storage';\r\n \r\n+\r\n // define the validation schema\r\n const validationSchema = yup.object().shape({\r\n     email: yup\r\n         .string()\r\n@@ -30,31 +31,35 @@\n     const initialValues = {\r\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n+    // store item\r\n+    const storeData = async (value) => {\r\n+        try {\r\n+            await AsyncStorage.setItem('@storage_Key', value)\r\n+        } catch (e) {\r\n+            // saving error\r\n+        }\r\n+    }\r\n     return (\r\n         <Formik\r\n             initialValues={initialValues}\r\n-            onSubmit={(values) => {\r\n+            onSubmit={async (values) => {\r\n                 // TODO: send the values to your backend and get the bearer token\r\n                 // TODO: store the bearer token in local storage using AsyncStorage\r\n                 // TODO: navigate to the next screen using React Navigation\r\n \r\n \r\n                 // store the bearer token in local storage using AsyncStorage\r\n-                AsyncStorage.('token', token)\r\n-                    .then(() => {\r\n-                        // token saved successfully\r\n-                        // TODO: navigate to the next screen using React Navigation\r\n-                        navigate(\"Incredibles\");\r\n-                        // Reset the navigation state\r\n-                        reset([{ name: 'Incredibles' }]);\r\n-                    })\r\n-                // .catch((error) => {\r\n-                //   // handle the error\r\n-                //   console.error(error);\r\n-                // });\r\n \r\n+                await storeData('authorization Bearer mojijun')\r\n+\r\n+                navigate(\"Incredibles\");\r\n+                // Reset the navigation state\r\n+                reset([{ name: 'Incredibles' }]);\r\n+\r\n+\r\n+\r\n             }}\r\n             // pass the validation schema to the Formik component\r\n             validationSchema={validationSchema}\r\n         >\r\n"
                },
                {
                    "date": 1708753220904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,11 @@\n                 // store the bearer token in local storage using AsyncStorage\r\n \r\n                 await storeData('authorization Bearer mojijun')\r\n \r\n-                navigate(\"Incredibles\");\r\n+               // navigate(\"Incredibles\");\r\n                 // Reset the navigation state\r\n-                reset([{ name: 'Incredibles' }]);\r\n+               // reset([{ name: 'Incredibles' }]);\r\n \r\n \r\n \r\n             }}\r\n"
                },
                {
                    "date": 1708753232613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \r\n \r\n                 // store the bearer token in local storage using AsyncStorage\r\n \r\n-                await storeData('authorization Bearer mojijun')\r\n+               // await storeData('authorization Bearer mojijun')\r\n \r\n                // navigate(\"Incredibles\");\r\n                 // Reset the navigation state\r\n                // reset([{ name: 'Incredibles' }]);\r\n"
                },
                {
                    "date": 1708753252586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,15 +32,15 @@\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n     // store item\r\n-    const storeData = async (value) => {\r\n-        try {\r\n-            await AsyncStorage.setItem('@storage_Key', value)\r\n-        } catch (e) {\r\n-            // saving error\r\n-        }\r\n-    }\r\n+    // const storeData = async (value) => {\r\n+    //     try {\r\n+    //         await AsyncStorage.setItem('@storage_Key', value)\r\n+    //     } catch (e) {\r\n+    //         // saving error\r\n+    //     }\r\n+    // }\r\n     return (\r\n         <Formik\r\n             initialValues={initialValues}\r\n             onSubmit={async (values) => {\r\n"
                },
                {
                    "date": 1708753273186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,15 +32,9 @@\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n     // store item\r\n-    // const storeData = async (value) => {\r\n-    //     try {\r\n-    //         await AsyncStorage.setItem('@storage_Key', value)\r\n-    //     } catch (e) {\r\n-    //         // saving error\r\n-    //     }\r\n-    // }\r\n+ \r\n     return (\r\n         <Formik\r\n             initialValues={initialValues}\r\n             onSubmit={async (values) => {\r\n"
                },
                {
                    "date": 1708753286504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,16 +44,9 @@\n \r\n \r\n                 // store the bearer token in local storage using AsyncStorage\r\n \r\n-               // await storeData('authorization Bearer mojijun')\r\n \r\n-               // navigate(\"Incredibles\");\r\n-                // Reset the navigation state\r\n-               // reset([{ name: 'Incredibles' }]);\r\n-\r\n-\r\n-\r\n             }}\r\n             // pass the validation schema to the Formik component\r\n             validationSchema={validationSchema}\r\n         >\r\n"
                },
                {
                    "date": 1708753312065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,14 +21,14 @@\n         .label('Password')\r\n         .required()\r\n         .min(4, 'Password must have at least 4 characters '),\r\n });\r\n-const { navigate, reset } = useNavigation(); // Get the navigation props\r\n \r\n \r\n+\r\n const LoginScreen = () => {\r\n     const { theme } = useTheme();\r\n-\r\n+const { navigate, reset } = useNavigation(); // Get the navigation props\r\n     const initialValues = {\r\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n"
                },
                {
                    "date": 1708753386936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,18 +32,25 @@\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n     // store item\r\n- \r\n+ // store item\r\n+const storeData = async (value) => {\t\t\r\n+    try {\r\n+      await AsyncStorage.setItem('@storage_Key', value)\r\n+    } catch (e) {\r\n+      // saving error\r\n+    }\r\n+  }\r\n     return (\r\n         <Formik\r\n             initialValues={initialValues}\r\n             onSubmit={async (values) => {\r\n                 // TODO: send the values to your backend and get the bearer token\r\n                 // TODO: store the bearer token in local storage using AsyncStorage\r\n                 // TODO: navigate to the next screen using React Navigation\r\n \r\n-\r\n+                await storeData('authorization Bearer mojijun')\r\n                 // store the bearer token in local storage using AsyncStorage\r\n \r\n \r\n             }}\r\n"
                },
                {
                    "date": 1708753403761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,22 +26,22 @@\n \r\n \r\n const LoginScreen = () => {\r\n     const { theme } = useTheme();\r\n-const { navigate, reset } = useNavigation(); // Get the navigation props\r\n+    const { navigate, reset } = useNavigation(); // Get the navigation props\r\n     const initialValues = {\r\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n     // store item\r\n- // store item\r\n-const storeData = async (value) => {\t\t\r\n-    try {\r\n-      await AsyncStorage.setItem('@storage_Key', value)\r\n-    } catch (e) {\r\n-      // saving error\r\n+    // store item\r\n+    const storeData = async (value) => {\r\n+        try {\r\n+            await AsyncStorage.setItem('@storage_Key', value)\r\n+        } catch (e) {\r\n+            // saving error\r\n+        }\r\n     }\r\n-  }\r\n     return (\r\n         <Formik\r\n             initialValues={initialValues}\r\n             onSubmit={async (values) => {\r\n@@ -49,8 +49,12 @@\n                 // TODO: store the bearer token in local storage using AsyncStorage\r\n                 // TODO: navigate to the next screen using React Navigation\r\n \r\n                 await storeData('authorization Bearer mojijun')\r\n+                // Navigate to the first route in the drawer navigator\r\n+                navigate(\"Incredibles\");\r\n+                // Reset the navigation state\r\n+                reset([{ name: 'Incredibles' }]);\r\n                 // store the bearer token in local storage using AsyncStorage\r\n \r\n \r\n             }}\r\n"
                },
                {
                    "date": 1708753535821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,11 @@\n     // store item\r\n     const storeData = async (value) => {\r\n         try {\r\n             await AsyncStorage.setItem('@storage_Key', value)\r\n-        } catch (e) {\r\n+        } catch (error) {\r\n             // saving error\r\n+            console.error(`Error storing data in AsyncStorage for value '${value}': ${error}`);\r\n         }\r\n     }\r\n     return (\r\n         <Formik\r\n"
                },
                {
                    "date": 1708755634645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { useNavigation } from '@react-navigation/native';\r\n \r\n import { useTheme } from '@rneui/themed';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n+import useTokenStorage from './hooks/useTokenStorage';\r\n \r\n \r\n // define the validation schema\r\n const validationSchema = yup.object().shape({\r\n@@ -22,36 +23,45 @@\n         .required()\r\n         .min(4, 'Password must have at least 4 characters '),\r\n });\r\n \r\n+const secretKey = 'WheelyStrongKey';\r\n+const tokenKey = '@token';\r\n \r\n-\r\n const LoginScreen = () => {\r\n     const { theme } = useTheme();\r\n     const { navigate, reset } = useNavigation(); // Get the navigation props\r\n     const initialValues = {\r\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n     // store item\r\n-    // store item\r\n+    const { setToken, getToken } = useTokenStorage(secretKey, tokenKey);\r\n+\r\n     const storeData = async (value) => {\r\n         try {\r\n             await AsyncStorage.setItem('@storage_Key', value)\r\n         } catch (error) {\r\n             // saving error\r\n             console.error(`Error storing data in AsyncStorage for value '${value}': ${error}`);\r\n         }\r\n     }\r\n+\r\n+    // define a secret key and a token key for the custom hook\r\n+\r\n     return (\r\n         <Formik\r\n             initialValues={initialValues}\r\n             onSubmit={async (values) => {\r\n                 // TODO: send the values to your backend and get the bearer token\r\n                 // TODO: store the bearer token in local storage using AsyncStorage\r\n                 // TODO: navigate to the next screen using React Navigation\r\n \r\n-                await storeData('authorization Bearer mojijun')\r\n+                //await storeData('authorization Bearer mojijun')\r\n+                const token = 'authorization Bearer mojijun';\r\n+\r\n+                // store the token using the setToken function\r\n+                await setToken(token);\r\n                 // Navigate to the first route in the drawer navigator\r\n                 navigate(\"Incredibles\");\r\n                 // Reset the navigation state\r\n                 reset([{ name: 'Incredibles' }]);\r\n"
                },
                {
                    "date": 1708756778510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,8 @@\n     };\r\n     // store item\r\n     const { setToken, getToken } = useTokenStorage(secretKey, tokenKey);\r\n \r\n-    const storeData = async (value) => {\r\n-        try {\r\n-            await AsyncStorage.setItem('@storage_Key', value)\r\n-        } catch (error) {\r\n-            // saving error\r\n-            console.error(`Error storing data in AsyncStorage for value '${value}': ${error}`);\r\n-        }\r\n-    }\r\n \r\n     // define a secret key and a token key for the custom hook\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1708757113133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         email: 'abc@gmail.com',\r\n         password: 'secret',\r\n     };\r\n     // store item\r\n-    const { setToken, getToken } = useTokenStorage(secretKey, tokenKey);\r\n+    const { setToken, getToken } = useTokenStorage()\r\n \r\n \r\n     // define a secret key and a token key for the custom hook\r\n \r\n"
                },
                {
                    "date": 1708759574263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                 // TODO: store the bearer token in local storage using AsyncStorage\r\n                 // TODO: navigate to the next screen using React Navigation\r\n \r\n                 //await storeData('authorization Bearer mojijun')\r\n-                const token = 'authorization Bearer mojijun';\r\n+                const token = 'authorization Bearer mojijun2';\r\n \r\n                 // store the token using the setToken function\r\n                 await setToken(token);\r\n                 // Navigate to the first route in the drawer navigator\r\n"
                },
                {
                    "date": 1708760539587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,8 @@\n         .required()\r\n         .min(4, 'Password must have at least 4 characters '),\r\n });\r\n \r\n-const secretKey = 'WheelyStrongKey';\r\n-const tokenKey = '@token';\r\n \r\n const LoginScreen = () => {\r\n     const { theme } = useTheme();\r\n     const { navigate, reset } = useNavigation(); // Get the navigation props\r\n"
                },
                {
                    "date": 1708760634270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,24 +62,24 @@\n             // pass the validation schema to the Formik component\r\n             validationSchema={validationSchema}\r\n         >\r\n             {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\r\n-                <View>\r\n-                    <Text>Email</Text>\r\n+                <View style={styles.container}>\r\n+                    <Text style={styles.title}>Email</Text>\r\n                     <TextInput\r\n                         onChangeText={handleChange('email')}\r\n                         onBlur={handleBlur('email')}\r\n                         value={values.email}\r\n                     />\r\n                     {errors.email && touched.email && <Text>{errors.email}</Text>}\r\n-                    <Text>Password</Text>\r\n-                    <TextInput\r\n+                    <Text style={styles.title}>Password</Text>\r\n+                    <TextInput style={styles.input}\r\n                         onChangeText={handleChange('password')}\r\n                         onBlur={handleBlur('password')}\r\n                         value={values.password}\r\n                         secureTextEntry\r\n                     />\r\n-                    {errors.password && touched.password && <Text>{errors.password}</Text>}\r\n+                    {errors.password && touched.password && <Text style={styles.error}>{errors.password}</Text>}\r\n                     <Button onPress={handleSubmit} title=\"Login\" />\r\n                 </View>\r\n             )}\r\n         </Formik>\r\n"
                },
                {
                    "date": 1708781337335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n \r\n import { useTheme } from '@rneui/themed';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import useTokenStorage from './hooks/useTokenStorage';\r\n+import { useSelector } from 'react-redux';\r\n \r\n \r\n // define the validation schema\r\n const validationSchema = yup.object().shape({\r\n@@ -64,9 +65,9 @@\n         >\r\n             {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\r\n                 <View style={styles.container}>\r\n                     <Text style={styles.title}>Email</Text>\r\n-                    <TextInput\r\n+                    <TextInput style={styles.input}\r\n                         onChangeText={handleChange('email')}\r\n                         onBlur={handleBlur('email')}\r\n                         value={values.email}\r\n                     />\r\n"
                },
                {
                    "date": 1708781469101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,12 @@\n     // store item\r\n     const { setToken, getToken } = useTokenStorage()\r\n \r\n \r\n+    function dispatch(arg0: Promise<void>) {\r\n+        throw new Error('Function not implemented.');\r\n+    }\r\n+\r\n     // define a secret key and a token key for the custom hook\r\n \r\n     return (\r\n         <Formik\r\n@@ -51,8 +55,9 @@\n                 const token = 'authorization Bearer mojijun2';\r\n \r\n                 // store the token using the setToken function\r\n                 await setToken(token);\r\n+                dispatch(setToken(token));\r\n                 // Navigate to the first route in the drawer navigator\r\n                 navigate(\"Incredibles\");\r\n                 // Reset the navigation state\r\n                 reset([{ name: 'Incredibles' }]);\r\n"
                },
                {
                    "date": 1708781608832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n import { useTheme } from '@rneui/themed';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import useTokenStorage from './hooks/useTokenStorage';\r\n-import { useSelector } from 'react-redux';\r\n+import { useDispatch, useSelector } from 'react-redux';\r\n \r\n \r\n // define the validation schema\r\n const validationSchema = yup.object().shape({\r\n@@ -36,12 +36,9 @@\n     // store item\r\n     const { setToken, getToken } = useTokenStorage()\r\n \r\n \r\n-    function dispatch(arg0: Promise<void>) {\r\n-        throw new Error('Function not implemented.');\r\n-    }\r\n-\r\n+    const dispatch = useDispatch();\r\n     // define a secret key and a token key for the custom hook\r\n \r\n     return (\r\n         <Formik\r\n@@ -55,9 +52,9 @@\n                 const token = 'authorization Bearer mojijun2';\r\n \r\n                 // store the token using the setToken function\r\n                 await setToken(token);\r\n-                dispatch(setToken(token));\r\n+                dispatch(addItem(digikalaProduct.digikalaProduct));\r\n                 // Navigate to the first route in the drawer navigator\r\n                 navigate(\"Incredibles\");\r\n                 // Reset the navigation state\r\n                 reset([{ name: 'Incredibles' }]);\r\n"
                },
                {
                    "date": 1708781625373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import { useTheme } from '@rneui/themed';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import useTokenStorage from './hooks/useTokenStorage';\r\n import { useDispatch, useSelector } from 'react-redux';\r\n+import { setTokenRedux } from '../../components/reduxApi/tokenSlice.reducer';\r\n \r\n \r\n // define the validation schema\r\n const validationSchema = yup.object().shape({\r\n@@ -52,9 +53,9 @@\n                 const token = 'authorization Bearer mojijun2';\r\n \r\n                 // store the token using the setToken function\r\n                 await setToken(token);\r\n-                dispatch(addItem(digikalaProduct.digikalaProduct));\r\n+                dispatch(setTokenRedux(token));\r\n                 // Navigate to the first route in the drawer navigator\r\n                 navigate(\"Incredibles\");\r\n                 // Reset the navigation state\r\n                 reset([{ name: 'Incredibles' }]);\r\n"
                },
                {
                    "date": 1708782101177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n                 // TODO: store the bearer token in local storage using AsyncStorage\r\n                 // TODO: navigate to the next screen using React Navigation\r\n \r\n                 //await storeData('authorization Bearer mojijun')\r\n-                const token = 'authorization Bearer mojijun2';\r\n+                const token = 'authorization Bearer mojijun3';\r\n \r\n                 // store the token using the setToken function\r\n                 await setToken(token);\r\n                 dispatch(setTokenRedux(token));\r\n"
                }
            ],
            "date": 1708515589426,
            "name": "Commit-0",
            "content": "// This is a simplified example of a login screen component\r\nimport React from 'react';\r\nimport { View, Text, TextInput, Button } from 'react-native';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst LoginScreen = () => {\r\n  const { register, handleSubmit, setValue, errors } = useForm();\r\n  const navigation = useNavigation(); // Get the navigation prop\r\n\r\n  const onSubmit = (data) => {\r\n    // Perform the login logic here\r\n    // For simplicity, we assume the user can login with admin/admin\r\n    if (data.email === 'admin' && data.password === 'admin') {\r\n      // Navigate to the first route in the drawer navigator\r\n      navigation.navigate('incredibles');\r\n      // Reset the navigation state\r\n      navigation.reset({\r\n        index: 0,\r\n        routes: [{ name: 'incredibles' }],\r\n      });\r\n    } else {\r\n      // Show an error message\r\n      alert('Invalid email or password');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text>Login Screen</Text>\r\n      <View>\r\n        <Text>Email</Text>\r\n        <TextInput\r\n          placeholder=\"Enter email\"\r\n          onChangeText={(text) => setValue('email', text)}\r\n          ref={register({ name: 'email' }, { required: true })}\r\n        />\r\n        {errors.email && <Text>Email is required</Text>}\r\n      </View>\r\n      <View>\r\n        <Text>Password</Text>\r\n        <TextInput\r\n          placeholder=\"Enter password\"\r\n          secureTextEntry={true}\r\n          onChangeText={(text) => setValue('password', text)}\r\n          ref={register({ name: 'password' }, { required: true })}\r\n        />\r\n        {errors.password && <Text>Password is required</Text>}\r\n      </View>\r\n      <Button title=\"Login\" onPress={handleSubmit(onSubmit)} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n"
        }
    ]
}